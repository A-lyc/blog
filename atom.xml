<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qteam</title>
  
  <subtitle>博客</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://q-jason.github.io/blog/"/>
  <updated>2020-04-02T04:00:56.097Z</updated>
  <id>https://q-jason.github.io/blog/</id>
  
  <author>
    <name>jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>心得-获取Dom元素的相对位置</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5e8001528uxe70q46bu/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5e8001528uxe70q46bu/</id>
    <published>2020-04-02T03:09:08.000Z</published>
    <updated>2020-04-02T04:00:56.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素相对于视口的距离"><a href="#元素相对于视口的距离" class="headerlink" title="元素相对于视口的距离"></a>元素相对于视口的距离</h2><blockquote><p>domEl.getBoundingClientRect 这个方法可以轻松获取<br>例子如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> react = domObj.getBoundingClientRect();</span><br><span class="line"><span class="comment">// react = &#123; top, right, bottom, left, width, height &#125;</span></span><br><span class="line"><span class="comment">//  其中 width, height 有些兼容问题（IE 中没有这俩属性）</span></span><br></pre></td></tr></table></figure><blockquote><p>各个属性解释如下</p></blockquote><img src="/blog/article/ck8i8f5e8001528uxe70q46bu/getBoundingClientRect.jpg" class=""><p>—————— END ——————</p><h2 id="元素的定位父元素以及距离"><a href="#元素的定位父元素以及距离" class="headerlink" title="元素的定位父元素以及距离"></a>元素的定位父元素以及距离</h2><blockquote><p>解释：”定位父元素” 是距离自身最近的 position: relative || absolute || fixed 的父级元素<br>获取：用 dom 原生属性即可获取<br>例子：看下图 </p></blockquote><img src="/blog/article/ck8i8f5e8001528uxe70q46bu/offsetParent.png" class=""><p>注意：</p><ol><li>元素自身有 fixed 定位，offsetParent 的结果为 null</li><li>元素自身无 fixed 定位，且父级元素都未经过定位，offsetParent 的结果为 body</li><li>body 元素的 parentNode 是 null</li></ol><p>—————— END ——————</p><h2 id="元素相对于页面最顶部的距离"><a href="#元素相对于页面最顶部的距离" class="headerlink" title="元素相对于页面最顶部的距离"></a>元素相对于页面最顶部的距离</h2><blockquote><p>无现成属性<br>可以通过计算而来<br>方法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  el.getBoundingClientRect().top + <span class="built_in">window</span>.pageYOffset</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>—————— END ——————</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元素相对于视口的距离&quot;&gt;&lt;a href=&quot;#元素相对于视口的距离&quot; class=&quot;headerlink&quot; title=&quot;元素相对于视口的距离&quot;&gt;&lt;/a&gt;元素相对于视口的距离&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;domEl.getBoundingClientRe
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="文档" scheme="https://q-jason.github.io/blog/tags/%E6%96%87%E6%A1%A3/"/>
    
      <category term="DOM" scheme="https://q-jason.github.io/blog/tags/DOM/"/>
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>运维-docker技术</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5ee001h28uxe328ezo9/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5ee001h28uxe328ezo9/</id>
    <published>2020-03-23T07:53:50.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在工作中认识了 docker<br>仔细一看这玩意真是强大…</p></blockquote><blockquote><p>简单介绍：<br>有亲手配置过服务器线上项目的一定经历过很多痛苦<br>通常是这个环境不对，那个环境不对的<br>docker 就是解决这个的（不用自己配置服务器运行环境了）</p></blockquote><blockquote><p>原理以及名词介绍：<br>镜像：也称为 image，就是把本地的项目和环境打包成一个镜像文件（你可以理解一个压缩包）<br>容器：是镜像的实例（面向对象的思想），就像是 windows 系统，同一个镜像可以给很多电脑装系统<br>通过 “镜像” 生成 “容器”，每一个容器都是封闭的<br>通常会有一个端口号对外映射暴露，提供服务</p></blockquote><h2 id="学习文章"><a href="#学习文章" class="headerlink" title="学习文章"></a>学习文章</h2><blockquote><p>阮一峰老师：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在工作中认识了 docker&lt;br&gt;仔细一看这玩意真是强大…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;简单介绍：&lt;br&gt;有亲手配置过服务器线上项目的一定经历过很多痛苦&lt;br&gt;通常是这个环境不对，那个环境不对的&lt;br&gt;do
      
    
    </summary>
    
    
      <category term="运维" scheme="https://q-jason.github.io/blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="node" scheme="https://q-jason.github.io/blog/tags/node/"/>
    
      <category term="docker" scheme="https://q-jason.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>酷库-走马灯效果</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5fd002r28uxhos6h07d/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5fd002r28uxhos6h07d/</id>
    <published>2020-03-17T02:03:58.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>也许你可以先试试 marquee 标签<br>这个标签已经被 w3c 淘汰，各大浏览器对这个标签的支持非常好</p></blockquote><h2 id="marquee-js"><a href="#marquee-js" class="headerlink" title="marquee-js"></a>marquee-js</h2><blockquote><p>简介：基于原生实现，github 星不太高（能用就行哈哈哈）<br>home: <a href="http://mapleliu.com/marquee-js" target="_blank" rel="noopener">http://mapleliu.com/marquee-js</a><br>github: <a href="https://github.com/liujian10/marquee-js#readme" target="_blank" rel="noopener">https://github.com/liujian10/marquee-js#readme</a><br>npm: <a href="https://www.npmjs.com/package/marquee-js" target="_blank" rel="noopener">https://www.npmjs.com/package/marquee-js</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;也许你可以先试试 marquee 标签&lt;br&gt;这个标签已经被 w3c 淘汰，各大浏览器对这个标签的支持非常好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;marquee-js&quot;&gt;&lt;a href=&quot;#marquee-js&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="走马灯" scheme="https://q-jason.github.io/blog/tags/%E8%B5%B0%E9%A9%AC%E7%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>酷库-表单验证</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5fb002n28ux65upc50i/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5fb002n28ux65upc50i/</id>
    <published>2020-03-12T10:41:50.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async-validator（原生，无依赖）"><a href="#async-validator（原生，无依赖）" class="headerlink" title="async-validator（原生，无依赖）"></a>async-validator（原生，无依赖）</h2><blockquote><p>github: <a href="http://github.com/yiminghe/async-validator" target="_blank" rel="noopener">http://github.com/yiminghe/async-validator</a><br>npm: <a href="https://www.npmjs.com/package/async-validator" target="_blank" rel="noopener">https://www.npmjs.com/package/async-validator</a><br>非常强大的验证库<br>用法大约就是先定义对象风格，然后生成验证器，传入对象进行验证<br>看名字就知道支持异步验证！<br>下面总结几个需要理解才能懂的知识</p></blockquote><ol><li>whitespace 的作用是判断是否为只包含空格的字符串，这个属性在字段的风格中写</li><li>一个字段可以包含多个验证（数组），这个好处是可以定义多个 message 来响应不同的错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: [</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'姓名不能为空'</span>, <span class="attr">whitespace</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">4</span>, <span class="attr">message</span>: <span class="string">'姓名为 2 ~ 4 位'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vee-validate（vue）"><a href="#vee-validate（vue）" class="headerlink" title="vee-validate（vue）"></a>vee-validate（vue）</h2><blockquote><p>github: <a href="https://github.com/logaretm/vee-validate" target="_blank" rel="noopener">https://github.com/logaretm/vee-validate</a><br>npm: <a href="https://www.npmjs.com/package/vee-validate" target="_blank" rel="noopener">https://www.npmjs.com/package/vee-validate</a><br>直接在 template 模板中写验证规则，代码逻辑上比较友好<br>原则上所有 vue ui 库都能使用<br>支持异步验证（通过手动 setErrors 的方式）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;async-validator（原生，无依赖）&quot;&gt;&lt;a href=&quot;#async-validator（原生，无依赖）&quot; class=&quot;headerlink&quot; title=&quot;async-validator（原生，无依赖）&quot;&gt;&lt;/a&gt;async-validator（原
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="表单验证" scheme="https://q-jason.github.io/blog/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>酷库-mockjs</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5ei001s28ux2akxgrlj/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5ei001s28ux2akxgrlj/</id>
    <published>2020-03-12T01:54:09.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>模拟数据应该是开发中必有的情况= =</p></blockquote><h2 id="mockjs"><a href="#mockjs" class="headerlink" title="mockjs"></a>mockjs</h2><blockquote><p>home：<a href="http://mockjs.com" target="_blank" rel="noopener">http://mockjs.com</a><br>github：<a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">https://github.com/nuysoft/Mock</a><br>npm：<a href="https://www.npmjs.com/package/mockjs" target="_blank" rel="noopener">https://www.npmjs.com/package/mockjs</a><br>文档查阅：<a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">https://github.com/nuysoft/Mock/wiki</a></p></blockquote><blockquote><p>示例查阅：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">http://mockjs.com/examples.html</a></p></blockquote><h2 id="Random-单词记录"><a href="#Random-单词记录" class="headerlink" title="Random 单词记录"></a>Random 单词记录</h2><blockquote><p>记录着常用的单词<br>注：字符串类型通常分为英文和中文，中文是在英文的单词基础上前面加 ‘c’<br>ex: title, ctitle</p></blockquote><h3 id="标题（title，ctitle）"><a href="#标题（title，ctitle）" class="headerlink" title="标题（title，ctitle）"></a>标题（title，ctitle）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.title( min?, max? )</span></span><br><span class="line">Random.title()</span><br><span class="line"><span class="comment">// =&gt; "Ploinc Trus Ukvfcqv"</span></span><br><span class="line">Random.title(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// =&gt; "Fllryhnhn Uouqco Adhmx Jnux"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.ctitle( min?, max? )</span></span><br><span class="line">Random.ctitle()</span><br><span class="line"><span class="comment">// =&gt; "期和效除亲专"</span></span><br><span class="line">Random.ctitle(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// =&gt; "北二亲"</span></span><br></pre></td></tr></table></figure><h3 id="段落描述（paragraph，cparagraph，sentence-csentence）"><a href="#段落描述（paragraph，cparagraph，sentence-csentence）" class="headerlink" title="段落描述（paragraph，cparagraph，sentence, csentence）"></a>段落描述（paragraph，cparagraph，sentence, csentence）</h3><blockquote><p>min 和 max 代表的是几句话，而为字符串个数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.paragraph( min?, max? )</span></span><br><span class="line"><span class="comment">// Random.sentence( min?, max? )</span></span><br><span class="line">Random.paragraph()</span><br><span class="line">Random.sentence()</span><br><span class="line"><span class="comment">// =&gt; "Uspwcg symp bbn dydjdkgmh odhxg ppfmw sxcqcc ixacnm ouubxyh ohdq hdnytokmq jpekjv sgfodecmp."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.cparagraph( min?, max? )</span></span><br><span class="line"><span class="comment">// Random.csentence( min?, max? )</span></span><br><span class="line">Random.cparagraph()</span><br><span class="line">Random.csentence()</span><br><span class="line"><span class="comment">// =&gt; "算对但放经被将始参文工价适。等开飞之提正与九入养出交装达指。者住小机价更系头日体活七你马王报设。保车技置思走少必问样总主米时四选群土。"</span></span><br></pre></td></tr></table></figure><h3 id="图片（image、dataImage）"><a href="#图片（image、dataImage）" class="headerlink" title="图片（image、dataImage）"></a>图片（image、dataImage）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.image( size, background, foreground, format, text )</span></span><br><span class="line">Random.image(<span class="string">'200x100'</span>, <span class="string">'#894FC4'</span>, <span class="string">'#FFF'</span>, <span class="string">'png'</span>, <span class="string">'!'</span>)</span><br><span class="line"><span class="comment">// =&gt; 返回一张真实的网络图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.dataImage( size, text )</span></span><br><span class="line">Random.dataImage(<span class="string">'200x100'</span>, <span class="string">'Hello Mock.js!'</span>)</span><br><span class="line"><span class="comment">// =&gt; base64 格式的图片</span></span><br></pre></td></tr></table></figure><h3 id="时间（date，time，datatime，now）"><a href="#时间（date，time，datatime，now）" class="headerlink" title="时间（date，time，datatime，now）"></a>时间（date，time，datatime，now）</h3><blockquote><p>format 传 T 则会转为毫秒值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.date( format? )</span></span><br><span class="line">Random.date()</span><br><span class="line"><span class="comment">// =&gt; "2008-09-07"</span></span><br><span class="line">Random.date(<span class="string">'yy-MM-dd'</span>)</span><br><span class="line"><span class="comment">// =&gt; "91-05-09"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.time( format? )</span></span><br><span class="line">Random.time()</span><br><span class="line"><span class="comment">// =&gt; "09:38:34"</span></span><br><span class="line">Random.time(<span class="string">'HH:mm:ss'</span>)</span><br><span class="line"><span class="comment">// =&gt; "01:45:11"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.datetime( format? )</span></span><br><span class="line">Random.datetime()</span><br><span class="line"><span class="comment">// =&gt; "1977-11-12 07:01:43"</span></span><br><span class="line">Random.datetime(<span class="string">'yyyy-MM-dd A HH:mm:ss'</span>)</span><br><span class="line"><span class="comment">// =&gt; "1999-08-30 PM 15:20:22"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.now( unit?, format? )</span></span><br><span class="line">Random.now()</span><br><span class="line"><span class="comment">// =&gt; "2020-03-12 09:58:09"</span></span><br><span class="line">Random.now(<span class="string">'hour'</span>)</span><br><span class="line"><span class="comment">// =&gt; "2020-03-12 90:00:00"</span></span><br><span class="line">Random.now(<span class="string">'yyyy-MM-dd HH:mm:ss SS'</span>)</span><br><span class="line"><span class="comment">// =&gt; "2020-03-12 09:58:09 206"</span></span><br></pre></td></tr></table></figure><h3 id="id标识（id）"><a href="#id标识（id）" class="headerlink" title="id标识（id）"></a>id标识（id）</h3><blockquote><p>不光有数字，可能会有 X 字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.id()</span><br><span class="line"><span class="comment">// =&gt; "51000019730908273X"</span></span><br></pre></td></tr></table></figure><h3 id="数字（integer，float）"><a href="#数字（integer，float）" class="headerlink" title="数字（integer，float）"></a>数字（integer，float）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.integer( min?, max? )</span></span><br><span class="line">Random.integer()</span><br><span class="line"><span class="comment">// =&gt; -7897216954377768</span></span><br><span class="line">Random.integer(<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// =&gt; 92</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.float( min?, max?, dmin?, dmax? )</span></span><br><span class="line">Random.float()</span><br><span class="line"><span class="comment">// =&gt; -996747130985524.9</span></span><br><span class="line">Random.float(<span class="number">60</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// =&gt; 87.3435</span></span><br></pre></td></tr></table></figure><h3 id="布尔（boolean）"><a href="#布尔（boolean）" class="headerlink" title="布尔（boolean）"></a>布尔（boolean）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.boolean( min?, max?, current? )</span></span><br><span class="line">Random.boolean()</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line">Random.boolean(<span class="number">1</span>, <span class="number">9</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="人名（name，cname）"><a href="#人名（name，cname）" class="headerlink" title="人名（name，cname）"></a>人名（name，cname）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.name( middle? )</span></span><br><span class="line">Random.name()</span><br><span class="line"><span class="comment">// =&gt; "Matthew Jones"</span></span><br><span class="line">Random.name(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; "Ronald Sharon Martinez"</span></span><br><span class="line"></span><br><span class="line">Random.cname()</span><br><span class="line"><span class="comment">// =&gt; "武超"</span></span><br></pre></td></tr></table></figure><h3 id="地区（region，province，city，county）"><a href="#地区（region，province，city，county）" class="headerlink" title="地区（region，province，city，county）"></a>地区（region，province，city，county）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Random.region()</span><br><span class="line"><span class="comment">// =&gt; "华中"</span></span><br><span class="line"></span><br><span class="line">Random.province()</span><br><span class="line"><span class="comment">// =&gt; "吉林省"</span></span><br><span class="line"></span><br><span class="line">Random.city()</span><br><span class="line"><span class="comment">// =&gt; "石家庄市"</span></span><br><span class="line">Random.city(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; "海南省 三亚市"</span></span><br><span class="line"></span><br><span class="line">Random.county()</span><br><span class="line"><span class="comment">// =&gt; "西贡区"</span></span><br><span class="line">Random.county(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; "广东省 中山市 -"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;模拟数据应该是开发中必有的情况= =&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;mockjs&quot;&gt;&lt;a href=&quot;#mockjs&quot; class=&quot;headerlink&quot; title=&quot;mockjs&quot;&gt;&lt;/a&gt;mockjs&lt;/h2&gt;&lt;blo
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="mock 数据" scheme="https://q-jason.github.io/blog/tags/mock-%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>酷库-涂鸦签名</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5f6002d28uxghxn86o3/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5f6002d28uxghxn86o3/</id>
    <published>2020-03-12T01:20:05.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="drawingboard-js"><a href="#drawingboard-js" class="headerlink" title="drawingboard.js"></a>drawingboard.js</h2><blockquote><p>github 好几年没更新了，但是差不多能满足需要<br><a href="https://github.com/Leimi/drawingboard.js" target="_blank" rel="noopener">https://github.com/Leimi/drawingboard.js</a><br><a href="https://www.npmjs.com/package/drawingboard.js" target="_blank" rel="noopener">https://www.npmjs.com/package/drawingboard.js</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;drawingboard-js&quot;&gt;&lt;a href=&quot;#drawingboard-js&quot; class=&quot;headerlink&quot; title=&quot;drawingboard.js&quot;&gt;&lt;/a&gt;drawingboard.js&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;githu
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="涂鸦签名" scheme="https://q-jason.github.io/blog/tags/%E6%B6%82%E9%B8%A6%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>心得-react</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5dk000728ux7z3agdlu/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5dk000728ux7z3agdlu/</id>
    <published>2020-03-08T06:37:31.000Z</published>
    <updated>2020-04-02T04:00:56.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue 和 react 是目前前端主要使用的框架<br>在国内还是 vue 用的较多，api 记得也比较熟练<br>vue 和 react 的作用和 api 基本差不多…<br>经常容易记混<br>这里记录一下，方便日后提醒</p></blockquote><h2 id="优雅的-css-module"><a href="#优雅的-css-module" class="headerlink" title="优雅的 css module"></a>优雅的 css module</h2><blockquote><p>react 不像 vue 有 scoped<br>create-react-app 默认集成了 css-module<br>个人感觉也是比较好使的一种方式</p></blockquote><ol><li>命名需要已 .module 的方式结尾并在组件中引入 styles 对象</li></ol><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/css-module-1.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="2"><li>在 jsx 中定义 className</li></ol><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/css-module-2.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="3"><li>在 css 文件中定义样式，要覆盖其他组件的样式则用 :global</li></ol><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/css-module-3.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="4"><li>覆盖其他组件的样式生成后</li></ol><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/css-module-4.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="5"><li>后代选择器类名生成后</li></ol><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/css-module-5.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="6"><li>传入组件的 props 中涉及类名的，也需要使用 styles 对象的方式</li></ol><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/css-module-6.jpg" class=""><p>———————– 手动间隙 ———————–</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>建议采用后代选择器的方式定义类名，而非短横线<br>jsx 中会方便很多（对象写法以及 ide 代码提示）</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123; styles.banner &#125;&gt;</span><br><span class="line">  &#123;<span class="comment">/** 不方便 **/</span>&#125;</span><br><span class="line">  &lt;div className=&#123; styles[<span class="string">'banner-pic'</span>] &#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &#123;<span class="comment">/** 方便 **/</span>&#125;</span><br><span class="line">  &lt;div className=&#123; styles.pic &#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>———————– END ———————–</p><h2 id="事件传参以及-this-指向"><a href="#事件传参以及-this-指向" class="headerlink" title="事件传参以及 this 指向"></a>事件传参以及 this 指向</h2><ul><li>render 中写成函数封函数的方式，传递 event 对象和其他参数<img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/react%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82-1.jpg" class=""></li></ul><ul><li>如果事件处理函数中需要 this，需要写成下面这种形式，否则 this 指向错误（public class fields 语法）<img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/react%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82-2.jpg" class=""></li></ul><p>———————– END ———————–</p><h2 id="react-router-到底引入哪一个"><a href="#react-router-到底引入哪一个" class="headerlink" title="react-router 到底引入哪一个"></a>react-router 到底引入哪一个</h2><blockquote><p>只引入 react-router-dom 即可</p></blockquote><ul><li>react-router（实现路由的核心）</li><li>react-router-dom（在 react-router 的基础上多了一些组件）</li></ul><p>———————– END ———————–</p><h2 id="react-router-传参"><a href="#react-router-传参" class="headerlink" title="react-router 传参"></a>react-router 传参</h2><ul><li>显式 - path 传参<blockquote><p>用处：参数数量少的情况下<br>优点：刷新页面参数仍然存在，可清楚表达语义<br>缺点：path 参数位置固定，参数过多可能导致灵活问题</p></blockquote><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-1.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-2.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-3.jpg" class=""></li></ul><hr><ul><li>显式 - 查询字符串传参<blockquote><p>用处：参数数量多的情况下<br>优点：刷新页面参数仍然存在<br>缺点：不如 path 传参语义性强</p></blockquote><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-4.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-5.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-6.jpg" class=""></li></ul><hr><ul><li>隐式 - state 传参<blockquote><p>用处：参数保密 / 参数数量多的情况<br>优点：对象传参，写起来简单，保证参数安全性<br>缺点：页面刷新后参数失效</p></blockquote><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-7.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-8.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-9.jpg" class=""></li></ul><p>———————– END ———————–</p><h2 id="react-router-js-跳转"><a href="#react-router-js-跳转" class="headerlink" title="react-router js 跳转"></a>react-router js 跳转</h2><h3 id="组件中"><a href="#组件中" class="headerlink" title="组件中"></a>组件中</h3><blockquote><p>在页面级组件上，默认已有 props.history<br>在非页面级组件中，使用 withRouter 封装后会给 props 设置 history 属性</p></blockquote><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/js%E8%B7%B3%E8%BD%AC-1.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/js%E8%B7%B3%E8%BD%AC-2.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/js%E8%B7%B3%E8%BD%AC-3.jpg" class=""><p>———————– 手动间隔 ———————–</p><h3 id="非组件中"><a href="#非组件中" class="headerlink" title="非组件中"></a>非组件中</h3><blockquote><p>在其他 js 中，可以使用 history 库来实现<br>react-router 有依赖不用自己安装，直接引入即可</p></blockquote><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/js%E8%B7%B3%E8%BD%AC-4.jpg" class=""><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/js%E8%B7%B3%E8%BD%AC-5.jpg" class=""><p>———————– END ———————–</p><h2 id="react-router-路由嵌套"><a href="#react-router-路由嵌套" class="headerlink" title="react-router 路由嵌套"></a>react-router 路由嵌套</h2><ul><li>主路由<img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-1.jpg" class=""></li></ul><hr><ul><li>子路由<img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-2.jpg" class=""></li></ul><h2 id="react-redux-使用步骤"><a href="#react-redux-使用步骤" class="headerlink" title="react-redux 使用步骤"></a>react-redux 使用步骤</h2><blockquote><p>我个人不太喜欢在用常量表示 type<br>需要多一层定义引用…着实麻烦<br>个人喜欢通过 mapStateToProps 和 mapDispatchToProps 引入全部的 state 和 actions<br>这样的缺点是会混淆组件内部的状态和方法来源，但是可以通过加前缀的形式区分<br>比如: state: { storeValue }, actions: { setStoreValue }</p></blockquote><ol><li>引入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save redux</span><br><span class="line">npm i --save react-redux</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="2"><li>创建 /store/reducer.js 文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  storeValue: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'storeValue'</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">value</span>: action.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="3"><li>创建 /store/actions.js 文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setStoreValue = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">'storeValue'</span>,</span><br><span class="line">    value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="4"><li>创建 /store/index.js 文件<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 默认引用全部的 state 和 actions **/</span></span><br><span class="line"><span class="keyword">let</span> mapStateToProps = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mapDispatchToProps = <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  store,</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="5"><li>将 Provider 包裹在 App 组件的外侧，同时传入 /store/index.js 暴露的 store 作为 prop<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="6"><li>在组件中使用 connect 方法连接 redux（通过 props 的方式传入组件）<blockquote><p>this.props.storeValue<br>this.props.setStoreValue</p></blockquote><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapStateToProps, mapDispatchToProps &#125; <span class="keyword">from</span> <span class="string">'../../store'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Page</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** .. **/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Page)</span><br></pre></td></tr></table></figure></li></ol><p>———————– END ———————–</p><h2 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h2><ul><li>创建环境变量文件</li></ul><img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-1.jpg" class=""><hr><ul><li>自定义的环境变量要以 “REACT_APP_” 作为开头<img src="/blog/article/ck8i8f5dk000728ux7z3agdlu/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-2.jpg" class=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;vue 和 react 是目前前端主要使用的框架&lt;br&gt;在国内还是 vue 用的较多，api 记得也比较熟练&lt;br&gt;vue 和 react 的作用和 api 基本差不多…&lt;br&gt;经常容易记混&lt;br&gt;这里记录一下，方便日后提醒&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="react" scheme="https://q-jason.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>酷库-倒计时</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5et002428uxgnf4abyu/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5et002428uxgnf4abyu/</id>
    <published>2020-02-27T04:40:19.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>倒计时是项目中较为常见的需求<br>要是手动计算，麻烦的要死…<br>这里记录几个解决方案</p></blockquote><h2 id="countdown（原生）"><a href="#countdown（原生）" class="headerlink" title="countdown（原生）"></a>countdown（原生）</h2><blockquote><p>github: <a href="https://github.com/mckamey/countdownjs" target="_blank" rel="noopener">https://github.com/mckamey/countdownjs</a><br>npm: <a href="https://www.npmjs.com/package/countdown" target="_blank" rel="noopener">https://www.npmjs.com/package/countdown</a></p></blockquote><blockquote><p>万能解决方案，用就对了<br>下面记录用法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> countdown <span class="keyword">from</span> <span class="string">'countdown'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 可已通过 clearInterval(timer) 取消倒计时 **/</span></span><br><span class="line"><span class="keyword">let</span> timer = countdown(</span><br><span class="line">  <span class="comment">// 结束时间</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">10000</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 每一秒会触发的函数</span></span><br><span class="line">  <span class="comment">// result 为倒计时数据</span></span><br><span class="line">  <span class="comment">// 自定义显示逻辑</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最大单位</span></span><br><span class="line">  <span class="comment">// 比如说最大单位只想到 "日"</span></span><br><span class="line">  <span class="comment">// 就删除 YEARS 和 MONTHS</span></span><br><span class="line">  <span class="comment">// 下面的 "|" 是位运算符（作者底蕴好强大...）</span></span><br><span class="line">  countdown.YEARS | countdown.MONTHS | countdown.DAYS |</span><br><span class="line">  countdown.HOURS | countdown.MINUTES | countdown.SECONDS</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="chenfengyuan-vue-countdown（vue）"><a href="#chenfengyuan-vue-countdown（vue）" class="headerlink" title="@chenfengyuan/vue-countdown（vue）"></a>@chenfengyuan/vue-countdown（vue）</h2><blockquote><p>github: <a href="https://fengyuanchen.github.io/vue-countdown" target="_blank" rel="noopener">https://fengyuanchen.github.io/vue-countdown</a><br>npm: <a href="https://www.npmjs.com/package/@chenfengyuan/vue-countdown" target="_blank" rel="noopener">https://www.npmjs.com/package/@chenfengyuan/vue-countdown</a></p></blockquote><blockquote><p>vue 倒计时组件<br>也非常的强大，通过 slot 可自定义样式</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;倒计时是项目中较为常见的需求&lt;br&gt;要是手动计算，麻烦的要死…&lt;br&gt;这里记录几个解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;countdown（原生）&quot;&gt;&lt;a href=&quot;#countdown（原生）&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="倒计时" scheme="https://q-jason.github.io/blog/tags/%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>电影-我想让大家都开心</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5eb001a28uxa2lkd1wv/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5eb001a28uxa2lkd1wv/</id>
    <published>2020-02-11T14:42:17.000Z</published>
    <updated>2020-04-02T04:00:56.097Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/1.jpg" class=""><img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/2.jpg" class=""><img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/3.jpg" class=""><img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/4.jpg" class=""><img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/5.jpg" class=""><img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/6.jpg" class=""><img src="/blog/article/ck8i8f5eb001a28uxa2lkd1wv/7.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/article/ck8i8f5eb001a28uxa2lkd1wv/1.jpg&quot; class=&quot;&quot;&gt;

&lt;img src=&quot;/blog/article/ck8i8f5eb001a28uxa2lkd1wv/2.jpg&quot; class=&quot;&quot;&gt;

&lt;img
      
    
    </summary>
    
    
      <category term="电影片段" scheme="https://q-jason.github.io/blog/categories/%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="电影片段" scheme="https://q-jason.github.io/blog/tags/%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>心得-node-sass安装不上</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5di000628uxfa6kgu0o/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5di000628uxfa6kgu0o/</id>
    <published>2020-01-30T05:17:52.000Z</published>
    <updated>2020-04-02T04:00:56.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我习惯在项目中使用 sass 作为 css 高级语言<br>通常 sass 基于 node-sass 这个库<br>但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上<br>原因有缺少啥 gyp 环境，node-sass 下载超时等<br>这里记录一下，以后出现后，跟着跑即可</p></blockquote><blockquote><p>参考网址<br><a href="https://www.jianshu.com/p/92afe92db99f" target="_blank" rel="noopener">https://www.jianshu.com/p/92afe92db99f</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若 npm 速度慢建议换源</span></span><br><span class="line">npm i -g nrm</span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line">npm install -g node-gyp</span><br><span class="line">npm install --global --production windows-build-tools</span><br><span class="line">npm uninstall node-sass</span><br><span class="line">npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我习惯在项目中使用 sass 作为 css 高级语言&lt;br&gt;通常 sass 基于 node-sass 这个库&lt;br&gt;但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上&lt;br&gt;原因有缺少啥 gyp 环境，node-sass 下载超
      
    
    </summary>
    
    
    
      <category term="npm" scheme="https://q-jason.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>酷库-移动端调试</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5fa002j28ux7wsigrb0/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5fa002j28ux7wsigrb0/</id>
    <published>2020-01-30T05:14:20.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发中调试是必不可免的<br>pc端可以直接通过游览器 F12 控制台调试<br>移动端通常没有方便的调试手段<br>这里记录一个非常好用的调试库</p></blockquote><h2 id="eruda"><a href="#eruda" class="headerlink" title="eruda"></a>eruda</h2><blockquote><p>移动端调试工具（js库），比 vconsole 更好用<br><a href="https://eruda.liriliri.io/" target="_blank" rel="noopener">https://eruda.liriliri.io/</a><br><a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a><br><a href="https://www.npmjs.com/package/eruda" target="_blank" rel="noopener">https://www.npmjs.com/package/eruda</a></p></blockquote><h2 id="eruda-webpack-plugin"><a href="#eruda-webpack-plugin" class="headerlink" title="eruda-webpack-plugin"></a>eruda-webpack-plugin</h2><blockquote><p>eruda webpack 插件（更建议使用这个方式，不影响业务代码）<br><a href="https://github.com/huruji/eruda-webpack-plugin" target="_blank" rel="noopener">https://github.com/huruji/eruda-webpack-plugin</a><br><a href="https://www.npmjs.com/package/eruda-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/eruda-webpack-plugin</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发中调试是必不可免的&lt;br&gt;pc端可以直接通过游览器 F12 控制台调试&lt;br&gt;移动端通常没有方便的调试手段&lt;br&gt;这里记录一个非常好用的调试库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;eruda&quot;&gt;&lt;a href=&quot;#eruda&quot; 
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="调试技巧" scheme="https://q-jason.github.io/blog/tags/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>心得-奇怪的 input[type=&quot;number&quot;] 元素 min 和 max 属性</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5e0000o28uxcffr981w/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5e0000o28uxcffr981w/</id>
    <published>2020-01-19T08:30:32.000Z</published>
    <updated>2020-04-02T04:00:56.093Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讨论 input[type=”number”] 元素的 min 和 max 属性<br>2020.01.19 这天引起了我严重的不适…..</p></blockquote><h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>input 的属性 min 和 max 不能限制用户输入，只能按上下键时限制范围<br>这在平常项目中是无法忍受的<br>更多的时候是希望用户输入 &lt; min || &gt; max 时 input 的值自动修正<br>让值限制在 min 和 max 中<br>使用原生的 min 和 max 是无法满足需求了<br>只能自己写，然后就会发现坑就来了<br>html input 标签设计时应该就发现了这个问题…<br>所以原生 min 和 max 表现这么奇葩</p><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><blockquote><p>当你使用 js 自动根据 min 和 max 修正了值后…</p></blockquote><p>一个 input 元素<br>你想让他 min = 20、max = 100<br>当前 value 为空<br>你想输入 83 这个数字<br>首先输入 8<br>触发 min 逻辑，值会自动重置为 20<br>然后就怎么也输入不对了…</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>放弃由 js 修正值的想法….<br>在输入、提交时<br>使用错误提示，引导用户修改….</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要讨论 input[type=”number”] 元素的 min 和 max 属性&lt;br&gt;2020.01.19 这天引起了我严重的不适…..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题由来&quot;&gt;&lt;a href=&quot;#问题由来&quot; cl
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="用户体验" scheme="https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="逻辑优化" scheme="https://q-jason.github.io/blog/tags/%E9%80%BB%E8%BE%91%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>心得-赋值inputEl.value</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5ea001828ux0tafdlio/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5ea001828ux0tafdlio/</id>
    <published>2020-01-17T02:56:08.000Z</published>
    <updated>2020-04-02T04:00:56.097Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>手动赋值 input.value 是项目中常见的场景<br>但是直接赋值的话不会触发 input 事件，导致现实场景中逻辑异常<br>需要手动触发事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customEvent = <span class="built_in">document</span>.createEvent(<span class="string">'UIEvents'</span>)</span><br><span class="line">customEvent.initUIEvent(<span class="string">'input'</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">window</span>, <span class="number">1</span>)</span><br><span class="line">inputEl.dispatchEvent(customEvent)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;手动赋值 input.value 是项目中常见的场景&lt;br&gt;但是直接赋值的话不会触发 input 事件，导致现实场景中逻辑异常&lt;br&gt;需要手动触发事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javas
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>酷库-坐标格式转换</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5ex002b28ux1ebl9bxe/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5ex002b28ux1ebl9bxe/</id>
    <published>2020-01-03T13:27:47.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="coordtransform"><a href="#coordtransform" class="headerlink" title="coordtransform"></a>coordtransform</h2><blockquote><p><a href="https://github.com/wandergis/coordtransform" target="_blank" rel="noopener">https://github.com/wandergis/coordtransform</a><br>一个提供了百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具模块。<br>用就完事了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;coordtransform&quot;&gt;&lt;a href=&quot;#coordtransform&quot; class=&quot;headerlink&quot; title=&quot;coordtransform&quot;&gt;&lt;/a&gt;coordtransform&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="坐标转换" scheme="https://q-jason.github.io/blog/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>酷库-ajax</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5ef001l28ux6rz5ggb5/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5ef001l28ux6rz5ggb5/</id>
    <published>2019-12-20T05:15:50.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><blockquote><p>github: <a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a><br>中文文档: <a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a><br>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br>用它就对了</p></blockquote><h2 id="axios-retry（axios-重试方案）"><a href="#axios-retry（axios-重试方案）" class="headerlink" title="axios-retry（axios 重试方案）"></a>axios-retry（axios 重试方案）</h2><blockquote><p>github: <a href="https://github.com/softonic/axios-retry" target="_blank" rel="noopener">https://github.com/softonic/axios-retry</a><br>基于 axios，若 axios 发送的请求失败，可根据配置自动重试</p></blockquote><ul><li>可以全局设置，也可以在请求时单独设置</li><li>shouldResetTimeout 的作用为每次重试重置超时，建议开启，否则控制台会变成 “机关枪”</li><li>默认只有 “5xx错误” 和 “网络错误” 才会重发，可设置 retryCondition 自定义重发逻辑</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> axiosRetry <span class="keyword">from</span> <span class="string">'axios-retry'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 全局设置 **/</span></span><br><span class="line">axiosRetry(axios, &#123;</span><br><span class="line">  <span class="comment">/** options **/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/abc'</span>, &#123;</span><br><span class="line">  <span class="comment">/** 单独设置 **/</span></span><br><span class="line">  <span class="string">'axios-retry'</span>: &#123;</span><br><span class="line">    retries: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-poller（重试、轮询）"><a href="#promise-poller（重试、轮询）" class="headerlink" title="promise-poller（重试、轮询）"></a>promise-poller（重试、轮询）</h2><blockquote><p><a href="https://github.com/joeattardi/promise-poller" target="_blank" rel="noopener">https://github.com/joeattardi/promise-poller</a><br>此库主要作用为基于 Promise 的重试解决方案<br>可用于任何 http 库<br>十分优雅的即可实现<br>也可以 “取巧” 用来当做轮询库使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return Promise</span></span><br><span class="line">promisePoller(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  返回 Promise 的任务函数</span></span><br><span class="line"><span class="comment">   *  若 reject 则会重试（可以一直 reject 实现无限轮询）</span></span><br><span class="line"><span class="comment">   *  直到 resolve</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  taskFn,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 重试请求间隔 **/</span></span><br><span class="line">  interval: <span class="number">500</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  失败重试次数</span></span><br><span class="line"><span class="comment">   *  这里设置为 Infinity 则可以实现无限重发（实现无限轮询）</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  retries: <span class="number">10</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 每次请求的超时 **/</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 整个任务的超时 **/</span></span><br><span class="line">  masterTimeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/axios/axi
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="ajax" scheme="https://q-jason.github.io/blog/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>心得-strapi</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5dm000828ux9sm7c6e0/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5dm000828ux9sm7c6e0/</id>
    <published>2019-12-19T06:51:16.000Z</published>
    <updated>2020-04-02T04:00:56.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>strapi 是我一直关注的 node “无头” cms 框架<br>我认为他将是未来迈向全栈之路的一个非常重要的 node 框架<br>从 alpha 版本开始一直关注更新<br>逐渐的推出了很多实用性很高，眼前一亮的特性、功能、插件<br>下面是学习笔记：</p></blockquote><h2 id="资料-相关链接整理"><a href="#资料-相关链接整理" class="headerlink" title="资料 - 相关链接整理"></a>资料 - 相关链接整理</h2><blockquote><p>官网：<a href="https://strapi.io/" target="_blank" rel="noopener">https://strapi.io/</a><br>github: <a href="https://github.com/strapi/strapi" target="_blank" rel="noopener">https://github.com/strapi/strapi</a><br>功能路线图：<a href="https://portal.productboard.com/strapi" target="_blank" rel="noopener">https://portal.productboard.com/strapi</a><br>插件库：<a href="https://strapi.io/marketplace" target="_blank" rel="noopener">https://strapi.io/marketplace</a></p></blockquote><h2 id="心得-启用-–inspect-调试"><a href="#心得-启用-–inspect-调试" class="headerlink" title="心得 - 启用 –inspect 调试"></a>心得 - 启用 –inspect 调试</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>项目根目录新建 index.js（代码在下面直接复制即可）</li><li>安装 nodemon (npm i –save-dev nodemon)</li><li>在 package.json scripts 中创建 dev 命令 nodemon –inspect index</li><li>在 cmd 运行 npm run dev 即可</li><li>打开谷歌游览器 node devTools 查看</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>使用上述方法，无法在管理界面添加字段，正确姿势是在 develop 命令下创建好后，转到 dev 命令调试</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'strapi/lib/commands/start'</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  develop 模式启动文件 --inspect 不好使</span></span><br><span class="line"><span class="comment"> *  build 经过测试应该传入 true</span></span><br><span class="line"><span class="comment"> *  watchAdmin 经过测试应该传入 undefined</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">// require('strapi/lib/commands/develop')(&#123;</span></span><br><span class="line"><span class="comment">//   build: true,</span></span><br><span class="line"><span class="comment">//   watchAdmin: undefined</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="心得-后台左边侧边栏模型名称翻译"><a href="#心得-后台左边侧边栏模型名称翻译" class="headerlink" title="心得 - 后台左边侧边栏模型名称翻译"></a>心得 - 后台左边侧边栏模型名称翻译</h2><blockquote><p>version: <a href="mailto:strapi@3.0.0-beta.18" target="_blank" rel="noopener">strapi@3.0.0-beta.18</a></p></blockquote><blockquote><p>默认创建好模型后，名字是英文的，只有 Users(用户) 字段是中文<br>改变语言后，字段也不会发生变化，一直是英文<br>当前版本已经可以很方便的自定义 admin 管理界面了<br>只需要在项目目录下，新建 admin 目录，里面放入需要替换的文件<br>strapi 就会用你自定义的文件替换原有的文件进行打包管理界面</p></blockquote><img src="/blog/article/ck8i8f5dm000828ux9sm7c6e0/field-i18n-before.jpg" class=""><p>—– 手动间隙 —–</p><h3 id="翻译过程"><a href="#翻译过程" class="headerlink" title="翻译过程"></a>翻译过程</h3><ol><li>在项目根目录创建目录 admin/src/translations</li><li>将 strapi-admin/admin/src/translations 中的 en.json(必须有), zh-Hans.json(或其他语言) 复制过来</li><li>将字段显示的!!复数!!名字复制到 en.json 和 zh-Hans.json 中的 key，value 写需要翻译显示的名字</li><li>strapi develop –watch-admin(开发管理界面模式看下结果)</li><li>npm run build(翻译成功后，打包管理员界面)</li></ol><p>en.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Categories"</span>: <span class="string">"Categories"</span>,</span><br><span class="line">  <span class="attr">"Restaurants"</span>: <span class="string">"Restaurants"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zh-Hans.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Categories"</span>: <span class="string">"餐厅分类"</span>,</span><br><span class="line">  <span class="attr">"Restaurants"</span>: <span class="string">"餐厅"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/article/ck8i8f5dm000828ux9sm7c6e0/field-i18n-after.jpg" class=""><p>—– 手动间隙 —–</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><blockquote><p>en.json 一定要复制并填值，因为 admin/components/LeftMenuLink/index.js 中<br>是根据 en.json 进行判断是否有无 key 值，若没有就不走国际化流程了</p></blockquote><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in node_modules/strapi-admin/admin/components/LeftMenuLink/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if messageId exists in en locale to prevent warning messages</span></span><br><span class="line"><span class="keyword">const</span> content = en[props.label] ? (</span><br><span class="line">  &lt;FormattedMessage</span><br><span class="line">    id=&#123;props.label&#125;</span><br><span class="line">    defaultMessage=<span class="string">"&#123;label&#125;"</span></span><br><span class="line">    values=&#123;&#123;</span><br><span class="line">      label: <span class="string">`<span class="subst">$&#123;props.label&#125;</span>`</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    className=<span class="string">"linkLabel"</span></span><br><span class="line">  /&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;span className=<span class="string">"linkLabel"</span>&gt;&#123;props.label&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h2 id="心得-后台左侧侧边栏中隐藏指定模型管理"><a href="#心得-后台左侧侧边栏中隐藏指定模型管理" class="headerlink" title="心得 - 后台左侧侧边栏中隐藏指定模型管理"></a>心得 - 后台左侧侧边栏中隐藏指定模型管理</h2><blockquote><p>version: 3.0.0-beta.18.7</p></blockquote><blockquote><p>！！！ 目前没有发现从模型配置中隐藏的方法 ！！！<br>负责可视化管理数据的插件是 strapi-plugin-content-manager 这个包<br>在其 services/ContentTypes.js 中重写 HIDDEN_CONTENT_TYPES 常量即可实现<br>步骤如下</p></blockquote><ul><li>首先你要有一个项目，并且有自定义的模型字段</li><li>在项目根目录 extensions 文件夹中创建 content-manager/services/ContentTypes.js 文件</li><li>复制 node_modules/strapi-plugin-content-manager/services/ContentTypes.js 中的代码</li><li>黏贴到 extensions/content-manager/services/ContentTypes.js 中</li><li>修改 ContentTypes.js 中的依赖包的路径，使其路径正确，下面有例子</li><li>找到 HIDDEN_CONTENT_TYPES 常量，新增需要隐藏的模型，下面有例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 修改依赖路径 **/</span></span><br><span class="line"><span class="keyword">const</span> storeUtils = <span class="built_in">require</span>(<span class="string">'strapi-plugin-content-manager/services/utils/store'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; pickSchemaFields &#125; = <span class="built_in">require</span>(<span class="string">'strapi-plugin-content-manager/services/utils/schema'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 重写需要隐藏的模型 **/</span></span><br><span class="line"><span class="keyword">const</span> HIDDEN_CONTENT_TYPES = [</span><br><span class="line">  <span class="comment">/** 原有的 **/</span></span><br><span class="line">  <span class="string">'strapi::admin'</span>,</span><br><span class="line">  <span class="string">'plugins::upload.file'</span>,</span><br><span class="line">  <span class="string">'plugins::users-permissions.permission'</span>,</span><br><span class="line">  <span class="string">'plugins::users-permissions.role'</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 以下是新增的 **/</span></span><br><span class="line">  <span class="string">'plugins::config.config'</span>,</span><br><span class="line">  <span class="comment">/** application 代表项目中创建的模型 **/</span></span><br><span class="line">  <span class="string">'application::house.house'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="心得-禁止在后台中修改删除模型字段"><a href="#心得-禁止在后台中修改删除模型字段" class="headerlink" title="心得 - 禁止在后台中修改删除模型字段"></a>心得 - 禁止在后台中修改删除模型字段</h2><blockquote><p>在模型配置中(xxx.settings.json)<br>给字段 configurable 属性设置为 false</p></blockquote><h2 id="心得-strapi-store（配置存储库）"><a href="#心得-strapi-store（配置存储库）" class="headerlink" title="心得 - strapi.store（配置存储库）"></a>心得 - strapi.store（配置存储库）</h2><blockquote><p>strapi 提供了这么一个 api 来存储配置信息（存到数据库里的 core_store 表中）<br>但是官方文档中没有任何描述<br>我通过查看了官方插件，学习到了这个 api 的使用方法<br>如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  存数据库的命名规则为</span></span><br><span class="line"><span class="comment">   *  type_[name_]key</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  <span class="keyword">const</span> store = strapi.store(&#123;</span><br><span class="line">    <span class="comment">/** 开发环境和线上环境可以分开不同的配置 **/</span></span><br><span class="line">    environment: <span class="string">''</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  type 一定要填写</span></span><br><span class="line"><span class="comment">     *  存数据库时会已 type 作为前缀</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    type: <span class="string">'plugin'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  name 不需要一定填写</span></span><br><span class="line"><span class="comment">     *  存数据库时会把 name 作为第二前缀</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    name: <span class="string">'config'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置储存库中的字段</span></span><br><span class="line">  <span class="keyword">await</span> store.set(&#123;</span><br><span class="line">    key: <span class="string">'test'</span>,</span><br><span class="line">    value: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取储存库中的字段</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> store.get(&#123; <span class="attr">key</span>: <span class="string">'test'</span> &#125;))</span><br><span class="line">  <span class="comment">// =&gt; [ 1, 2, 3, 4 ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义插件-环境搭建"><a href="#自定义插件-环境搭建" class="headerlink" title="自定义插件 - 环境搭建"></a>自定义插件 - 环境搭建</h2><blockquote><p>version: 3.0.0-beta.18.7</p></blockquote><blockquote><p>这个功能是重头戏哈哈<br>日后封装常用功能，快速开发全指着自定义插件<br>研究了半天，有了以下总结<br>注意：strapi 的管理面板是基于 react 的…需要熟悉</p></blockquote><blockquote><p><a href="https://strapi.io/documentation/3.0.0-beta.x/plugin-development/quick-start.html#development-environment-setup" target="_blank" rel="noopener">官方文档</a><br>照着官方文档跑环境就能搭建起来，也比较简单，下面是步骤</p></blockquote><blockquote><p>下面均为在控制台输入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先你要有一个项目...</span></span><br><span class="line">npx create-strapi-app my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个本地插件</span></span><br><span class="line">strapi generate:plugin my-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开开发管理面板环境</span></span><br><span class="line">strapi develop --watch-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后访问 http://localhost:8000/admin 即可</span></span><br><span class="line"><span class="comment"># 此时已经搭建好了插件开发环境，接下来接插件逻辑即可</span></span><br></pre></td></tr></table></figure><h2 id="自定义插件-插件开发思路"><a href="#自定义插件-插件开发思路" class="headerlink" title="自定义插件 - 插件开发思路"></a>自定义插件 - 插件开发思路</h2><blockquote><p>后台管理面板的作用无非就两件事<br>一. 查看或统计数据（展示数据）<br>二. 修改数据（表单提交）</p></blockquote><ul><li>思考确定插件功能</li><li>根据插件功能定义插件数据模型（并非唯一，可多个，在 models 文件夹中）</li><li>根据插件功能设计接口并绑定控制器（/config/routes.json 和 controllers 目录）</li><li>思考设计并完成后台管理面板</li></ul><h2 id="自定义插件-后台管理面板如何发送请求"><a href="#自定义插件-后台管理面板如何发送请求" class="headerlink" title="自定义插件 - 后台管理面板如何发送请求"></a>自定义插件 - 后台管理面板如何发送请求</h2><blockquote><p>strapi 默认有一套权限设置，发送请求会被拦截获取不到数据（jwt 验证）<br>strapi 提供了 helper（strapi-helper-plugin）<br>其中 request 模块是用来发请求的<br>开发者只需要引用，然后使用就可以了<br>不需要了解权限逻辑，对开发透明<br>如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">'strapi-helper-plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 Promise</span></span><br><span class="line">request(<span class="string">'/users-permissions/advanced'</span>, &#123;</span><br><span class="line">  method: <span class="string">'get'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义插件-内部配置（储存库）"><a href="#自定义插件-内部配置（储存库）" class="headerlink" title="自定义插件 - 内部配置（储存库）"></a>自定义插件 - 内部配置（储存库）</h2><blockquote><p>可以用 strapi.store 来存储内部配置<br>strapi.store 上面介绍过了<br>参考了官方插件代码中的使用<br>需要注意的是：<br>type 都是 plugin<br>name 都是 插件名称</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginStore = strapi.store(&#123;</span><br><span class="line">  environment: <span class="string">''</span>,</span><br><span class="line">  type: <span class="string">'plugin'</span>,</span><br><span class="line">  name: <span class="string">'users-permissions'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;strapi 是我一直关注的 node “无头” cms 框架&lt;br&gt;我认为他将是未来迈向全栈之路的一个非常重要的 node 框架&lt;br&gt;从 alpha 版本开始一直关注更新&lt;br&gt;逐渐的推出了很多实用性很高，眼前一亮的特性、功能、插件&lt;br&gt;下面
      
    
    </summary>
    
    
      <category term="后端心得" scheme="https://q-jason.github.io/blog/categories/%E5%90%8E%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="react" scheme="https://q-jason.github.io/blog/tags/react/"/>
    
      <category term="node" scheme="https://q-jason.github.io/blog/tags/node/"/>
    
      <category term="cms" scheme="https://q-jason.github.io/blog/tags/cms/"/>
    
  </entry>
  
  <entry>
    <title>酷库-echarts</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5eg001o28ux4fa33hag/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5eg001o28ux4fa33hag/</id>
    <published>2019-12-17T01:12:50.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>echarts 是非常强大、知名的图表库<br><a href="https://www.echartsjs.com/zh/index.html" target="_blank" rel="noopener">https://www.echartsjs.com/zh/index.html</a></p></blockquote><h2 id="官方文档阅读心得"><a href="#官方文档阅读心得" class="headerlink" title="官方文档阅读心得"></a>官方文档阅读心得</h2><blockquote><p>此库文档非常大…<br>一开始阅读总不知道从哪里下手<br>个人总结以下步骤</p></blockquote><ol><li>确定需求，从 <a href="https://www.echartsjs.com/examples/zh/index.html" target="_blank" rel="noopener">官方例子</a> 中，找到类似的作为参考，或直接复制配置套用</li><li>首先确认 series 属性，确认图表类型</li><li>模拟数据，设置图表类型对应的 data 属性</li><li>增加辅助组件(toolbox、timeline、title 等)</li><li>设置细节样式</li><li>增加交互逻辑</li></ol><h2 id="map-系列"><a href="#map-系列" class="headerlink" title="map 系列"></a>map 系列</h2><h3 id="省份地图-label-自定义位置"><a href="#省份地图-label-自定义位置" class="headerlink" title="省份地图 label 自定义位置"></a>省份地图 label 自定义位置</h3><blockquote><p>问题描述：<br>经常有需求会要求在省份、城市中心显示 label<br>map 系列中 label 的属性 position 和 offset 经测试偏移无效<br>并且一个个 “看着大概偏移” 改麻烦的很..<br>开启 legend 组件，这俩属性才有效，暂不知道为啥<br>legend 组件会造成区域上有一个点，也不太好去除</p></blockquote><img src="/blog/article/ck8i8f5eg001o28ux4fa33hag/map-label-center-use-label.jpg" class=""><blockquote><p>解决办法：<br>放弃使用默认 label，使用 markPoint 模拟 label<br>markPoint data 中项的属性 coord 可以自定义 mark 位置(百度坐标拾取器提取经纬度)<br>然后将图标隐藏（sysbom 空图片 或 大小设置为 1都行）</p></blockquote><img src="/blog/article/ck8i8f5eg001o28ux4fa33hag/map-label-center-use-markPoint.jpg" class=""><h3 id="series-散点无效"><a href="#series-散点无效" class="headerlink" title="series 散点无效"></a>series 散点无效</h3><blockquote><p>必须指定 geo，否则无效<br>暂时不知道 geo 和 series 中 type = map 有什么区别…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;echarts 是非常强大、知名的图表库&lt;br&gt;&lt;a href=&quot;https://www.echartsjs.com/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.echarts
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="图表" scheme="https://q-jason.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>心得-移动端适配心得</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5e7001328uxbo699z57/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5e7001328uxbo699z57/</id>
    <published>2019-12-05T01:18:37.000Z</published>
    <updated>2020-04-02T04:00:56.097Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讨论移动端开发的页面适配技巧</p></blockquote><h2 id="为何要适配？"><a href="#为何要适配？" class="headerlink" title="为何要适配？"></a>为何要适配？</h2><blockquote><p>各个手机的屏幕大小不同，若用 px 单位，则会在各个屏幕下显示相同尺寸<br>往往会偏大或偏小，效果差劲，原因是因为没有等比例缩放(没有用相对单位)<br>相对单位有 vw，em，rem，% 等<br>保证其在不同屏幕尺寸下，按照一定的尺寸标准，等比例缩放，实现自动适配</p></blockquote><h2 id="适配方法"><a href="#适配方法" class="headerlink" title="适配方法"></a>适配方法</h2><blockquote><p>原理都是根据屏幕实际宽度来计算</p></blockquote><ol><li><p>vw 适配方案</p><blockquote><p>★★★★★<br>由于 1vw = 屏幕总宽的百分之一，是最适合用来适配的单位<br>兼容性不如 rem 单位</p></blockquote></li><li><p>rem 适配方案</p><blockquote><p>★★★★<br>通过改变在 html 标签改变 font-size 属性，实现等比例缩放<br>兼容性很好，是比较老的技术</p></blockquote></li></ol><h2 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h2><blockquote><p>不论是 vw 还是 rem 自己算是很麻烦的… 0.2497rem … 2.645514vw …<br>最好的开发体验是设计图多少就在项目中写多少<br>然后通过预处理语言自动转化为 vw 或 rem 单位</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote></blockquote><h3 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h3><blockquote><p>在项目中写设计图上的 px 单位<br>通过 postcss-px-to-viewport 预处理转为 vw单位<br>通过 viewport-units-buggyfill 在客户端照顾兼容性</p></blockquote><ul><li><p>预处理：postcss-px-to-viewport</p><blockquote><p><a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">https://github.com/evrone/postcss-px-to-viewport</a><br>postcss 的插件，只要写上参考设计图的宽度，自动将 px 单位转为 vw 单位</p></blockquote></li><li><p>客户端：viewport-units-buggyfill</p><blockquote><p><a href="https://github.com/rodneyrehm/viewport-units-buggyfill" target="_blank" rel="noopener">https://github.com/rodneyrehm/viewport-units-buggyfill</a><br>这是个 vw 单位的 polyfill，建议配合 postcss-px-to-viewport 使用<br>作用是分析加载的 css 文件，然后将 vw 单位在转为 px，放到 head 中<br>建议非必要不要使用，…有时会出现写莫名其妙的 bug</p></blockquote></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><blockquote><p>在项目中写设计图上的 px 单位<br>通过 postcss-px2rem，预处理转为 rem 单位<br>通过 hotcss，在客户端改变 html font-size</p></blockquote><ul><li><p>预处理：postcss-px2rem</p><blockquote><p><a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-px2rem</a><br>基于 postcss 的插件，设置好 1rem = ？px 后，自动转换 px 为 rem 单位</p></blockquote></li><li><p>客户端：hotcss</p><blockquote><p><a href="https://github.com/imochen/hotcss" target="_blank" rel="noopener">https://github.com/imochen/hotcss</a><br>rem 解决方案，按照 640 设计图动态设置 html 的 font-size 属性<br>并通过设置 viewport scale，解决移动端 1px 难题<br>可以设置屏幕最大尺寸，友好的适配桌面端<br>建议配合 postcss-px2rem 使用</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotcss 是已 640 设计图为标准的</span></span><br><span class="line"><span class="comment">// 1rem = 40px - 在屏幕为 640</span></span><br><span class="line"><span class="comment">// 1rem = 20px - 在屏幕为 320</span></span><br><span class="line"><span class="comment">// 1rem = 40px - 在屏幕为 320，但是 viewport scale = 0.5 的情况下，相当于 640</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若设计图尺寸不是 640</span></span><br><span class="line"><span class="comment">// 则需要自己换算</span></span><br><span class="line"><span class="comment">// 算法为： innerWidth * 20 / 320</span></span><br><span class="line"><span class="comment">// innerWidth 为屏幕实际尺寸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="comment">//   750 设计图</span></span><br><span class="line"><span class="comment">//   算法为：750 / 2 * 20 / 320</span></span><br><span class="line"><span class="comment">//   1rem = 46.875px  - 在屏幕为 750</span></span><br><span class="line"><span class="comment">//   1rem = 23.4375px - 在屏幕为 375</span></span><br><span class="line"><span class="comment">//   1rem = 46.875px  - 在屏幕为 375，但是 viewport scale = 0.5 的情况下，相当于 750</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要讨论移动端开发的页面适配技巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为何要适配？&quot;&gt;&lt;a href=&quot;#为何要适配？&quot; class=&quot;headerlink&quot; title=&quot;为何要适配？&quot;&gt;&lt;/a&gt;为何要适配？&lt;/h2&gt;&lt;blo
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="用户体验" scheme="https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>酷库-swiper</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5ej001u28ux4tno52nn/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5ej001u28ux4tno52nn/</id>
    <published>2019-11-28T08:11:03.000Z</published>
    <updated>2020-04-02T04:00:56.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><blockquote><p><a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">https://github.com/nolimits4web/swiper</a><br>非常知名的触摸滑动解决方案</p></blockquote><h2 id="this-emit-方法"><a href="#this-emit-方法" class="headerlink" title="this.emit 方法"></a>this.emit 方法</h2><blockquote><p>该函数用于主动触发 swiper 的事件，文档中找不到….<br>比如在 transitionStart 中写好了切换函数，但是在 初始化(init) 中也想调用一次<br>就可以在 init 中使用 this.emit(‘transitionStart’) 来调用执行</p></blockquote><h2 id="mousewheel-心得"><a href="#mousewheel-心得" class="headerlink" title="mousewheel 心得"></a>mousewheel 心得</h2><ul><li>建议开启 mousewheel.releaseOnEdges 否则鼠标滚轮无效</li><li>写项目时使用 <a href="mailto:swiper@5.2.1" target="_blank" rel="noopener">swiper@5.2.1</a>，mousewheel 功能有些 bug，垂直滚动异常，降级即可解决</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;swiper&quot;&gt;&lt;a href=&quot;#swiper&quot; class=&quot;headerlink&quot; title=&quot;swiper&quot;&gt;&lt;/a&gt;swiper&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="轮播功能" scheme="https://q-jason.github.io/blog/tags/%E8%BD%AE%E6%92%AD%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>心得-无接口时如何继续前端开发</title>
    <link href="https://q-jason.github.io/blog/article/ck8i8f5e3000u28uxbs1r1p4v/"/>
    <id>https://q-jason.github.io/blog/article/ck8i8f5e3000u28uxbs1r1p4v/</id>
    <published>2019-11-26T01:53:05.000Z</published>
    <updated>2020-04-02T04:00:56.093Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文讨论：<br>前端做项目时如何优雅的对接数据接口</p></blockquote><h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><blockquote><p>大多功能都需要接口对接才能完成<br>此时若后端接口还没出来，前端如何做？</p></blockquote><h2 id="开发时后端各类情况分析"><a href="#开发时后端各类情况分析" class="headerlink" title="开发时后端各类情况分析"></a>开发时后端各类情况分析</h2><ol><li><p>完美型: 已有成型接口</p><blockquote><p>分析：非常理想的开发体验，通常为重构项目等<br>方案：该情况下可以直接使用已有接口进行前端开发，无需特殊注意<br>星级：★★★★★</p></blockquote></li><li><p>常规型：没有成型接口，前后端同时进行</p><blockquote><p>分析：通常为新项目<br>方案：本文着重探讨的情况，继续往下看吧<br>星级：★★★★</p></blockquote></li><li><p>缺陷型：没有成型接口，后端进度比前端慢，甚至慢很多，需要等待接口</p><blockquote><p>分析：后端项目多，任务重等场景<br>方案：本文着重探讨的情况，继续往下看吧<br>星级：★★</p></blockquote></li><li><p>不知所措型：没有成型接口，后端遥遥无期，甚至迷茫</p><blockquote><p>分析：后端极度不确定<br>方案：本文着重探讨的情况，继续往下看吧<br>星级：★</p></blockquote></li></ol><h2 id="“约定字段”-和-“前端字段”"><a href="#“约定字段”-和-“前端字段”" class="headerlink" title="“约定字段” 和 “前端字段”"></a>“约定字段” 和 “前端字段”</h2><blockquote><p>约定字段这件事通常只是一个规范，一个好的习惯。<br>实际情况前后端可能不会去约定，也无法准确约定，总有纰漏<br>通常情况是 “各做各的”<br>然后数据通过接口返回时才知道字段名<br>好一点的会统一定义些数据模型<br>但是特殊功能，表单提交等，通常也无法保证统一定义</p></blockquote><p>前后端的应用场景不同，所以有时数据结构定义的也不同<br>与其依赖后端的数据结构，还不如自定义前端字段完成功能<br>然后通过 “装载器函数（webLoader）”再将值赋值给前端字段</p><h2 id="无接口时的解决方案"><a href="#无接口时的解决方案" class="headerlink" title="无接口时的解决方案"></a>无接口时的解决方案</h2><ol><li><p>无接口不进行</p><blockquote><p>解释：完成基础样式后，放任项目不管，等待后端提供接口后，继续进行。<br>分析：非常适合小型无复杂功能类项目。<br>优点：劳动力最小，小项目很实用<br>缺点：中大项目不适用，开发体验不连贯，“头重，尾重，中间轻”，接口对接时需要同时兼顾前端逻辑和后端对接，导致无法专一面对问题。</p></blockquote></li><li><p>mock 数据继续进行</p><blockquote><p>解释：模拟一些数据，继续往下开发，有接口时，将 mock 的数据替换成真实数据<br>分析：mock 数据是 “无后端” 时的唯一办法<br>优点：开发连贯，可以在无后端的情况下，打包一份 mock 版本，保证前端任务完成<br>缺点：根据不同项目需要选择最优的 mock 方式，不健壮的 mock 会带来一定烦恼<br>注意：一定要灵活的切换 mock 和真实环境，否则导致项目频繁报错，查原因很麻烦</p></blockquote></li></ol><h2 id="前端字段-和-mock-是必须的吗？"><a href="#前端字段-和-mock-是必须的吗？" class="headerlink" title="前端字段 和 mock 是必须的吗？"></a>前端字段 和 mock 是必须的吗？</h2><blockquote><p>“前端字段” 是一种思想<br>抛弃前后端字段统一的问题，使用 loader（装载器函数）的代价完成数据对接</p></blockquote><blockquote><p>mock 数据的作用就是在无 “真实数据源” 的时候提供一个 “虚假数据源” 继续开发<br>等待有 “真实数据源” 时，再尽量 ！！无缝切换！！</p></blockquote><blockquote><p>这俩通常情况下是绑在一起的，定义 “前端字段” 的时候顺便 mock</p></blockquote><h2 id="来个例子"><a href="#来个例子" class="headerlink" title="来个例子"></a>来个例子</h2><blockquote><p>例子功能：数据展示，提交表单<br>项目脚手架：vue-cli<br>后端情况：进度较慢<br>推荐库：mock.js</p></blockquote><ol><li><p>创建 mock 环境，定义环境变量 process.env.VUE_APP_MOCK</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.VUE_APP_MOCK)</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></li><li><p>切好样式，同时根据功能设计前端字段，同时 mock 数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span> <span class="attr">v-for</span>=<span class="string">"item in dataArr"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.cover"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Random &#125; <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> IS_MOCK = process.env.VUE_APP_MOCK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dataArr: IS_MOCK ? [</span><br><span class="line">        &#123;</span><br><span class="line">          id: Random.integer(),</span><br><span class="line">          pic: Random.dataImage(<span class="string">'100x100'</span>),</span><br><span class="line">          title: Random.ctitle(),</span><br><span class="line">          desc: Random.cparagraph()</span><br><span class="line">        &#125;,</span><br><span class="line">      ] : []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init () &#123;</span><br><span class="line">      <span class="comment">/** 请求数据 **/</span></span><br><span class="line">      <span class="keyword">let</span> apiDataArr = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/** 不重要 **/</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">apiDataArr</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/** 调用 loader 为前端字段赋值 **/</span></span><br><span class="line">        <span class="keyword">this</span>.loader(apiDataArr);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    loader (apiDataArr) &#123;</span><br><span class="line">      <span class="comment">/***</span></span><br><span class="line"><span class="comment">       * 如果是 mock 环境，则使用 mock 数据</span></span><br><span class="line"><span class="comment">       * 写在这里的原因是尽量不要在逻辑代码中加入 IS_MOCK 判断</span></span><br><span class="line"><span class="comment">       * 影响代码视觉</span></span><br><span class="line"><span class="comment">       ***/</span></span><br><span class="line">      <span class="keyword">if</span> (IS_MOCK) <span class="keyword">return</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *  接口字段赋值前端字段</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.dataArr = apiDataArr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          id: item._id,</span><br><span class="line">          <span class="comment">/** 你永远不知道后端起的什么奇怪的名字... **/</span></span><br><span class="line">          cover: item.p,</span><br><span class="line">          title: item.t,</span><br><span class="line">          desc: item.d</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文讨论：&lt;br&gt;前端做项目时如何优雅的对接数据接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题由来&quot;&gt;&lt;a href=&quot;#问题由来&quot; class=&quot;headerlink&quot; title=&quot;问题由来&quot;&gt;&lt;/a&gt;问题由来&lt;/h2&gt;&lt;blo
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="对接经验" scheme="https://q-jason.github.io/blog/tags/%E5%AF%B9%E6%8E%A5%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
