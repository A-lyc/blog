<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qteam</title>
  
  <subtitle>博客</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://q-jason.github.io/blog/"/>
  <updated>2020-06-28T03:47:38.229Z</updated>
  <id>https://q-jason.github.io/blog/</id>
  
  <author>
    <name>jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>酷库-前端图片裁剪</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wd002lzxm81rwqh7ms/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wd002lzxm81rwqh7ms/</id>
    <published>2020-06-19T04:16:33.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue 组件"></a>vue 组件</h2><h3 id="vue-cropper"><a href="#vue-cropper" class="headerlink" title="vue-cropper"></a>vue-cropper</h3><blockquote><p>pc端、移动端均可用<br>github: <a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener">https://github.com/xyxiao001/vue-cropper</a><br>例子：<a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener">https://github.com/xyxiao001/vue-cropper</a></p></blockquote><hr><h2 id="小程序、uni-app跨端"><a href="#小程序、uni-app跨端" class="headerlink" title="小程序、uni-app跨端"></a>小程序、uni-app跨端</h2><h3 id="ThorUI-uniapp（tui-image-cropper）"><a href="#ThorUI-uniapp（tui-image-cropper）" class="headerlink" title="ThorUI-uniapp（tui-image-cropper）"></a>ThorUI-uniapp（tui-image-cropper）</h3><blockquote><p>该 UI 库同时支持 h5 和 小程序端所以可以实现跨端<br>github: <a href="https://github.com/dingyong0214/ThorUI-uniapp" target="_blank" rel="noopener">https://github.com/dingyong0214/ThorUI-uniapp</a><br>组件文档：<a href="https://thorui.cn/doc/docs/tui-image-cropper.html" target="_blank" rel="noopener">https://thorui.cn/doc/docs/tui-image-cropper.html</a></p></blockquote><p>注意：<br>该组件在 1.5.1 版本测试时<br>该组件是根据 imageUrl watch 的监听来初始化的<br>所以组件创建时如果设置了正确的 imageUrl 则不会初始化，导致图片不显示（因为 watch 中没有设置 immediate）</p><p>解决方案：<br>一开始先设置 imageUrl: null<br>然后再设置正确的 imageUrl<br>触发初始化流程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-组件&quot;&gt;&lt;a href=&quot;#vue-组件&quot; class=&quot;headerlink&quot; title=&quot;vue 组件&quot;&gt;&lt;/a&gt;vue 组件&lt;/h2&gt;&lt;h3 id=&quot;vue-cropper&quot;&gt;&lt;a href=&quot;#vue-cropper&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="图片裁剪" scheme="https://q-jason.github.io/blog/tags/%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>心得-IE游览器请求缓存问题</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93ug0006zxm80nvh6vrx/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93ug0006zxm80nvh6vrx/</id>
    <published>2020-06-04T02:15:08.000Z</published>
    <updated>2020-06-28T03:47:38.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IE游览器的缓存机制：<br>所有的 GET 请求都会被缓存（包括 ajax）<br>之后再次请求相同的 url 时<br>会使用缓存数据，导致新数据无法获取<br>如下图：</p></blockquote><img src="/blog/article/ckbyj93ug0006zxm80nvh6vrx/example.jpg" class=""><p>——————– 手动间隔 ——————–</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="给-GET-请求-URL-后面加个时间戳参数"><a href="#给-GET-请求-URL-后面加个时间戳参数" class="headerlink" title="给 GET 请求 URL 后面加个时间戳参数"></a>给 GET 请求 URL 后面加个时间戳参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/api/getData</span><br><span class="line">http://www.xxx.com/api/getData?at=1591237338151</span><br></pre></td></tr></table></figure><h3 id="GET-请求头中声明禁用缓存"><a href="#GET-请求头中声明禁用缓存" class="headerlink" title="GET 请求头中声明禁用缓存"></a>GET 请求头中声明禁用缓存</h3><blockquote><p>Cache-Control: no-cache<br>Pragma: no-cache</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子使用了 axios</span></span><br><span class="line">request.defaults.headers.get[ <span class="string">'Cache-Control'</span> ] = <span class="string">'no-cache'</span></span><br><span class="line">request.defaults.headers.get[ <span class="string">'Pragma'</span> ] = <span class="string">'no-cache'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;IE游览器的缓存机制：&lt;br&gt;所有的 GET 请求都会被缓存（包括 ajax）&lt;br&gt;之后再次请求相同的 url 时&lt;br&gt;会使用缓存数据，导致新数据无法获取&lt;br&gt;如下图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/blog/ar
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="IE" scheme="https://q-jason.github.io/blog/tags/IE/"/>
    
      <category term="缓存" scheme="https://q-jason.github.io/blog/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>电影-资源搜索</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93uc0002zxm8fgfdgowh/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93uc0002zxm8fgfdgowh/</id>
    <published>2020-05-22T09:32:42.000Z</published>
    <updated>2020-06-28T03:47:38.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搜素资源"><a href="#搜素资源" class="headerlink" title="搜素资源"></a>搜素资源</h2><blockquote><p><a href="https://kat.sx/" target="_blank" rel="noopener">https://kat.sx/</a></p></blockquote><h2 id="字母搜索"><a href="#字母搜索" class="headerlink" title="字母搜索"></a>字母搜索</h2><blockquote><p><a href="https://www.podnapisi.net" target="_blank" rel="noopener">https://www.podnapisi.net</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搜素资源&quot;&gt;&lt;a href=&quot;#搜素资源&quot; class=&quot;headerlink&quot; title=&quot;搜素资源&quot;&gt;&lt;/a&gt;搜素资源&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kat.sx/&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
      <category term="电影" scheme="https://q-jason.github.io/blog/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影资源搜索" scheme="https://q-jason.github.io/blog/tags/%E7%94%B5%E5%BD%B1%E8%B5%84%E6%BA%90%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>酷库-后台管理开发</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wf002pzxm808zp5fo7/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wf002pzxm808zp5fo7/</id>
    <published>2020-05-19T08:53:52.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>后台管理通常推荐参考模板项目进行二次开发<br>省不少事</p></blockquote><h2 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h2><blockquote><p>github: <a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-element-admin</a><br>非常强大，内置了不少后台常用组件，拿来即用。<br>有些臃肿…</p></blockquote><h3 id="取消默认的-mock，使用反向代理"><a href="#取消默认的-mock，使用反向代理" class="headerlink" title="取消默认的 mock，使用反向代理"></a>取消默认的 mock，使用反向代理</h3><ul><li>在 vue.config.js devServer 中删除 before，加入 proxy 即可</li><li>注意 development 模式，默认请求会加上 /dev-api 前缀，在 .env.development 中设置</li></ul><img src="/blog/article/ckbyj93wf002pzxm808zp5fo7/vue-element-admin-1.jpg" class=""><p>———— 手动间隙 ————</p><h3 id="修改统一的接口请求设置"><a href="#修改统一的接口请求设置" class="headerlink" title="修改统一的接口请求设置"></a>修改统一的接口请求设置</h3><ul><li>默认有响应拦截，会判断若 res.data.code 只要不是 20000 就会报错，如下图</li><li>实际使用时，这里的逻辑肯定要改掉，可以删除拦截，或改成自己应用的状态码进行判断</li><li>下图的代码 /src/utils/request.js</li></ul><img src="/blog/article/ckbyj93wf002pzxm808zp5fo7/vue-element-admin-2.jpg" class=""><p>———— 手动间隙 ————</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ol><li>修改 src/api/user.js 中的 login 方法的接口地址（这里接口必须返回用户身份标识）</li><li>修改 src/store/modules/user.js 中的 actions.login 函数（主要是统一 key 值，如下图）</li></ol><img src="/blog/article/ckbyj93wf002pzxm808zp5fo7/vue-element-admin-3.jpg" class=""><p>———— 手动间隙 ————</p><h3 id="路由权限管理"><a href="#路由权限管理" class="headerlink" title="路由权限管理"></a>路由权限管理</h3><ul><li>具体代码在 src/permission.js router.beforeEach 函数中</li><li>实现简单来说就是在页面切换时，判断当前用户是否有 store user/roles 状态</li><li>若无，则通过 user.getInfo 接口获取（getInfo 被封装在了 store user actions 中）</li><li>getInfo 应该返回一个权限数组</li><li>之后根据用户权限（roles）和预先定义的动态路由（/router/index.js 中的 asyncRoutes）</li><li>使用 router.addRoutes 动态注册路由</li><li>若无权限管理，这里直接写死就好，不用走接口，如下图</li></ul><img src="/blog/article/ckbyj93wf002pzxm808zp5fo7/vue-element-admin-4.jpg" class=""><hr><h2 id="vue-admin-template"><a href="#vue-admin-template" class="headerlink" title="vue-admin-template"></a>vue-admin-template</h2><blockquote><p>github: <a href="https://github.com/PanJiaChen/vue-admin-template" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-admin-template</a><br>vue-element-admin 的精简版本，没有内置常用组件。<br>使用方法也类似，去看上面文档吧</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;后台管理通常推荐参考模板项目进行二次开发&lt;br&gt;省不少事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;vue-element-admin&quot;&gt;&lt;a href=&quot;#vue-element-admin&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="vue" scheme="https://q-jason.github.io/blog/tags/vue/"/>
    
      <category term="后台管理" scheme="https://q-jason.github.io/blog/tags/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>经验-实现调用游览器下载功能</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93v70013zxm8f24d0sok/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93v70013zxm8f24d0sok/</id>
    <published>2020-04-22T02:53:46.000Z</published>
    <updated>2020-06-28T03:47:38.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步-常规下载"><a href="#同步-常规下载" class="headerlink" title="同步 - 常规下载"></a>同步 - 常规下载</h2><blockquote><p>只要响应头 Content-Type 为 application/octet-stream 类型<br>游览器就会自动下载返回体<br>下图为重要响应头的说明</p></blockquote><img src="/blog/article/ckbyj93v70013zxm8f24d0sok/1.jpg" class=""><p>———– 手动间隙 ———–</p><h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><blockquote><p>对于前端来说常规的下载功能就是一个普通的同步请求<br>使用 window.open 跳转即可实现下载</p></blockquote><blockquote><p>通常会以 iframe 的方式在当前页面实现下载<br>如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">'//xmp.down.sandai.net/xmp/XMPSetup6.1.7.810xmpdl.exe'</span>, <span class="string">'iframe-name'</span>)</span><br><span class="line"><span class="comment">// 调用后，游览器即开始下载</span></span><br></pre></td></tr></table></figure><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><blockquote><p>需要设置以下响应头后返回响应体即可</p></blockquote><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-type</span>: application/octet-stream</span><br><span class="line"><span class="attribute">Content-Disposition</span>: attachment; filename="filename.jpg";"</span><br><span class="line"><span class="attribute">Content-Length</span>: 65761872</span><br></pre></td></tr></table></figure><hr><h2 id="异步-blob-下载"><a href="#异步-blob-下载" class="headerlink" title="异步 - blob 下载"></a>异步 - blob 下载</h2><blockquote><p>通过 Blob 可以实现将需要的任何资源通过异步请求获取，先存到内存中<br>再通过 a 标签 download 特性下载到硬盘（下载到硬盘后释放内存）<br>方法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于 file-saver，解决兼容性问题</span></span><br><span class="line"><span class="keyword">import</span> FileSaver <span class="keyword">from</span> <span class="string">'file-saver'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(<span class="string">'//xxx/xxx/xxx'</span>, &#123;</span><br><span class="line">    responseType: <span class="string">'blob'</span></span><br><span class="line">    <span class="comment">// =&gt; xhr.responseType = 'blob'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; data: blob &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    FileSaver.saveAs(blob, <span class="string">"hello world.txt"</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于原生，可能有兼容问题（具体未测试）</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(<span class="string">'//xxx/xxx/xxx'</span>, &#123;</span><br><span class="line">    responseType: <span class="string">'blob'</span></span><br><span class="line">    <span class="comment">// =&gt; xhr.responseType = 'blob'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// data 为 Blob 实例</span></span><br><span class="line">    <span class="keyword">const</span> blob = data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 a 标签（下载元素）</span></span><br><span class="line">    <span class="keyword">const</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据 blob 创建文件临时地址</span></span><br><span class="line">    <span class="keyword">const</span> href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 a 标签的 href 设置为临时文件路径</span></span><br><span class="line">    downloadElement.href = href</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下载后文件名</span></span><br><span class="line">    downloadElement.download = <span class="string">'1.mp4'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 页面追加 a 标签</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(downloadElement)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动触发点击事件，通过 download 特性下载文件</span></span><br><span class="line">    downloadElement.click()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除 a 标签</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(downloadElement)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(href)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>此下载方法不如同步下载方案，有兼容问题</li><li>强烈建议用 <a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener">FileSaver.js</a> 解决部分兼容问题</li><li>由于此方法基于异步请求，有跨域问题！</li><li>由于占用内存，此方法只适用于小文件（参考百度网盘网页下载）</li><li>资源是任何类型都可以，后端也不需要做任何操作（除非要加权限神马的…）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同步-常规下载&quot;&gt;&lt;a href=&quot;#同步-常规下载&quot; class=&quot;headerlink&quot; title=&quot;同步 - 常规下载&quot;&gt;&lt;/a&gt;同步 - 常规下载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;只要响应头 Content-Type 为 application/
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="实现 web 下载功能" scheme="https://q-jason.github.io/blog/tags/%E5%AE%9E%E7%8E%B0-web-%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>经验-url 中 query 和 hash 的顺序（SPA）</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93ur000dzxm80k1t3k1d/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93ur000dzxm80k1t3k1d/</id>
    <published>2020-04-20T11:30:49.000Z</published>
    <updated>2020-06-28T03:47:38.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>观察下图 url 和控制台的输出</p></blockquote><h2 id="查询字符串在后"><a href="#查询字符串在后" class="headerlink" title="查询字符串在后"></a>查询字符串在后</h2><blockquote><p>若为 SPA 项目，qs 应该在 hash 之后<br>vue-router、react-router 都是按照这个顺序做的 api<br>但是 location.search 为空</p></blockquote><img src="/blog/article/ckbyj93ur000dzxm80k1t3k1d/1.png" class=""><p>————- 手动间隙 ————-</p><img src="/blog/article/ckbyj93ur000dzxm80k1t3k1d/2.png" class=""><p>————- 手动间隙 ————-</p><h2 id="查询字符串在前"><a href="#查询字符串在前" class="headerlink" title="查询字符串在前"></a>查询字符串在前</h2><blockquote><p>若为常规项目，则 qs 应该在 hash 之前<br>但是 vue-router 和 react-router 设计的 api 取不到值</p></blockquote><img src="/blog/article/ckbyj93ur000dzxm80k1t3k1d/3.png" class=""><p>————- 手动间隙 ————-</p><img src="/blog/article/ckbyj93ur000dzxm80k1t3k1d/4.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;观察下图 url 和控制台的输出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;查询字符串在后&quot;&gt;&lt;a href=&quot;#查询字符串在后&quot; class=&quot;headerlink&quot; title=&quot;查询字符串在后&quot;&gt;&lt;/a&gt;查询字符串在后&lt;/h2&gt;&lt;b
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="vue" scheme="https://q-jason.github.io/blog/tags/vue/"/>
    
      <category term="react" scheme="https://q-jason.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>职场-人事档案</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93vl001ozxm8fhevhtsg/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93vl001ozxm8fhevhtsg/</id>
    <published>2020-04-17T13:55:49.000Z</published>
    <updated>2020-06-28T03:47:38.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>档案…<br>一个从小就听上一辈说…<br>非常重要的玩意…</p></blockquote><h2 id="啥是档案"><a href="#啥是档案" class="headerlink" title="啥是档案"></a>啥是档案</h2><blockquote><p>简单来说就是一个小袋子，这个小袋子从你上小学开始就开始装东西<br>装着你在哪上的学，获得过啥荣誉，有没有惹祸（记过）等信息</p></blockquote><blockquote><p>未参加工作前，所有人的档案都由学校统一保管走流程，不需要自己费心<br>参加工作后，每个人的档案开始就各不相同了…</p></blockquote><blockquote><p>有的人去了国企，有的人当了老师，有的人做了公务员，有的人去了私营企业…<br>单位和职位各不相同，档案的作用和管理方法，也各不相同</p></blockquote><blockquote><p>档案不能放在自己手中（非必须，很多人都放在自己手里保管，但是最好不要，继续往下看吧）<br>通常要由公司保管（国企、老师、公务员）<br>或交给当地的 “人力资源市场”（私营企业）</p></blockquote><hr><h2 id="学校给的报到证（不确定，仅供参考）"><a href="#学校给的报到证（不确定，仅供参考）" class="headerlink" title="学校给的报到证（不确定，仅供参考）"></a>学校给的报到证（不确定，仅供参考）</h2><blockquote><p>离开学校的大门时，学校一定会统一发一张 “报到证” 这个证很重要，掉了不知道咋补（应该是能补）</p></blockquote><blockquote><p>这玩意作用是在你第一份工作转正时，你的所在单位会需要这张 “报到证”，会问你要，把你的档案身份从 “学生” 变为 “职工/社会人员”，之后好像就没啥用处了…</p></blockquote><blockquote><p>第一份工作离职后，第二份工作就不需要 “报到证” 了（目前看起来就没啥用了…）</p></blockquote><p>注意：<br>第一份工作的单位将你档案的 “学生” 身份转为 “职工/社会人员” 后，通常这个公司会帮你保管着档案</p><hr><h2 id="国企员工、老师、公务员等"><a href="#国企员工、老师、公务员等" class="headerlink" title="国企员工、老师、公务员等"></a>国企员工、老师、公务员等</h2><blockquote><p>这几类职位对档案非常看重！<br>据说是通过档案的工龄（工作年龄）来评职称<br>一定要多留心，否则就算工作了很长时间，但是不算工龄就亏大了！</p></blockquote><hr><h2 id="私营企业员工"><a href="#私营企业员工" class="headerlink" title="私营企业员工"></a>私营企业员工</h2><blockquote><p>这类员工（大多数人…）<br>档案的作用不是很大，甚至说完全没用<br>退休的时候能用一把，作为退休材料提交，所以要知道档案在哪里保管着，用的时候别抓瞎找不到<br>档案的工龄和退休（养老金等）没有任何关系…（现实例子 + 百度查阅，很确定）<br>退休只和年纪、交养老保险的累计年限、交医疗保险的累计年限有关，养老保险交的越多拿的越多</p></blockquote><hr><h2 id="令人迷惑的-“国企”-和-“私企”-档案管理方式"><a href="#令人迷惑的-“国企”-和-“私企”-档案管理方式" class="headerlink" title="令人迷惑的 “国企” 和 “私企” 档案管理方式"></a>令人迷惑的 “国企” 和 “私企” 档案管理方式</h2><blockquote><p>国企：国企公司有权利自己保管员工档案（没去过国企暂时不知道是否一定会强制保管…）<br>私企：没有权利保管员工档案，只能花钱通过第三方管理（可以理解为租了一个人力局的小柜子）</p></blockquote><p>注意：<br>私企现在很多都不会管理员工档案<br>会让你自己保管着档案，或者干脆不理睬档案的管理问题<br>五险一金都不基于档案，没有档案也可以交<br>很正常！<br>因为管理是需要给私企增加另外一部分费用的（因没有权限，需要”租”）</p><hr><h2 id="我目前的流程"><a href="#我目前的流程" class="headerlink" title="我目前的流程"></a>我目前的流程</h2><blockquote><p>私营企业</p></blockquote><ol><li>我在学校毕业，拿到了 “报到证”</li><li>我找到了心仪的私营公司，并在这个单位成功转正入职（第一次转正）</li><li>该单位问我要 “报到证”，将我的档案身份从 “学生” 转为了 “社会人员”，并给我保存了档案（我记得还在 “毕业生就业信息网” 网上填了些东西）</li><li>我在这个私营公司离职了，公司将我的个人档案袋子直接给了我</li><li>目前我属于失业人员，我拿着档案袋子到当地的 “人力资源市场” 办理了 “失业人员档案托管”（不花钱）</li><li>我入职了新公司（还是私营企业），我询问过新公司不保管员工档案</li><li>档案就一直存在 “人力资源市场”，不会移出（我咨询过办理人员，很确定）</li><li>直到以后工作找到了 “保管档案的公司”，再由该公司从 “人力资源市场” 移出，转入公司档案管理流程（个人好像无法主动把档案提出来…不确定）</li><li>若以后的所有单位全都不管理档案，那么这个档案就会一直在 “人力资源市场”，需要时就去 “人力资源市场” 找（退休等场景，目前就知道退休会要档案作为材料，未发现其他场景）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;档案…&lt;br&gt;一个从小就听上一辈说…&lt;br&gt;非常重要的玩意…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;啥是档案&quot;&gt;&lt;a href=&quot;#啥是档案&quot; class=&quot;headerlink&quot; title=&quot;啥是档案&quot;&gt;&lt;/a&gt;啥是档案&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="职场" scheme="https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA/"/>
    
    
      <category term="人事档案" scheme="https://q-jason.github.io/blog/tags/%E4%BA%BA%E4%BA%8B%E6%A1%A3%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>酷库-js计算精度</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93w30025zxm86m912pgb/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93w30025zxm86m912pgb/</id>
    <published>2020-04-15T12:06:20.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js-精度问题例子"><a href="#js-精度问题例子" class="headerlink" title="js 精度问题例子"></a>js 精度问题例子</h2><blockquote><p>看下面例子，就问你蛋不蛋疼…</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>)</span><br><span class="line"><span class="comment">// =&gt; 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">45685</span> * <span class="number">666.7</span>)</span><br><span class="line"><span class="comment">// =&gt; 30458189.500000004</span></span><br></pre></td></tr></table></figure><h2 id="mathjs"><a href="#mathjs" class="headerlink" title="mathjs"></a>mathjs</h2><blockquote><p>此库是 javascript 数学库<br>github: <a href="https://github.com/josdejong/mathjs" target="_blank" rel="noopener">https://github.com/josdejong/mathjs</a><br>npm: <a href="https://www.npmjs.com/package/mathjs" target="_blank" rel="noopener">https://www.npmjs.com/package/mathjs</a><br>文档：<a href="https://mathjs.org/docs/datatypes/bignumbers.html" target="_blank" rel="noopener">https://mathjs.org/docs/datatypes/bignumbers.html</a></p></blockquote><blockquote><p>例子如下<br>有两种使用方式，选其一使用即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">'mathjs'</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  math.add(</span><br><span class="line">    math.bignumber(<span class="number">0.1</span>),</span><br><span class="line">    math.bignumber(<span class="number">0.2</span>)</span><br><span class="line">  ).toNumber()</span><br><span class="line">)</span><br><span class="line"><span class="comment">// =&gt; 0.3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  math.multiply(</span><br><span class="line">    math.bignumber(<span class="number">45685</span>),</span><br><span class="line">    math.bignumber(<span class="number">666.7</span>)</span><br><span class="line">  ).toNumber()</span><br><span class="line">)</span><br><span class="line"><span class="comment">// =&gt; 30458189.5</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create, all &#125; <span class="keyword">from</span> <span class="string">'mathjs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建一个 math 新实例 **/</span></span><br><span class="line"><span class="keyword">const</span> math = create(all)</span><br><span class="line"></span><br><span class="line">math.config(&#123;</span><br><span class="line">  number: <span class="string">'BigNumber'</span>,</span><br><span class="line">  precision: <span class="number">64</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  math.evaluate(<span class="string">'0.1 + 0.2'</span>).toNumber()</span><br><span class="line">)</span><br><span class="line"><span class="comment">// =&gt; 0.3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  math.evaluate(<span class="string">'45685 * 666.7'</span>).toNumber()</span><br><span class="line">)</span><br><span class="line"><span class="comment">// =&gt; 30458189.5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js-精度问题例子&quot;&gt;&lt;a href=&quot;#js-精度问题例子&quot; class=&quot;headerlink&quot; title=&quot;js 精度问题例子&quot;&gt;&lt;/a&gt;js 精度问题例子&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;看下面例子，就问你蛋不蛋疼…&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="计算精度" scheme="https://q-jason.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>职场-离职和入职</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93vx001vzxm85uoqdzn3/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93vx001vzxm85uoqdzn3/</id>
    <published>2020-04-10T02:24:00.000Z</published>
    <updated>2020-06-28T03:47:38.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>离职和入职前多看一眼吧<br>虽然可能都是大白话，但是都是必要的过程</p></blockquote><h2 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h2><ol><li>提前打招呼，既然说了就一定不要多逗留，除非有特殊原因，能早离开就早离开</li><li>要一份离职证明，新单位一般都是需要的</li><li>搞明白离职当月的社保交还是不交，要是不交你的到手工资会比平常的多一些</li></ol><h2 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h2><ol><li>搞清楚公司是干什么的，是个什么方向</li><li>上班时间，休息时间，加班等时间相关的情况</li><li>了解在公司中你的工作需要涉及的区域，不要跨越，不要扔锅</li><li>几号发工资，压不压第一个月工资，什么形式发工资，发哪个银行，提前去办银行卡</li><li>实习期过后，若转正无人领路，主动问人事一嘴</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;离职和入职前多看一眼吧&lt;br&gt;虽然可能都是大白话，但是都是必要的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;离职&quot;&gt;&lt;a href=&quot;#离职&quot; class=&quot;headerlink&quot; title=&quot;离职&quot;&gt;&lt;/a&gt;离职&lt;/h2&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="职场" scheme="https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA/"/>
    
    
      <category term="离职和入职" scheme="https://q-jason.github.io/blog/tags/%E7%A6%BB%E8%81%8C%E5%92%8C%E5%85%A5%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>经验-获取Dom元素的相对位置</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93vi001mzxm89vvme4de/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93vi001mzxm89vvme4de/</id>
    <published>2020-04-02T03:09:08.000Z</published>
    <updated>2020-06-28T03:47:38.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素相对于视口的距离"><a href="#元素相对于视口的距离" class="headerlink" title="元素相对于视口的距离"></a>元素相对于视口的距离</h2><blockquote><p>domEl.getBoundingClientRect 这个方法可以轻松获取<br>例子如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> react = domObj.getBoundingClientRect();</span><br><span class="line"><span class="comment">// react = &#123; top, right, bottom, left, width, height &#125;</span></span><br><span class="line"><span class="comment">//  其中 width, height 有些兼容问题（IE 中没有这俩属性）</span></span><br></pre></td></tr></table></figure><blockquote><p>各个属性解释如下</p></blockquote><img src="/blog/article/ckbyj93vi001mzxm89vvme4de/getBoundingClientRect.jpg" class=""><p>—————— END ——————</p><h2 id="元素的定位父元素以及距离"><a href="#元素的定位父元素以及距离" class="headerlink" title="元素的定位父元素以及距离"></a>元素的定位父元素以及距离</h2><blockquote><p>解释：”定位父元素” 是距离自身最近的 position: relative || absolute || fixed 的父级元素<br>获取：用 dom 原生属性即可获取<br>例子：看下图 </p></blockquote><img src="/blog/article/ckbyj93vi001mzxm89vvme4de/offsetParent.png" class=""><p>注意：</p><ol><li>元素自身有 fixed 定位，offsetParent 的结果为 null</li><li>元素自身无 fixed 定位，且父级元素都未经过定位，offsetParent 的结果为 body</li><li>body 元素的 parentNode 是 null</li></ol><p>—————— END ——————</p><h2 id="元素相对于页面最顶部的距离"><a href="#元素相对于页面最顶部的距离" class="headerlink" title="元素相对于页面最顶部的距离"></a>元素相对于页面最顶部的距离</h2><blockquote><p>无现成属性<br>可以通过计算而来<br>方法如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  el.getBoundingClientRect().top + <span class="built_in">window</span>.pageYOffset</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>—————— END ——————</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元素相对于视口的距离&quot;&gt;&lt;a href=&quot;#元素相对于视口的距离&quot; class=&quot;headerlink&quot; title=&quot;元素相对于视口的距离&quot;&gt;&lt;/a&gt;元素相对于视口的距离&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;domEl.getBoundingClientRe
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="domEl.getBoundingClientRect" scheme="https://q-jason.github.io/blog/tags/domEl-getBoundingClientRect/"/>
    
  </entry>
  
  <entry>
    <title>经验-docker</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93uj0007zxm804ri80de/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93uj0007zxm804ri80de/</id>
    <published>2020-03-23T07:53:50.000Z</published>
    <updated>2020-06-28T03:47:38.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在工作中认识了 docker<br>仔细一看这玩意真是强大…</p></blockquote><blockquote><p>简单介绍：<br>有亲手配置过服务器线上项目的一定经历过很多痛苦<br>通常是这个环境不对，那个环境不对的<br>docker 就是解决这个的（不用自己配置服务器运行环境了）</p></blockquote><blockquote><p>原理以及名词介绍：<br>镜像：也称为 image，就是把本地的项目和环境打包成一个镜像文件（你可以理解一个压缩包）<br>容器：是镜像的实例（面向对象的思想），就像是 windows 系统，同一个镜像可以给很多电脑装系统<br>通过 “镜像” 生成 “容器”，每一个容器都是封闭的<br>通常会有一个端口号对外映射暴露，提供服务</p></blockquote><h2 id="学习文章"><a href="#学习文章" class="headerlink" title="学习文章"></a>学习文章</h2><blockquote><p>阮一峰老师：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在工作中认识了 docker&lt;br&gt;仔细一看这玩意真是强大…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;简单介绍：&lt;br&gt;有亲手配置过服务器线上项目的一定经历过很多痛苦&lt;br&gt;通常是这个环境不对，那个环境不对的&lt;br&gt;do
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="node" scheme="https://q-jason.github.io/blog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>酷库-走马灯效果</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wr003dzxm87nh8cub0/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wr003dzxm87nh8cub0/</id>
    <published>2020-03-17T02:03:58.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>也许你可以先试试 marquee 标签<br>这个标签已经被 w3c 淘汰，各大浏览器对这个标签的支持非常好</p></blockquote><h2 id="marquee-js"><a href="#marquee-js" class="headerlink" title="marquee-js"></a>marquee-js</h2><blockquote><p>简介：基于原生实现，github 星不太高（能用就行哈哈哈）<br>home: <a href="http://mapleliu.com/marquee-js" target="_blank" rel="noopener">http://mapleliu.com/marquee-js</a><br>github: <a href="https://github.com/liujian10/marquee-js#readme" target="_blank" rel="noopener">https://github.com/liujian10/marquee-js#readme</a><br>npm: <a href="https://www.npmjs.com/package/marquee-js" target="_blank" rel="noopener">https://www.npmjs.com/package/marquee-js</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;也许你可以先试试 marquee 标签&lt;br&gt;这个标签已经被 w3c 淘汰，各大浏览器对这个标签的支持非常好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;marquee-js&quot;&gt;&lt;a href=&quot;#marquee-js&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="走马灯" scheme="https://q-jason.github.io/blog/tags/%E8%B5%B0%E9%A9%AC%E7%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>酷库-表单验证</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wq003azxm8d92fdr74/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wq003azxm8d92fdr74/</id>
    <published>2020-03-12T10:41:50.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async-validator（原生，无依赖）"><a href="#async-validator（原生，无依赖）" class="headerlink" title="async-validator（原生，无依赖）"></a>async-validator（原生，无依赖）</h2><blockquote><p>github: <a href="http://github.com/yiminghe/async-validator" target="_blank" rel="noopener">http://github.com/yiminghe/async-validator</a><br>npm: <a href="https://www.npmjs.com/package/async-validator" target="_blank" rel="noopener">https://www.npmjs.com/package/async-validator</a><br>非常强大的验证库<br>用法大约就是先定义对象风格，然后生成验证器，传入对象进行验证<br>看名字就知道支持异步验证！<br>下面总结几个需要理解才能懂的知识</p></blockquote><ol><li>whitespace 的作用是判断是否为只包含空格的字符串，这个属性在字段的风格中写</li><li>一个字段可以包含多个验证（数组），这个好处是可以定义多个 message 来响应不同的错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: [</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'姓名不能为空'</span>, <span class="attr">whitespace</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">4</span>, <span class="attr">message</span>: <span class="string">'姓名为 2 ~ 4 位'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vee-validate（vue）"><a href="#vee-validate（vue）" class="headerlink" title="vee-validate（vue）"></a>vee-validate（vue）</h2><blockquote><p>github: <a href="https://github.com/logaretm/vee-validate" target="_blank" rel="noopener">https://github.com/logaretm/vee-validate</a><br>npm: <a href="https://www.npmjs.com/package/vee-validate" target="_blank" rel="noopener">https://www.npmjs.com/package/vee-validate</a><br>直接在 template 模板中写验证规则，代码逻辑上比较友好<br>原则上所有 vue ui 库都能使用<br>支持异步验证（通过手动 setErrors 的方式）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;async-validator（原生，无依赖）&quot;&gt;&lt;a href=&quot;#async-validator（原生，无依赖）&quot; class=&quot;headerlink&quot; title=&quot;async-validator（原生，无依赖）&quot;&gt;&lt;/a&gt;async-validator（原
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="表单验证" scheme="https://q-jason.github.io/blog/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>酷库-mockjs</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93w50028zxm822g47nql/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93w50028zxm822g47nql/</id>
    <published>2020-03-12T01:54:09.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>模拟数据应该是开发中必有的情况= =</p></blockquote><h2 id="mockjs"><a href="#mockjs" class="headerlink" title="mockjs"></a>mockjs</h2><blockquote><p>home：<a href="http://mockjs.com" target="_blank" rel="noopener">http://mockjs.com</a><br>github：<a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">https://github.com/nuysoft/Mock</a><br>npm：<a href="https://www.npmjs.com/package/mockjs" target="_blank" rel="noopener">https://www.npmjs.com/package/mockjs</a><br>文档查阅：<a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">https://github.com/nuysoft/Mock/wiki</a></p></blockquote><blockquote><p>示例查阅：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">http://mockjs.com/examples.html</a></p></blockquote><h2 id="Random-单词记录"><a href="#Random-单词记录" class="headerlink" title="Random 单词记录"></a>Random 单词记录</h2><blockquote><p>记录着常用的单词<br>注：字符串类型通常分为英文和中文，中文是在英文的单词基础上前面加 ‘c’<br>ex: title, ctitle</p></blockquote><h3 id="标题（title，ctitle）"><a href="#标题（title，ctitle）" class="headerlink" title="标题（title，ctitle）"></a>标题（title，ctitle）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.title( min?, max? )</span></span><br><span class="line">Random.title()</span><br><span class="line"><span class="comment">// =&gt; "Ploinc Trus Ukvfcqv"</span></span><br><span class="line">Random.title(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// =&gt; "Fllryhnhn Uouqco Adhmx Jnux"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.ctitle( min?, max? )</span></span><br><span class="line">Random.ctitle()</span><br><span class="line"><span class="comment">// =&gt; "期和效除亲专"</span></span><br><span class="line">Random.ctitle(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// =&gt; "北二亲"</span></span><br></pre></td></tr></table></figure><h3 id="段落描述（paragraph，cparagraph，sentence-csentence）"><a href="#段落描述（paragraph，cparagraph，sentence-csentence）" class="headerlink" title="段落描述（paragraph，cparagraph，sentence, csentence）"></a>段落描述（paragraph，cparagraph，sentence, csentence）</h3><blockquote><p>min 和 max 代表的是几句话，而为字符串个数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.paragraph( min?, max? )</span></span><br><span class="line"><span class="comment">// Random.sentence( min?, max? )</span></span><br><span class="line">Random.paragraph()</span><br><span class="line">Random.sentence()</span><br><span class="line"><span class="comment">// =&gt; "Uspwcg symp bbn dydjdkgmh odhxg ppfmw sxcqcc ixacnm ouubxyh ohdq hdnytokmq jpekjv sgfodecmp."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.cparagraph( min?, max? )</span></span><br><span class="line"><span class="comment">// Random.csentence( min?, max? )</span></span><br><span class="line">Random.cparagraph()</span><br><span class="line">Random.csentence()</span><br><span class="line"><span class="comment">// =&gt; "算对但放经被将始参文工价适。等开飞之提正与九入养出交装达指。者住小机价更系头日体活七你马王报设。保车技置思走少必问样总主米时四选群土。"</span></span><br></pre></td></tr></table></figure><h3 id="图片（image、dataImage）"><a href="#图片（image、dataImage）" class="headerlink" title="图片（image、dataImage）"></a>图片（image、dataImage）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.image( size, background, foreground, format, text )</span></span><br><span class="line">Random.image(<span class="string">'200x100'</span>, <span class="string">'#894FC4'</span>, <span class="string">'#FFF'</span>, <span class="string">'png'</span>, <span class="string">'!'</span>)</span><br><span class="line"><span class="comment">// =&gt; 返回一张真实的网络图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.dataImage( size, text )</span></span><br><span class="line">Random.dataImage(<span class="string">'200x100'</span>, <span class="string">'Hello Mock.js!'</span>)</span><br><span class="line"><span class="comment">// =&gt; base64 格式的图片</span></span><br></pre></td></tr></table></figure><h3 id="时间（date，time，datatime，now）"><a href="#时间（date，time，datatime，now）" class="headerlink" title="时间（date，time，datatime，now）"></a>时间（date，time，datatime，now）</h3><blockquote><p>format 传 T 则会转为毫秒值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.date( format? )</span></span><br><span class="line">Random.date()</span><br><span class="line"><span class="comment">// =&gt; "2008-09-07"</span></span><br><span class="line">Random.date(<span class="string">'yy-MM-dd'</span>)</span><br><span class="line"><span class="comment">// =&gt; "91-05-09"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.time( format? )</span></span><br><span class="line">Random.time()</span><br><span class="line"><span class="comment">// =&gt; "09:38:34"</span></span><br><span class="line">Random.time(<span class="string">'HH:mm:ss'</span>)</span><br><span class="line"><span class="comment">// =&gt; "01:45:11"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.datetime( format? )</span></span><br><span class="line">Random.datetime()</span><br><span class="line"><span class="comment">// =&gt; "1977-11-12 07:01:43"</span></span><br><span class="line">Random.datetime(<span class="string">'yyyy-MM-dd A HH:mm:ss'</span>)</span><br><span class="line"><span class="comment">// =&gt; "1999-08-30 PM 15:20:22"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.now( unit?, format? )</span></span><br><span class="line">Random.now()</span><br><span class="line"><span class="comment">// =&gt; "2020-03-12 09:58:09"</span></span><br><span class="line">Random.now(<span class="string">'hour'</span>)</span><br><span class="line"><span class="comment">// =&gt; "2020-03-12 90:00:00"</span></span><br><span class="line">Random.now(<span class="string">'yyyy-MM-dd HH:mm:ss SS'</span>)</span><br><span class="line"><span class="comment">// =&gt; "2020-03-12 09:58:09 206"</span></span><br></pre></td></tr></table></figure><h3 id="id标识（id）"><a href="#id标识（id）" class="headerlink" title="id标识（id）"></a>id标识（id）</h3><blockquote><p>不光有数字，可能会有 X 字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random.id()</span><br><span class="line"><span class="comment">// =&gt; "51000019730908273X"</span></span><br></pre></td></tr></table></figure><h3 id="数字（integer，float）"><a href="#数字（integer，float）" class="headerlink" title="数字（integer，float）"></a>数字（integer，float）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.integer( min?, max? )</span></span><br><span class="line">Random.integer()</span><br><span class="line"><span class="comment">// =&gt; -7897216954377768</span></span><br><span class="line">Random.integer(<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// =&gt; 92</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Random.float( min?, max?, dmin?, dmax? )</span></span><br><span class="line">Random.float()</span><br><span class="line"><span class="comment">// =&gt; -996747130985524.9</span></span><br><span class="line">Random.float(<span class="number">60</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// =&gt; 87.3435</span></span><br></pre></td></tr></table></figure><h3 id="布尔（boolean）"><a href="#布尔（boolean）" class="headerlink" title="布尔（boolean）"></a>布尔（boolean）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.boolean( min?, max?, current? )</span></span><br><span class="line">Random.boolean()</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line">Random.boolean(<span class="number">1</span>, <span class="number">9</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="人名（name，cname）"><a href="#人名（name，cname）" class="headerlink" title="人名（name，cname）"></a>人名（name，cname）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.name( middle? )</span></span><br><span class="line">Random.name()</span><br><span class="line"><span class="comment">// =&gt; "Matthew Jones"</span></span><br><span class="line">Random.name(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; "Ronald Sharon Martinez"</span></span><br><span class="line"></span><br><span class="line">Random.cname()</span><br><span class="line"><span class="comment">// =&gt; "武超"</span></span><br></pre></td></tr></table></figure><h3 id="地区（region，province，city，county）"><a href="#地区（region，province，city，county）" class="headerlink" title="地区（region，province，city，county）"></a>地区（region，province，city，county）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Random.region()</span><br><span class="line"><span class="comment">// =&gt; "华中"</span></span><br><span class="line"></span><br><span class="line">Random.province()</span><br><span class="line"><span class="comment">// =&gt; "吉林省"</span></span><br><span class="line"></span><br><span class="line">Random.city()</span><br><span class="line"><span class="comment">// =&gt; "石家庄市"</span></span><br><span class="line">Random.city(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; "海南省 三亚市"</span></span><br><span class="line"></span><br><span class="line">Random.county()</span><br><span class="line"><span class="comment">// =&gt; "西贡区"</span></span><br><span class="line">Random.county(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// =&gt; "广东省 中山市 -"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;模拟数据应该是开发中必有的情况= =&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;mockjs&quot;&gt;&lt;a href=&quot;#mockjs&quot; class=&quot;headerlink&quot; title=&quot;mockjs&quot;&gt;&lt;/a&gt;mockjs&lt;/h2&gt;&lt;blo
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="mock 数据" scheme="https://q-jason.github.io/blog/tags/mock-%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>酷库-涂鸦签名</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wl0030zxm87fuvh858/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wl0030zxm87fuvh858/</id>
    <published>2020-03-12T01:20:05.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="drawingboard-js"><a href="#drawingboard-js" class="headerlink" title="drawingboard.js"></a>drawingboard.js</h2><blockquote><p>github 好几年没更新了，但是差不多能满足需要<br><a href="https://github.com/Leimi/drawingboard.js" target="_blank" rel="noopener">https://github.com/Leimi/drawingboard.js</a><br><a href="https://www.npmjs.com/package/drawingboard.js" target="_blank" rel="noopener">https://www.npmjs.com/package/drawingboard.js</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;drawingboard-js&quot;&gt;&lt;a href=&quot;#drawingboard-js&quot; class=&quot;headerlink&quot; title=&quot;drawingboard.js&quot;&gt;&lt;/a&gt;drawingboard.js&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;githu
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="涂鸦签名" scheme="https://q-jason.github.io/blog/tags/%E6%B6%82%E9%B8%A6%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>经验-react</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93ut000hzxm8bwrqajqx/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93ut000hzxm8bwrqajqx/</id>
    <published>2020-03-08T06:37:31.000Z</published>
    <updated>2020-06-28T03:47:38.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue 和 react 是目前前端主要使用的框架<br>在国内还是 vue 用的较多，api 记得也比较熟练<br>vue 和 react 的作用和 api 基本差不多…<br>经常容易记混<br>这里记录一下，方便日后提醒</p></blockquote><h2 id="优雅的-css-module"><a href="#优雅的-css-module" class="headerlink" title="优雅的 css module"></a>优雅的 css module</h2><blockquote><p>react 不像 vue 有 scoped<br>create-react-app 默认集成了 css-module<br>个人感觉也是比较好使的一种方式</p></blockquote><ol><li>命名需要已 .module 的方式结尾并在组件中引入 styles 对象</li></ol><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/css-module-1.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="2"><li>在 jsx 中定义 className</li></ol><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/css-module-2.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="3"><li>在 css 文件中定义样式，要覆盖其他组件的样式则用 :global</li></ol><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/css-module-3.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="4"><li>覆盖其他组件的样式生成后</li></ol><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/css-module-4.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="5"><li>后代选择器类名生成后</li></ol><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/css-module-5.jpg" class=""><p>———————– 手动间隙 ———————–</p><ol start="6"><li>传入组件的 props 中涉及类名的，也需要使用 styles 对象的方式</li></ol><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/css-module-6.jpg" class=""><p>———————– 手动间隙 ———————–</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>建议采用后代选择器的方式定义类名，而非短横线<br>jsx 中会方便很多（对象写法以及 ide 代码提示）</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123; styles.banner &#125;&gt;</span><br><span class="line">  &#123;<span class="comment">/** 不方便 **/</span>&#125;</span><br><span class="line">  &lt;div className=&#123; styles[<span class="string">'banner-pic'</span>] &#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &#123;<span class="comment">/** 方便 **/</span>&#125;</span><br><span class="line">  &lt;div className=&#123; styles.pic &#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>———————– END ———————–</p><h2 id="事件传参以及-this-指向"><a href="#事件传参以及-this-指向" class="headerlink" title="事件传参以及 this 指向"></a>事件传参以及 this 指向</h2><ul><li>render 中写成函数封函数的方式，传递 event 对象和其他参数<img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/react%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82-1.jpg" class=""></li></ul><ul><li>如果事件处理函数中需要 this，需要写成下面这种形式，否则 this 指向错误（public class fields 语法）<img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/react%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82-2.jpg" class=""></li></ul><p>———————– END ———————–</p><h2 id="react-router-到底引入哪一个"><a href="#react-router-到底引入哪一个" class="headerlink" title="react-router 到底引入哪一个"></a>react-router 到底引入哪一个</h2><blockquote><p>只引入 react-router-dom 即可</p></blockquote><ul><li>react-router（实现路由的核心）</li><li>react-router-dom（在 react-router 的基础上多了一些组件）</li></ul><p>———————– END ———————–</p><h2 id="react-router-传参"><a href="#react-router-传参" class="headerlink" title="react-router 传参"></a>react-router 传参</h2><ul><li>显式 - path 传参<blockquote><p>用处：参数数量少的情况下<br>优点：刷新页面参数仍然存在，可清楚表达语义<br>缺点：path 参数位置固定，参数过多可能导致灵活问题</p></blockquote><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-1.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-2.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-3.jpg" class=""></li></ul><hr><ul><li>显式 - 查询字符串传参<blockquote><p>用处：参数数量多的情况下<br>优点：刷新页面参数仍然存在<br>缺点：不如 path 传参语义性强</p></blockquote><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-4.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-5.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-6.jpg" class=""></li></ul><hr><ul><li>隐式 - state 传参<blockquote><p>用处：参数保密 / 参数数量多的情况<br>优点：对象传参，写起来简单，保证参数安全性<br>缺点：页面刷新后参数失效</p></blockquote><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-7.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-8.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-9.jpg" class=""></li></ul><p>———————– END ———————–</p><h2 id="react-router-js-跳转"><a href="#react-router-js-跳转" class="headerlink" title="react-router js 跳转"></a>react-router js 跳转</h2><h3 id="组件中"><a href="#组件中" class="headerlink" title="组件中"></a>组件中</h3><blockquote><p>在页面级组件上，默认已有 props.history<br>在非页面级组件中，使用 withRouter 封装后会给 props 设置 history 属性</p></blockquote><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/js%E8%B7%B3%E8%BD%AC-1.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/js%E8%B7%B3%E8%BD%AC-2.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/js%E8%B7%B3%E8%BD%AC-3.jpg" class=""><p>———————– 手动间隔 ———————–</p><h3 id="非组件中"><a href="#非组件中" class="headerlink" title="非组件中"></a>非组件中</h3><blockquote><p>在其他 js 中，可以使用 history 库来实现<br>react-router 有依赖不用自己安装，直接引入即可</p></blockquote><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/js%E8%B7%B3%E8%BD%AC-4.jpg" class=""><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/js%E8%B7%B3%E8%BD%AC-5.jpg" class=""><p>———————– END ———————–</p><h2 id="react-router-路由嵌套"><a href="#react-router-路由嵌套" class="headerlink" title="react-router 路由嵌套"></a>react-router 路由嵌套</h2><ul><li>主路由<img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-1.jpg" class=""></li></ul><hr><ul><li>子路由<img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-2.jpg" class=""></li></ul><h2 id="react-redux-使用步骤"><a href="#react-redux-使用步骤" class="headerlink" title="react-redux 使用步骤"></a>react-redux 使用步骤</h2><blockquote><p>我个人不太喜欢在用常量表示 type<br>需要多一层定义引用…着实麻烦<br>个人喜欢通过 mapStateToProps 和 mapDispatchToProps 引入全部的 state 和 actions<br>这样的缺点是会混淆组件内部的状态和方法来源，但是可以通过加前缀的形式区分<br>比如: state: { storeValue }, actions: { setStoreValue }</p></blockquote><ol><li>引入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save redux</span><br><span class="line">npm i --save react-redux</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="2"><li>创建 /store/reducer.js 文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  storeValue: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'storeValue'</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">value</span>: action.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="3"><li>创建 /store/actions.js 文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setStoreValue = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">'storeValue'</span>,</span><br><span class="line">    value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="4"><li>创建 /store/index.js 文件<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 默认引用全部的 state 和 actions **/</span></span><br><span class="line"><span class="keyword">let</span> mapStateToProps = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mapDispatchToProps = <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  store,</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="5"><li>将 Provider 包裹在 App 组件的外侧，同时传入 /store/index.js 暴露的 store 作为 prop<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></li></ol><p>———————– 手动间隔 ———————–</p><ol start="6"><li>在组件中使用 connect 方法连接 redux（通过 props 的方式传入组件）<blockquote><p>this.props.storeValue<br>this.props.setStoreValue</p></blockquote><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapStateToProps, mapDispatchToProps &#125; <span class="keyword">from</span> <span class="string">'../../store'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Page</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** .. **/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Page)</span><br></pre></td></tr></table></figure></li></ol><p>———————– END ———————–</p><h2 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h2><ul><li>创建环境变量文件</li></ul><img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-1.jpg" class=""><hr><ul><li>自定义的环境变量要以 “REACT_APP_” 作为开头<img src="/blog/article/ckbyj93ut000hzxm8bwrqajqx/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-2.jpg" class=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;vue 和 react 是目前前端主要使用的框架&lt;br&gt;在国内还是 vue 用的较多，api 记得也比较熟练&lt;br&gt;vue 和 react 的作用和 api 基本差不多…&lt;br&gt;经常容易记混&lt;br&gt;这里记录一下，方便日后提醒&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="react" scheme="https://q-jason.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>酷库-倒计时</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wa002hzxm8bromhsnd/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wa002hzxm8bromhsnd/</id>
    <published>2020-02-27T04:40:19.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>倒计时是项目中较为常见的需求<br>要是手动计算，麻烦的要死…<br>这里记录几个解决方案</p></blockquote><h2 id="countdown（原生）"><a href="#countdown（原生）" class="headerlink" title="countdown（原生）"></a>countdown（原生）</h2><blockquote><p>github: <a href="https://github.com/mckamey/countdownjs" target="_blank" rel="noopener">https://github.com/mckamey/countdownjs</a><br>npm: <a href="https://www.npmjs.com/package/countdown" target="_blank" rel="noopener">https://www.npmjs.com/package/countdown</a></p></blockquote><blockquote><p>万能解决方案，用就对了<br>下面记录用法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> countdown <span class="keyword">from</span> <span class="string">'countdown'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 可已通过 clearInterval(timer) 取消倒计时 **/</span></span><br><span class="line"><span class="keyword">let</span> timer = countdown(</span><br><span class="line">  <span class="comment">// 结束时间</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">10000</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 每一秒会触发的函数</span></span><br><span class="line">  <span class="comment">// result 为倒计时数据</span></span><br><span class="line">  <span class="comment">// 自定义显示逻辑</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最大单位</span></span><br><span class="line">  <span class="comment">// 比如说最大单位只想到 "日"</span></span><br><span class="line">  <span class="comment">// 就删除 YEARS 和 MONTHS</span></span><br><span class="line">  <span class="comment">// 下面的 "|" 是位运算符（作者底蕴好强大...）</span></span><br><span class="line">  countdown.YEARS | countdown.MONTHS | countdown.DAYS |</span><br><span class="line">  countdown.HOURS | countdown.MINUTES | countdown.SECONDS</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="chenfengyuan-vue-countdown（vue）"><a href="#chenfengyuan-vue-countdown（vue）" class="headerlink" title="@chenfengyuan/vue-countdown（vue）"></a>@chenfengyuan/vue-countdown（vue）</h2><blockquote><p>github: <a href="https://fengyuanchen.github.io/vue-countdown" target="_blank" rel="noopener">https://fengyuanchen.github.io/vue-countdown</a><br>npm: <a href="https://www.npmjs.com/package/@chenfengyuan/vue-countdown" target="_blank" rel="noopener">https://www.npmjs.com/package/@chenfengyuan/vue-countdown</a></p></blockquote><blockquote><p>vue 倒计时组件<br>也非常的强大，通过 slot 可自定义样式</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;倒计时是项目中较为常见的需求&lt;br&gt;要是手动计算，麻烦的要死…&lt;br&gt;这里记录几个解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;countdown（原生）&quot;&gt;&lt;a href=&quot;#countdown（原生）&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="倒计时" scheme="https://q-jason.github.io/blog/tags/%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>电影-我想让大家都开心</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93u50000zxm8b2g294bz/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93u50000zxm8b2g294bz/</id>
    <published>2020-02-11T14:42:17.000Z</published>
    <updated>2020-06-28T03:47:38.213Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/article/ckbyj93u50000zxm8b2g294bz/1.jpg" class=""><img src="/blog/article/ckbyj93u50000zxm8b2g294bz/2.jpg" class=""><img src="/blog/article/ckbyj93u50000zxm8b2g294bz/3.jpg" class=""><img src="/blog/article/ckbyj93u50000zxm8b2g294bz/4.jpg" class=""><img src="/blog/article/ckbyj93u50000zxm8b2g294bz/5.jpg" class=""><img src="/blog/article/ckbyj93u50000zxm8b2g294bz/6.jpg" class=""><img src="/blog/article/ckbyj93u50000zxm8b2g294bz/7.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/article/ckbyj93u50000zxm8b2g294bz/1.jpg&quot; class=&quot;&quot;&gt;

&lt;img src=&quot;/blog/article/ckbyj93u50000zxm8b2g294bz/2.jpg&quot; class=&quot;&quot;&gt;

&lt;img
      
    
    </summary>
    
    
      <category term="电影" scheme="https://q-jason.github.io/blog/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="https://q-jason.github.io/blog/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>经验-node-sass</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93uo000czxm8gmbk0l1d/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93uo000czxm8gmbk0l1d/</id>
    <published>2020-01-30T05:17:52.000Z</published>
    <updated>2020-06-28T03:47:38.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我习惯在项目中使用 sass 作为 css 高级语言<br>通常 sass 基于 node-sass 这个库<br>但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上<br>原因有缺少啥 gyp 环境，node-sass 下载超时等<br>这里记录一下，以后出现后，跟着跑即可</p></blockquote><blockquote><p>参考网址<br><a href="https://www.jianshu.com/p/92afe92db99f" target="_blank" rel="noopener">https://www.jianshu.com/p/92afe92db99f</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若 npm 速度慢建议换源</span></span><br><span class="line">npm i -g nrm</span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line">npm install -g node-gyp</span><br><span class="line">npm install --global --production windows-build-tools</span><br><span class="line">npm uninstall node-sass</span><br><span class="line">npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我习惯在项目中使用 sass 作为 css 高级语言&lt;br&gt;通常 sass 基于 node-sass 这个库&lt;br&gt;但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上&lt;br&gt;原因有缺少啥 gyp 环境，node-sass 下载超
      
    
    </summary>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="npm" scheme="https://q-jason.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>酷库-移动端调试</title>
    <link href="https://q-jason.github.io/blog/article/ckbyj93wo0036zxm8brxbbezm/"/>
    <id>https://q-jason.github.io/blog/article/ckbyj93wo0036zxm8brxbbezm/</id>
    <published>2020-01-30T05:14:20.000Z</published>
    <updated>2020-06-28T03:47:38.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发中调试是必不可免的<br>pc端可以直接通过游览器 F12 控制台调试<br>移动端通常没有方便的调试手段<br>这里记录一个非常好用的调试库</p></blockquote><h2 id="eruda"><a href="#eruda" class="headerlink" title="eruda"></a>eruda</h2><blockquote><p>移动端调试工具（js库），比 vconsole 更好用<br><a href="https://eruda.liriliri.io/" target="_blank" rel="noopener">https://eruda.liriliri.io/</a><br><a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a><br><a href="https://www.npmjs.com/package/eruda" target="_blank" rel="noopener">https://www.npmjs.com/package/eruda</a></p></blockquote><h2 id="eruda-webpack-plugin"><a href="#eruda-webpack-plugin" class="headerlink" title="eruda-webpack-plugin"></a>eruda-webpack-plugin</h2><blockquote><p>eruda webpack 插件（更建议使用这个方式，不影响业务代码）<br><a href="https://github.com/huruji/eruda-webpack-plugin" target="_blank" rel="noopener">https://github.com/huruji/eruda-webpack-plugin</a><br><a href="https://www.npmjs.com/package/eruda-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/eruda-webpack-plugin</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发中调试是必不可免的&lt;br&gt;pc端可以直接通过游览器 F12 控制台调试&lt;br&gt;移动端通常没有方便的调试手段&lt;br&gt;这里记录一个非常好用的调试库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;eruda&quot;&gt;&lt;a href=&quot;#eruda&quot; 
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="调试技巧" scheme="https://q-jason.github.io/blog/tags/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
