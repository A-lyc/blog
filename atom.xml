<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qteam</title>
  
  <subtitle>博客</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://q-jason.github.io/blog/"/>
  <updated>2019-11-11T01:42:23.149Z</updated>
  <id>https://q-jason.github.io/blog/</id>
  
  <author>
    <name>jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>酷库-前端图片辅助库</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6eh0012wspx7ocbcbj1/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6eh0012wspx7ocbcbj1/</id>
    <published>2019-11-11T01:25:31.000Z</published>
    <updated>2019-11-11T01:42:23.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="smartcrop-js"><a href="#smartcrop-js" class="headerlink" title="smartcrop.js"></a>smartcrop.js</h2><blockquote><p><a href="https://github.com/jwagner/smartcrop.js" target="_blank" rel="noopener">https://github.com/jwagner/smartcrop.js</a><br>用途：根据传入的长宽比，计算出图片的主要内容区域<br>场景：主要用于响应式图片</p></blockquote><img src="/blog/article/ck2tri6eh0012wspx7ocbcbj1/smartcrop.jpg" class=""><img src="/blog/article/ck2tri6eh0012wspx7ocbcbj1/smartcrop-2.jpg" class=""><hr><h2 id="grade"><a href="#grade" class="headerlink" title="grade"></a>grade</h2><blockquote><p><a href="https://github.com/benhowdle89/grade" target="_blank" rel="noopener">https://github.com/benhowdle89/grade</a><br>用途：根据图片主题色生成渐变色<br>场景：主要用于图片背景</p></blockquote><img src="/blog/article/ck2tri6eh0012wspx7ocbcbj1/grade.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;smartcrop-js&quot;&gt;&lt;a href=&quot;#smartcrop-js&quot; class=&quot;headerlink&quot; title=&quot;smartcrop.js&quot;&gt;&lt;/a&gt;smartcrop.js&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>游览器 bfcache 机制</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6e4000jwspx0j8h9vkt/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6e4000jwspx0j8h9vkt/</id>
    <published>2019-11-08T01:36:31.000Z</published>
    <updated>2019-11-11T01:42:23.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文讨论 bfcache 机制带来的一些 bug</p></blockquote><h2 id="bfcache-是啥"><a href="#bfcache-是啥" class="headerlink" title="bfcache 是啥"></a>bfcache 是啥</h2><blockquote><p>是一个游览器机制<br>比如说从 a 网页去 b 网页，然后再点击 b 网页的回退按钮回到 a 网页<br>页面不会刷新，而是使用缓存，用意是提高用户体验<br>表单提交场景发生的比较多</p></blockquote><h2 id="例子：项目分析"><a href="#例子：项目分析" class="headerlink" title="例子：项目分析"></a>例子：项目分析</h2><blockquote><p>项目：后端模板 webApp 项目<br>前端：使用了 vue 做部分的效果(日期选择等，现成的组件)，页面上留有额外 input 供后端提取值<br>后端：使用了 php 模板渲染页面<br>结论：使用了较为混乱的开发方式，本以为使用额外 input 与后端进行解耦就可以顺利使用 vue 组件</p></blockquote><h2 id="例子：html结构"><a href="#例子：html结构" class="headerlink" title="例子：html结构"></a>例子：html结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue 组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 供后端提取值的额外 input --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="例子：bug-展示"><a href="#例子：bug-展示" class="headerlink" title="例子：bug 展示"></a>例子：bug 展示</h2><img src="/blog/article/ck2tri6e4000jwspx0j8h9vkt/demo.gif" class=""><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>找了半天原因应该是就是因为使用了混乱的开发方式，导致使正常的 bfcache 逻辑出错<br>最终想到放弃使用 bfcache 逻辑，每次都强制刷新页面即可解决这个问题<br>解决方案如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将此代码放到 head 标签靠上的位置</span></span><br><span class="line"><span class="comment">// 否则会加载额外的资源</span></span><br><span class="line"><span class="comment">// 此代码相当于使用 bfcache 机制的回调</span></span><br><span class="line"><span class="comment">// 使用 location.reload 重置页面</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.persisted || (<span class="built_in">window</span>.performance &amp;&amp;</span><br><span class="line">    <span class="built_in">window</span>.performance.navigation.type == <span class="number">2</span>)) &#123;</span><br><span class="line">    location.reload();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文讨论 bfcache 机制带来的一些 bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;bfcache-是啥&quot;&gt;&lt;a href=&quot;#bfcache-是啥&quot; class=&quot;headerlink&quot; title=&quot;bfcache 是啥&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="js" scheme="https://q-jason.github.io/blog/tags/js/"/>
    
      <category term="html" scheme="https://q-jason.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>傻傻分不清的 DOM 元素尺寸属性</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6du000dwspx4hpb1mgv/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6du000dwspx4hpb1mgv/</id>
    <published>2019-11-08T01:14:07.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要讨论以下属性</p></blockquote><ul><li>clientHeight / clientWidth</li><li>offsetHeight / offsetWidth</li><li>scrollHeight / scrollWidth</li></ul><h2 id="包罗万象"><a href="#包罗万象" class="headerlink" title="包罗万象"></a>包罗万象</h2><blockquote><p>看懂了就啥都明白了</p></blockquote><img src="/blog/article/ck2tri6du000dwspx4hpb1mgv/all.jpg" class=""><hr><h2 id="clientHeight-clientWidth"><a href="#clientHeight-clientWidth" class="headerlink" title="clientHeight / clientWidth"></a>clientHeight / clientWidth</h2><blockquote><p>包含 padding，不包含 border、margin、滚动条尺寸</p></blockquote><img src="/blog/article/ck2tri6du000dwspx4hpb1mgv/clientHeight-clientWidth.png" class=""><hr><h2 id="offsetHeight-offsetWidth"><a href="#offsetHeight-offsetWidth" class="headerlink" title="offsetHeight / offsetWidth"></a>offsetHeight / offsetWidth</h2><blockquote><p>包含 padding、border、滚动条尺寸，不包含 margin</p></blockquote><img src="/blog/article/ck2tri6du000dwspx4hpb1mgv/offsetHeight-offsetWidth.png" class=""><hr><h2 id="scrollHeight-scrollWidth"><a href="#scrollHeight-scrollWidth" class="headerlink" title="scrollHeight / scrollWidth"></a>scrollHeight / scrollWidth</h2><blockquote><p>此属性一般用于有滚动条的元素<br>返回滚动内容的总尺寸</p></blockquote><img src="/blog/article/ck2tri6du000dwspx4hpb1mgv/scrollHeight-scrollWidth.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;主要讨论以下属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;clientHeight / clientWidth&lt;/li&gt;
&lt;li&gt;offsetHeight / offsetWidth&lt;/li&gt;
&lt;li&gt;scrollHeight / s
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="js" scheme="https://q-jason.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue-spa-移动端理想的用户体验</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6dm0007wspxck40ee8f/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6dm0007wspxck40ee8f/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前前端的跨端技术层出不穷，开发快，对用户透明。<br>对前端开发者来说掌握的东西要更多了~</p></blockquote><blockquote><p>本文谈论一些原生移动 app 用户体验</p></blockquote><h2 id="体验分析"><a href="#体验分析" class="headerlink" title="体验分析"></a>体验分析</h2><blockquote><p>每天都会用各种 app，各种操作熟记于心<br>总结出以下网页不容易实现的需求</p></blockquote><ol><li>类似网页的历史记录，前进刷新网页，后退时使用历史缓存</li><li>前进或者后退（物理返回键）会有不同的切换效果（滑动切换）</li><li>点击物理返回键时若正处于 “模态对话框(dialog, alert)等”，不会返回页面，会先将对话框关闭</li></ol><h2 id="实现难点分析以及解决方案"><a href="#实现难点分析以及解决方案" class="headerlink" title="实现难点分析以及解决方案"></a>实现难点分析以及解决方案</h2><ol><li>vue keep-alive 无法实现前进刷新，后退使用缓存的 app 缓存逻辑<blockquote><p>这里可以使用 vue-navigation 实现</p></blockquote></li><li>前进和后退实现不同的切换效果<blockquote><p>vue transition 标签配合 vue-navigation 实现</p></blockquote></li><li>模态框逻辑，如何判断当前正在弹框，如何优雅的阻止切换切换并关闭模态框<blockquote><p>推荐 vue-create-api 这个库，本文例子中使用了 element-ui 中的 MessageBox 实现</p></blockquote></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p><a href="https://github.com/q-jason/code/tree/master/good-vue-app" target="_blank" rel="noopener">github</a></p></blockquote><iframe src="https://codesandbox.io/embed/github/q-jason/code/tree/master/good-vue-app?fontsize=14" width="100%" height="800" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前前端的跨端技术层出不穷，开发快，对用户透明。&lt;br&gt;对前端开发者来说掌握的东西要更多了~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文谈论一些原生移动 app 用户体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="前端" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://q-jason.github.io/blog/tags/vue/"/>
    
      <category term="spa" scheme="https://q-jason.github.io/blog/tags/spa/"/>
    
      <category term="用户体验" scheme="https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>window.opener</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6do0008wspx73q60qvz/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6do0008wspx73q60qvz/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目中经常存在着需要跳转网页然后再跳转回来的需求<br>比如说 oauth 登陆，微信支付宝等第三方登陆等<br>若采用通常的链接跳转，会失去当前页面的所有逻辑<br>回调跳转回来时页面也会重新加载<br>用户体验极差，代码逻辑也失去了连贯性</p></blockquote><blockquote><p>终于有一天。。我发现了 window.opener…..</p></blockquote><h2 id="window-open"><a href="#window-open" class="headerlink" title="window.open"></a>window.open</h2><blockquote><p>该方法将打开一个新的网页标签<br>注意：若用户未交互，游览器会阻止该方法的执行（游览器会认为不是用户的操作，认为是广告等）<br>解决：在用户交互事件中调用 window.open（click 等事件）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="window-opener"><a href="#window-opener" class="headerlink" title="window.opener"></a>window.opener</h2><blockquote><p>当前网页必须由 window.open 打开时才有<br>window.opener 指向 window.open 时的父 window 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener.alert(<span class="string">'提示'</span>)</span><br></pre></td></tr></table></figure><h2 id="实现（跳转网页回调）"><a href="#实现（跳转网页回调）" class="headerlink" title="实现（跳转网页回调）"></a>实现（跳转网页回调）</h2><h3 id="父窗口"><a href="#父窗口" class="headerlink" title="父窗口"></a>父窗口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义回调 cb 事件</span></span><br><span class="line"><span class="built_in">window</span>.callback = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮触发网页跳转，打开一个新页面</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="子窗口"><a href="#子窗口" class="headerlink" title="子窗口"></a>子窗口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发父窗口回调方法，并传入参数</span></span><br><span class="line"><span class="built_in">window</span>.opener.callback(<span class="comment">/* any */</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭当前子窗口</span></span><br><span class="line"><span class="built_in">window</span>.close();</span><br></pre></td></tr></table></figure><p>这样保证了页面的执行顺序，也保证了用户体验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;项目中经常存在着需要跳转网页然后再跳转回来的需求&lt;br&gt;比如说 oauth 登陆，微信支付宝等第三方登陆等&lt;br&gt;若采用通常的链接跳转，会失去当前页面的所有逻辑&lt;br&gt;回调跳转回来时页面也会重新加载&lt;br&gt;用户体验极差，代码逻辑也失去了连贯性&lt;/p
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="js" scheme="https://q-jason.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>五险一金扣除，实发工资算法</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6ds000cwspx1q5b1em7/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6ds000cwspx1q5b1em7/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前是 2019.10.03，本文记载着我理解的五险一金和税款的算法，具体比例会隔几年一调整，想要精确百度下即可。</p></blockquote><h2 id="个人承担比例"><a href="#个人承担比例" class="headerlink" title="个人承担比例"></a>个人承担比例</h2><ul><li>养老 = 8%</li><li>医疗 = 2%</li><li>失业 = 0.3%</li><li>一金 = 12%（该值非规定）</li><li>税款 = 0.03%（工资越高税率越高，具体百度吧）</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>应发工资 10000</p></blockquote><h3 id="五险"><a href="#五险" class="headerlink" title="五险"></a>五险</h3><ul><li>养老 10000 * 0.08 = 800</li><li>失业 10000 * 0.003 = 30</li><li>医疗 10000 * 0.02 = 200</li><li>生育和工伤不需要个人承担</li><li>总共 800 + 30 + 200 = 1030</li></ul><h3 id="公积金"><a href="#公积金" class="headerlink" title="公积金"></a>公积金</h3><blockquote><p>一金较为特殊，需要看公司定的缴纳基数（可能会按照比应发工资低的基数缴纳）</p></blockquote><ul><li>一金理想情况       10000 * 0.12</li><li>一金非理想情况   2600 * 0.12（2600是胡乱写的，具体要公司定）</li><li>总共（理想） 10000 * 0.12 = 1200</li></ul><h3 id="税款"><a href="#税款" class="headerlink" title="税款"></a>税款</h3><blockquote><p>这个较为复杂，目前应发工资超过 5000 才交税，税率为 3%<br>工资到达某档位后，税率也会加，10000 是 3%，具体百度吧<br>但是 3% 并不指的是应发工资（10000）的 3%，而是 应发工资 - 底数 - 五险一金扣款后 的剩余部分<br>看公式吧</p></blockquote><ul><li>(10000 - 5000 - 五险一金个人承担部分) * 0.03 = 所需要交纳的税款</li><li>(10000 - 5000 - 1030 - 1200) * 0.03 = 83.1</li></ul><h3 id="实发工资"><a href="#实发工资" class="headerlink" title="实发工资"></a>实发工资</h3><ul><li>应发工资 - 五险 - 公积金 - 税 = 实发工资</li><li>10000 - 1030 - 1200 - 83.1 = 7686.9</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前是 2019.10.03，本文记载着我理解的五险一金和税款的算法，具体比例会隔几年一调整，想要精确百度下即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;个人承担比例&quot;&gt;&lt;a href=&quot;#个人承担比例&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="职场经验" scheme="https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="职场" scheme="https://q-jason.github.io/blog/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>:hover伪类选择器，移动端的表现</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6d40000wspx99eg9n3y/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6d40000wspx99eg9n3y/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里主要记载一个响应式项目中碰到的下拉菜单的问题</p></blockquote><blockquote><p>美化下拉菜单在项目中是常见的需求<br>常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单<br>但是 :hover 在移动端兼容并不友好<br>经过测试，在除 safari 的游览器中，兼容还比较好，唯独 safari 出现了问题…</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><img src="/blog/article/ck2tri6d40000wspx99eg9n3y/example.gif" class=""><hr><h2 id="移动端-safari-的奇怪表现"><a href="#移动端-safari-的奇怪表现" class="headerlink" title="移动端 safari 的奇怪表现"></a>移动端 safari 的奇怪表现</h2><ul><li>必须是 a 元素才能触发 :hover</li><li>将元素修改成了 a 之后，点击页面其他处无法失去 :hover 焦点，除非点击其他 按钮 或 input</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>使用 js 事件加 class 的方式实现，代替 :hover</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这里主要记载一个响应式项目中碰到的下拉菜单的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;美化下拉菜单在项目中是常见的需求&lt;br&gt;常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单&lt;br&gt;但是 
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="css" scheme="https://q-jason.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>uni-app-心得</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6dd0002wspxbiff5o51/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6dd0002wspxbiff5o51/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="待"><a href="#待" class="headerlink" title="待"></a>待</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;待&quot;&gt;&lt;a href=&quot;#待&quot; class=&quot;headerlink&quot; title=&quot;待&quot;&gt;&lt;/a&gt;待&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="微信小程序" scheme="https://q-jason.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="vue" scheme="https://q-jason.github.io/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vh单位的可信度</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6dj0006wspxf9reh1ro/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6dj0006wspxf9reh1ro/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vw, vh 都是自适应页面的利器<br>vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>手机游览器的 100vh 总会高出一截<br>经过查阅，好像是算上了地址栏的高度，并且不准备修复，被认为是正常的。</p></blockquote><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"height: 100vh"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'innerHeight: '</span> + innerHeight + <span class="string">'\n'</span> + <span class="string">'test元素高度: '</span> + $(<span class="string">'#test'</span>).css(<span class="string">'height'</span>));</span><br></pre></td></tr></table></figure><h3 id="PC端测试"><a href="#PC端测试" class="headerlink" title="PC端测试"></a>PC端测试</h3><img src="/blog/article/ck2tri6dj0006wspxf9reh1ro/pc.jpg" class=""><hr><h3 id="移动端测试"><a href="#移动端测试" class="headerlink" title="移动端测试"></a>移动端测试</h3><img src="/blog/article/ck2tri6dj0006wspxf9reh1ro/phone.jpg" class=""><hr><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><blockquote><p>使用 js 赋值 innerHeight</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.height-full'</span>).css(<span class="string">'height'</span>, <span class="built_in">window</span>.innerHeight);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;vw, vh 都是自适应页面的利器&lt;br&gt;vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="css" scheme="https://q-jason.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>移动端文字垂直居中的问题</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6e8000nwspx5sbp2iu0/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6e8000nwspx5sbp2iu0/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>移动端开发时经常会碰到文字居上的问题<br>经过测试发现，主要是使用了独特的 font-family 引起的</p></blockquote><h2 id="移动端最佳-font-family-设置"><a href="#移动端最佳-font-family-设置" class="headerlink" title="移动端最佳 font-family 设置"></a>移动端最佳 font-family 设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: </span><br><span class="line">    -apple-system, BlinkMacSystemFont,</span><br><span class="line">    <span class="string">"PingFang SC"</span>, <span class="string">"Helvetica Neue"</span>,</span><br><span class="line">    STHeiti, <span class="string">"Microsoft Yahei"</span>,</span><br><span class="line">    Tahoma,Simsun,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端-input-placeholder-居上"><a href="#移动端-input-placeholder-居上" class="headerlink" title="移动端 input placeholder 居上"></a>移动端 input placeholder 居上</h2><blockquote><p>经过测试是由于 placeholder 默认的 line-height 导致的</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* safari placeholder 偏上的问题 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><h3 id="android-未设置特殊字体"><a href="#android-未设置特殊字体" class="headerlink" title="android 未设置特殊字体"></a>android 未设置特殊字体</h3><img src="/blog/article/ck2tri6e8000nwspx5sbp2iu0/android-good.jpg" class=""><hr><h3 id="android-设置了特殊字体"><a href="#android-设置了特殊字体" class="headerlink" title="android 设置了特殊字体"></a>android 设置了特殊字体</h3><img src="/blog/article/ck2tri6e8000nwspx5sbp2iu0/android-bad.jpg" class=""><hr><h3 id="ios-未设置特殊字体"><a href="#ios-未设置特殊字体" class="headerlink" title="ios 未设置特殊字体"></a>ios 未设置特殊字体</h3><img src="/blog/article/ck2tri6e8000nwspx5sbp2iu0/ios-good.jpg" class=""><hr><h3 id="ios-设置了特殊字体"><a href="#ios-设置了特殊字体" class="headerlink" title="ios 设置了特殊字体"></a>ios 设置了特殊字体</h3><img src="/blog/article/ck2tri6e8000nwspx5sbp2iu0/ios-bad.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;移动端开发时经常会碰到文字居上的问题&lt;br&gt;经过测试发现，主要是使用了独特的 font-family 引起的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;移动端最佳-font-family-设置&quot;&gt;&lt;a href=&quot;#移动端最佳-font-
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="css" scheme="https://q-jason.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>酷库-scrollspy(滚动监听)</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6eb000qwspxf0wq8fwq/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6eb000qwspxf0wq8fwq/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gumshoe"><a href="#gumshoe" class="headerlink" title="gumshoe"></a>gumshoe</h2><blockquote><p><a href="https://github.com/cferdinandi/gumshoe" target="_blank" rel="noopener">https://github.com/cferdinandi/gumshoe</a><br>项目中经常有需求的锚点滚动监听需求<br>我之前尝试过用 ScrollReveal 实现，但是逻辑不太一样</p></blockquote><img src="/blog/article/ck2tri6eb000qwspxf0wq8fwq/example.gif" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;gumshoe&quot;&gt;&lt;a href=&quot;#gumshoe&quot; class=&quot;headerlink&quot; title=&quot;gumshoe&quot;&gt;&lt;/a&gt;gumshoe&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cferdinan
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>低版本 IE 开发辅助库</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6ef000ywspxayrjc3pa/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6ef000ywspxayrjc3pa/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>万恶的 IE…..</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>css 圆角 和 阴影（PIE - 实现圆角和阴影）</li><li>css background-size（background-size-htc - 实现背景大小设置，可惜只兼容到 IE8）</li><li>css border-spacing IE 6 7 不支持（给 td 设置高度模拟）</li><li>css border-box （box-sizing-polyfill）</li><li>表单元素的 placeholder（jquery.placeholder - 简单粗暴）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;万恶的 IE…..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;css 圆角 和 阴影（PIE - 实现
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>到底是谁的滚动条？</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6e0000hwspx1gloclu7/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6e0000hwspx1gloclu7/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网页中默认的滚动条到底是哪个元素的？<br>body？html？</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>打印输出各大游览器 body 和 html 标签的 scrollTop 属性</p></blockquote><h3 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h3><img src="/blog/article/ck2tri6e0000hwspx1gloclu7/chrome.jpg" class=""><hr><h3 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h3><img src="/blog/article/ck2tri6e0000hwspx1gloclu7/firefox.jpg" class=""><hr><h3 id="ie11"><a href="#ie11" class="headerlink" title="ie11"></a>ie11</h3><img src="/blog/article/ck2tri6e0000hwspx1gloclu7/ie11.jpg" class=""><hr><h3 id="safari"><a href="#safari" class="headerlink" title="safari"></a>safari</h3><img src="/blog/article/ck2tri6e0000hwspx1gloclu7/safari.jpg" class=""><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>除去 safari 默认滚动条都是 html 元素的<br>只有 safari 这个奇葩滚动条是使用 body 元素的<br>为啥 safari 这个奇葩总会有各种有问题……</p></blockquote><h2 id="优雅的获取页面滚动位置"><a href="#优雅的获取页面滚动位置" class="headerlink" title="优雅的获取页面滚动位置"></a>优雅的获取页面滚动位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 IE</span></span><br><span class="line"><span class="built_in">window</span>.scrollY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE8以及以下</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容性最好的写法</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop;</span><br></pre></td></tr></table></figure><h2 id="优雅的滚动页面"><a href="#优雅的滚动页面" class="headerlink" title="优雅的滚动页面"></a>优雅的滚动页面</h2><h3 id="原生方法（推荐）"><a href="#原生方法（推荐）" class="headerlink" title="原生方法（推荐）"></a>原生方法（推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这俩货是一样的....</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo(x, y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相对滚动</span></span><br><span class="line"><span class="built_in">window</span>.scrollBy(offsetX, offsetY)</span><br></pre></td></tr></table></figure><h3 id="直接赋值（不推荐）"><a href="#直接赋值（不推荐）" class="headerlink" title="直接赋值（不推荐）"></a>直接赋值（不推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome, ie, 火狐 ...</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 奇葩 safari</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="number">500</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;网页中默认的滚动条到底是哪个元素的？&lt;br&gt;body？html？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;block
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="js" scheme="https://q-jason.github.io/blog/tags/js/"/>
    
      <category term="html" scheme="https://q-jason.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>酷库-vue</title>
    <link href="https://q-jason.github.io/blog/article/ck2tri6ed000vwspxce55e6us/"/>
    <id>https://q-jason.github.io/blog/article/ck2tri6ed000vwspxce55e6us/</id>
    <published>2019-11-07T01:06:15.000Z</published>
    <updated>2019-11-11T01:42:23.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UI库"><a href="#UI库" class="headerlink" title="UI库"></a>UI库</h2><h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3><blockquote><p><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">https://github.com/ElemeFE/element</a><br>主要用于 PC 端项目<br>个人认为其中的 messageBox (弹框消息盒子) 组件特别好用<br>移动端改改样式其实也可以正常使用</p></blockquote><h3 id="vant-ui"><a href="#vant-ui" class="headerlink" title="vant-ui"></a>vant-ui</h3><blockquote><p><a href="https://github.com/youzan/vant" target="_blank" rel="noopener">https://github.com/youzan/vant</a><br>主要用于移动端项目<br>拥有大量的实用组件</p></blockquote><h3 id="cube-ui"><a href="#cube-ui" class="headerlink" title="cube-ui"></a>cube-ui</h3><blockquote><p><a href="https://github.com/didi/cube-ui" target="_blank" rel="noopener">https://github.com/didi/cube-ui</a><br>主要用于移动端项目<br>拥有大量实用组件</p></blockquote><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><h3 id="vee-validate"><a href="#vee-validate" class="headerlink" title="vee-validate"></a>vee-validate</h3><blockquote><p><a href="https://github.com/logaretm/vee-validate" target="_blank" rel="noopener">https://github.com/logaretm/vee-validate</a><br>主要用于表单验证，使用起来十分优雅方便，可嵌套几乎任何 ui 库使用<br>内置了大量的规则，并实现了国际化</p></blockquote><hr><h2 id="函数式调用"><a href="#函数式调用" class="headerlink" title="函数式调用"></a>函数式调用</h2><h3 id="vue-create-api-★"><a href="#vue-create-api-★" class="headerlink" title="vue-create-api ★"></a>vue-create-api ★</h3><blockquote><p><a href="https://github.com/cube-ui/vue-create-api" target="_blank" rel="noopener">https://github.com/cube-ui/vue-create-api</a><br>强烈推荐<br>作用是将组件函数式调用，主要用于弹框等，可以设置单例模式。</p></blockquote><hr><h2 id="时间操作、格式化"><a href="#时间操作、格式化" class="headerlink" title="时间操作、格式化"></a>时间操作、格式化</h2><h3 id="vue-moment"><a href="#vue-moment" class="headerlink" title="vue-moment"></a>vue-moment</h3><blockquote><p><a href="https://github.com/brockpetrie/vue-moment" target="_blank" rel="noopener">https://github.com/brockpetrie/vue-moment</a><br>将 moment 封装为 js 过滤器</p></blockquote><hr><h2 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h2><h3 id="vuex-persistedstate"><a href="#vuex-persistedstate" class="headerlink" title="vuex-persistedstate"></a>vuex-persistedstate</h3><blockquote><p><a href="https://github.com/robinvdvleuten/vuex-persistedstate" target="_blank" rel="noopener">https://github.com/robinvdvleuten/vuex-persistedstate</a><br>主要用于 vuex 离线存储<br>例如：存储用户状态 token 等</p></blockquote><hr><h2 id="拖拽排序"><a href="#拖拽排序" class="headerlink" title="拖拽排序"></a>拖拽排序</h2><h3 id="Vue-Draggable"><a href="#Vue-Draggable" class="headerlink" title="Vue.Draggable"></a>Vue.Draggable</h3><blockquote><p><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">https://github.com/SortableJS/Vue.Draggable</a><br>用于拖拽排序场景，高星库</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;UI库&quot;&gt;&lt;a href=&quot;#UI库&quot; class=&quot;headerlink&quot; title=&quot;UI库&quot;&gt;&lt;/a&gt;UI库&lt;/h2&gt;&lt;h3 id=&quot;element-ui&quot;&gt;&lt;a href=&quot;#element-ui&quot; class=&quot;headerlink&quot; title=&quot;e
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="vue" scheme="https://q-jason.github.io/blog/tags/vue/"/>
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"/>
    
  </entry>
  
</feed>
