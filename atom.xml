<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qteam</title>
  
  <subtitle>博客</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://q-jason.github.io/blog/"/>
  <updated>2020-02-07T08:34:19.949Z</updated>
  <id>https://q-jason.github.io/blog/</id>
  
  <author>
    <name>jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>心得-node-sass安装不上</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu480007z9vcemai7vi6/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu480007z9vcemai7vi6/</id>
    <published>2020-01-30T05:17:52.000Z</published>
    <updated>2020-02-07T08:34:19.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我习惯在项目中使用 sass 作为 css 高级语言<br>通常 sass 基于 node-sass 这个库<br>但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上<br>原因有缺少啥 gyp 环境，node-sass 下载超时等<br>这里记录一下，以后出现后，跟着跑即可</p></blockquote><blockquote><p>参考网址<br><a href="https://www.jianshu.com/p/92afe92db99f" target="_blank" rel="noopener">https://www.jianshu.com/p/92afe92db99f</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若 npm 速度慢建议换源</span></span><br><span class="line">npm i -g nrm</span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line">npm install -g node-gyp</span><br><span class="line">npm install --global --production windows-build-tools</span><br><span class="line">npm uninstall node-sass</span><br><span class="line">npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我习惯在项目中使用 sass 作为 css 高级语言&lt;br&gt;通常 sass 基于 node-sass 这个库&lt;br&gt;但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上&lt;br&gt;原因有缺少啥 gyp 环境，node-sass 下载超
      
    
    </summary>
    
    
    
      <category term="npm" scheme="https://q-jason.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>酷库-移动端调试</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu5j0027z9vc3x5858on/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu5j0027z9vc3x5858on/</id>
    <published>2020-01-30T05:14:20.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发中调试是必不可免的<br>pc端可以直接通过游览器 F12 控制台调试<br>移动端通常没有方便的调试手段<br>这里记录一个非常好用的调试库</p></blockquote><h2 id="eruda"><a href="#eruda" class="headerlink" title="eruda"></a>eruda</h2><blockquote><p>移动端调试工具（js库），比 vconsole 更好用<br><a href="https://eruda.liriliri.io/" target="_blank" rel="noopener">https://eruda.liriliri.io/</a><br><a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a><br><a href="https://www.npmjs.com/package/eruda" target="_blank" rel="noopener">https://www.npmjs.com/package/eruda</a></p></blockquote><h2 id="eruda-webpack-plugin"><a href="#eruda-webpack-plugin" class="headerlink" title="eruda-webpack-plugin"></a>eruda-webpack-plugin</h2><blockquote><p>eruda webpack 插件（更建议使用这个方式，不影响业务代码）<br><a href="https://github.com/huruji/eruda-webpack-plugin" target="_blank" rel="noopener">https://github.com/huruji/eruda-webpack-plugin</a><br><a href="https://www.npmjs.com/package/eruda-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/eruda-webpack-plugin</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发中调试是必不可免的&lt;br&gt;pc端可以直接通过游览器 F12 控制台调试&lt;br&gt;移动端通常没有方便的调试手段&lt;br&gt;这里记录一个非常好用的调试库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;eruda&quot;&gt;&lt;a href=&quot;#eruda&quot; 
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="调试" scheme="https://q-jason.github.io/blog/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>心得-奇怪的 input[type=&quot;number&quot;] 元素 min 和 max 属性</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4r000rz9vcguwo4zla/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4r000rz9vcguwo4zla/</id>
    <published>2020-01-19T08:30:32.000Z</published>
    <updated>2020-02-07T08:34:19.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讨论 input[type=”number”] 元素的 min 和 max 属性<br>2020.01.19 这天引起了我严重的不适…..</p></blockquote><h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>input 的属性 min 和 max 不能限制用户输入，只能按上下键时限制范围<br>这在平常项目中是无法忍受的<br>更多的时候是希望用户输入 &lt; min || &gt; max 时 input 的值自动修正<br>让值限制在 min 和 max 中<br>使用原生的 min 和 max 是无法满足需求了<br>只能自己写，然后就会发现坑就来了<br>html input 标签设计时应该就发现了这个问题…<br>所以原生 min 和 max 表现这么奇葩</p><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><blockquote><p>当你使用 js 自动根据 min 和 max 修正了值后…</p></blockquote><p>一个 input 元素<br>你想让他 min = 20、max = 100<br>当前 value 为空<br>你想输入 83 这个数字<br>首先输入 8<br>触发 min 逻辑，值会自动重置为 20<br>然后就怎么也输入不对了…</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>放弃由 js 修正值的想法….<br>在输入、提交时<br>使用错误提示，引导用户修改….</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要讨论 input[type=”number”] 元素的 min 和 max 属性&lt;br&gt;2020.01.19 这天引起了我严重的不适…..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题由来&quot;&gt;&lt;a href=&quot;#问题由来&quot; cl
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>心得-赋值inputEl.value</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4y0016z9vc1amy2q5z/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4y0016z9vc1amy2q5z/</id>
    <published>2020-01-17T02:56:08.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>手动赋值 input.value 是项目中常见的场景<br>但是直接赋值的话不会触发 input 事件，导致现实场景中逻辑异常<br>需要手动触发事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customEvent = <span class="built_in">document</span>.createEvent(<span class="string">'UIEvents'</span>)</span><br><span class="line">customEvent.initUIEvent(<span class="string">'input'</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">window</span>, <span class="number">1</span>)</span><br><span class="line">inputEl.dispatchEvent(customEvent)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;手动赋值 input.value 是项目中常见的场景&lt;br&gt;但是直接赋值的话不会触发 input 事件，导致现实场景中逻辑异常&lt;br&gt;需要手动触发事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javas
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>酷库-坐标格式转换</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu5c0021z9vc3u0h4ht6/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu5c0021z9vc3u0h4ht6/</id>
    <published>2020-01-03T13:27:47.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="coordtransform"><a href="#coordtransform" class="headerlink" title="coordtransform"></a>coordtransform</h2><blockquote><p><a href="https://github.com/wandergis/coordtransform" target="_blank" rel="noopener">https://github.com/wandergis/coordtransform</a><br>一个提供了百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具模块。<br>用就完事了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;coordtransform&quot;&gt;&lt;a href=&quot;#coordtransform&quot; class=&quot;headerlink&quot; title=&quot;coordtransform&quot;&gt;&lt;/a&gt;coordtransform&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="坐标转换" scheme="https://q-jason.github.io/blog/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>心得-http请求方式和传递数据类型</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu450006z9vc2tob0t97/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu450006z9vc2tob0t97/</id>
    <published>2019-12-21T14:24:51.000Z</published>
    <updated>2020-02-07T08:34:19.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前排英语提示<br>RESTful api<br>ruai si te fao api</p></blockquote><h2 id="请求类型以及语义"><a href="#请求类型以及语义" class="headerlink" title="请求类型以及语义"></a>请求类型以及语义</h2><h2 id="get-传参"><a href="#get-传参" class="headerlink" title="get 传参"></a>get 传参</h2><h2 id="post-传参"><a href="#post-传参" class="headerlink" title="post 传参"></a>post 传参</h2><h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前排英语提示&lt;br&gt;RESTful api&lt;br&gt;ruai si te fao api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;请求类型以及语义&quot;&gt;&lt;a href=&quot;#请求类型以及语义&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="全栈心得" scheme="https://q-jason.github.io/blog/categories/%E5%85%A8%E6%A0%88%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="http" scheme="https://q-jason.github.io/blog/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>酷库-api相关</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu51001dz9vca0gngaac/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu51001dz9vca0gngaac/</id>
    <published>2019-12-20T05:15:50.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><blockquote><p>github: <a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a><br>中文文档: <a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a><br>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br>用它就对了</p></blockquote><h2 id="axios-retry（axios-重试方案）"><a href="#axios-retry（axios-重试方案）" class="headerlink" title="axios-retry（axios 重试方案）"></a>axios-retry（axios 重试方案）</h2><blockquote><p>github: <a href="https://github.com/softonic/axios-retry" target="_blank" rel="noopener">https://github.com/softonic/axios-retry</a><br>基于 axios，若 axios 发送的请求失败，可根据配置自动重试</p></blockquote><ul><li>可以全局设置，也可以在请求时单独设置</li><li>shouldResetTimeout 的作用为每次重试重置超时，建议开启，否则控制台会变成 “机关枪”</li><li>默认只有 “5xx错误” 和 “网络错误” 才会重发，可设置 retryCondition 自定义重发逻辑</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> axiosRetry <span class="keyword">from</span> <span class="string">'axios-retry'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 全局设置 **/</span></span><br><span class="line">axiosRetry(axios, &#123;</span><br><span class="line">  <span class="comment">/** options **/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/abc'</span>, &#123;</span><br><span class="line">  <span class="comment">/** 单独设置 **/</span></span><br><span class="line">  <span class="string">'axios-retry'</span>: &#123;</span><br><span class="line">    retries: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-poller（重试、轮询）"><a href="#promise-poller（重试、轮询）" class="headerlink" title="promise-poller（重试、轮询）"></a>promise-poller（重试、轮询）</h2><blockquote><p><a href="https://github.com/joeattardi/promise-poller" target="_blank" rel="noopener">https://github.com/joeattardi/promise-poller</a><br>此库主要作用为基于 Promise 的重试解决方案<br>可用于任何 http 库<br>十分优雅的即可实现<br>也可以 “取巧” 用来当做轮询库使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return Promise</span></span><br><span class="line">promisePoller(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  返回 Promise 的任务函数</span></span><br><span class="line"><span class="comment">   *  若 reject 则会重试（可以一直 reject 实现无限轮询）</span></span><br><span class="line"><span class="comment">   *  直到 resolve</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  taskFn,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 重试请求间隔 **/</span></span><br><span class="line">  interval: <span class="number">500</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  失败重试次数</span></span><br><span class="line"><span class="comment">   *  这里设置为 Infinity 则可以实现无限重发（实现无限轮询）</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  retries: <span class="number">10</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 每次请求的超时 **/</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 整个任务的超时 **/</span></span><br><span class="line">  masterTimeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/axios/axi
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="http" scheme="https://q-jason.github.io/blog/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>心得-strapi</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu490008z9vc35h5gd8s/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu490008z9vc35h5gd8s/</id>
    <published>2019-12-19T06:51:16.000Z</published>
    <updated>2020-02-07T08:34:19.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>strapi 是我一直关注的 node cms 框架<br>我认为他将是未来迈向全栈之路的一个非常重要的 node 框架<br>从 alpha 版本开始一直关注更新<br>逐渐的推出了很多实用性很高，眼前一亮的特性、功能、插件<br>下面是学习笔记：</p></blockquote><h2 id="相关链接整理"><a href="#相关链接整理" class="headerlink" title="相关链接整理"></a>相关链接整理</h2><blockquote><p>官网：<a href="https://strapi.io/" target="_blank" rel="noopener">https://strapi.io/</a><br>github: <a href="https://github.com/strapi/strapi" target="_blank" rel="noopener">https://github.com/strapi/strapi</a><br>功能路线图：<a href="https://portal.productboard.com/strapi" target="_blank" rel="noopener">https://portal.productboard.com/strapi</a><br>插件库：<a href="https://strapi.io/marketplace" target="_blank" rel="noopener">https://strapi.io/marketplace</a></p></blockquote><h2 id="启用-–inspect-调试"><a href="#启用-–inspect-调试" class="headerlink" title="启用 –inspect 调试"></a>启用 –inspect 调试</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>项目根目录新建 index.js（代码在下面直接复制即可）</li><li>安装 nodemon (npm i –save-dev nodemon)</li><li>在 package.json scripts 中创建 dev 命令 nodemon –inspect index</li><li>在 cmd 运行 npm run dev 即可</li><li>打开谷歌游览器 node devTools 查看</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>使用上述方法，无法在管理界面添加字段，正确姿势是在 develop 命令下创建好后，转到 dev 命令调试</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'strapi/lib/commands/start'</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  develop 模式启动文件 --inspect 不好使</span></span><br><span class="line"><span class="comment"> *  build 经过测试应该传入 true</span></span><br><span class="line"><span class="comment"> *  watchAdmin 经过测试应该传入 undefined</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">// require('strapi/lib/commands/develop')(&#123;</span></span><br><span class="line"><span class="comment">//   build: true,</span></span><br><span class="line"><span class="comment">//   watchAdmin: undefined</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="左边侧边栏字段翻译"><a href="#左边侧边栏字段翻译" class="headerlink" title="左边侧边栏字段翻译"></a>左边侧边栏字段翻译</h2><blockquote><p>version: <a href="mailto:strapi@3.0.0-beta.18" target="_blank" rel="noopener">strapi@3.0.0-beta.18</a></p></blockquote><blockquote><p>默认创建好模型后，名字是英文的，只有 Users(用户) 字段是中文<br>改变语言后，字段也不会发生变化，一直是英文<br>当前版本已经可以很方便的自定义 admin 管理界面了<br>只需要在项目目录下，新建 admin 目录，里面放入需要替换的文件<br>strapi 就会用你自定义的文件替换原有的文件进行打包管理界面</p></blockquote><img src="/blog/article/ck6bwyu490008z9vc35h5gd8s/field-i18n-before.jpg" class=""><p>—– 手动间隙 —–</p><h3 id="翻译过程"><a href="#翻译过程" class="headerlink" title="翻译过程"></a>翻译过程</h3><ol><li>在项目根目录创建目录 admin/src/translations</li><li>将 strapi-admin/admin/src/translations 中的 en.json(必须有), zh-Hans.json(或其他语言) 复制过来</li><li>将字段显示的!!复数!!名字复制到 en.json 和 zh-Hans.json 中的 key，value 写需要翻译显示的名字</li><li>strapi develop –watch-admin(开发管理界面模式看下结果)</li><li>npm run build(翻译成功后，打包管理员界面)</li></ol><p>en.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Categories"</span>: <span class="string">"Categories"</span>,</span><br><span class="line">  <span class="attr">"Restaurants"</span>: <span class="string">"Restaurants"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zh-Hans.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Categories"</span>: <span class="string">"餐厅分类"</span>,</span><br><span class="line">  <span class="attr">"Restaurants"</span>: <span class="string">"餐厅"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/article/ck6bwyu490008z9vc35h5gd8s/field-i18n-after.jpg" class=""><p>—– 手动间隙 —–</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><blockquote><p>en.json 一定要复制并填值，因为 admin/components/LeftMenuLink/index.js 中<br>是根据 en.json 进行判断是否有无 key 值，若没有就不走国际化流程了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in node_modules/strapi-admin/admin/components/LeftMenuLink/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if messageId exists in en locale to prevent warning messages</span></span><br><span class="line"><span class="keyword">const</span> content = en[props.label] ? (</span><br><span class="line">  &lt;FormattedMessage</span><br><span class="line">    id=&#123;props.label&#125;</span><br><span class="line">    defaultMessage=<span class="string">"&#123;label&#125;"</span></span><br><span class="line">    values=&#123;&#123;</span><br><span class="line">      label: <span class="string">`<span class="subst">$&#123;props.label&#125;</span>`</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    className=<span class="string">"linkLabel"</span></span><br><span class="line">  /&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;span className=<span class="string">"linkLabel"</span>&gt;&#123;props.label&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;strapi 是我一直关注的 node cms 框架&lt;br&gt;我认为他将是未来迈向全栈之路的一个非常重要的 node 框架&lt;br&gt;从 alpha 版本开始一直关注更新&lt;br&gt;逐渐的推出了很多实用性很高，眼前一亮的特性、功能、插件&lt;br&gt;下面是学习笔记
      
    
    </summary>
    
    
      <category term="后端心得" scheme="https://q-jason.github.io/blog/categories/%E5%90%8E%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>酷库-echarts</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu53001iz9vc8b869z8j/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu53001iz9vc8b869z8j/</id>
    <published>2019-12-17T01:12:50.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>echarts 是非常强大、知名的图表库<br><a href="https://www.echartsjs.com/zh/index.html" target="_blank" rel="noopener">https://www.echartsjs.com/zh/index.html</a></p></blockquote><h2 id="官方文档阅读心得"><a href="#官方文档阅读心得" class="headerlink" title="官方文档阅读心得"></a>官方文档阅读心得</h2><blockquote><p>此库文档非常大…<br>一开始阅读总不知道从哪里下手<br>个人总结以下步骤</p></blockquote><ol><li>确定需求，从 <a href="https://www.echartsjs.com/examples/zh/index.html" target="_blank" rel="noopener">官方例子</a> 中，找到类似的作为参考，或直接复制配置套用</li><li>首先确认 series 属性，确认图表类型</li><li>模拟数据，设置图表类型对应的 data 属性</li><li>增加辅助组件(toolbox、timeline、title 等)</li><li>设置细节样式</li><li>增加交互逻辑</li></ol><h2 id="map-系列"><a href="#map-系列" class="headerlink" title="map 系列"></a>map 系列</h2><h3 id="省份地图-label-自定义位置"><a href="#省份地图-label-自定义位置" class="headerlink" title="省份地图 label 自定义位置"></a>省份地图 label 自定义位置</h3><blockquote><p>问题描述：<br>经常有需求会要求在省份、城市中心显示 label<br>map 系列中 label 的属性 position 和 offset 经测试偏移无效<br>并且一个个 “看着大概偏移” 改麻烦的很..<br>开启 legend 组件，这俩属性才有效，暂不知道为啥<br>legend 组件会造成区域上有一个点，也不太好去除</p></blockquote><img src="/blog/article/ck6bwyu53001iz9vc8b869z8j/map-label-center-use-label.jpg" class=""><blockquote><p>解决办法：<br>放弃使用默认 label，使用 markPoint 模拟 label<br>markPoint data 中项的属性 coord 可以自定义 mark 位置(百度坐标拾取器提取经纬度)<br>然后将图标隐藏（sysbom 空图片 或 大小设置为 1都行）</p></blockquote><img src="/blog/article/ck6bwyu53001iz9vc8b869z8j/map-label-center-use-markPoint.jpg" class=""><h3 id="series-散点无效"><a href="#series-散点无效" class="headerlink" title="series 散点无效"></a>series 散点无效</h3><blockquote><p>必须指定 geo，否则无效<br>暂时不知道 geo 和 series 中 type = map 有什么区别…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;echarts 是非常强大、知名的图表库&lt;br&gt;&lt;a href=&quot;https://www.echartsjs.com/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.echarts
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="图表" scheme="https://q-jason.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>心得-移动端适配心得</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4x0013z9vcej9y3ci1/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4x0013z9vcej9y3ci1/</id>
    <published>2019-12-05T01:18:37.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讨论移动端开发的页面适配技巧</p></blockquote><h2 id="为何要适配？"><a href="#为何要适配？" class="headerlink" title="为何要适配？"></a>为何要适配？</h2><blockquote><p>各个手机的屏幕大小不同，若用 px 单位，则会在各个屏幕下显示相同尺寸<br>往往会偏大或偏小，效果差劲，原因是因为没有等比例缩放(没有用相对单位)<br>相对单位有 vw，em，rem，% 等<br>保证其在不同屏幕尺寸下，按照一定的尺寸标准，等比例缩放，实现自动适配</p></blockquote><h2 id="适配方法"><a href="#适配方法" class="headerlink" title="适配方法"></a>适配方法</h2><blockquote><p>原理都是根据屏幕实际宽度来计算</p></blockquote><ol><li><p>vw 适配方案</p><blockquote><p>★★★★★<br>由于 1vw = 屏幕总宽的百分之一，是最适合用来适配的单位<br>兼容性不如 rem 单位</p></blockquote></li><li><p>rem 适配方案</p><blockquote><p>★★★★<br>通过改变在 html 标签改变 font-size 属性，实现等比例缩放<br>兼容性很好，是比较老的技术</p></blockquote></li></ol><h2 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h2><blockquote><p>不论是 vw 还是 rem 自己算是很麻烦的… 0.2497rem … 2.645514vw …<br>最好的开发体验是设计图多少就在项目中写多少<br>然后通过预处理语言自动转化为 vw 或 rem 单位</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote></blockquote><h3 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h3><blockquote><p>在项目中写设计图上的 px 单位<br>通过 postcss-px-to-viewport 预处理转为 vw单位<br>通过 viewport-units-buggyfill 在客户端照顾兼容性</p></blockquote><ul><li><p>预处理：postcss-px-to-viewport</p><blockquote><p><a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">https://github.com/evrone/postcss-px-to-viewport</a><br>postcss 的插件，只要写上参考设计图的宽度，自动将 px 单位转为 vw 单位</p></blockquote></li><li><p>客户端：viewport-units-buggyfill</p><blockquote><p><a href="https://github.com/rodneyrehm/viewport-units-buggyfill" target="_blank" rel="noopener">https://github.com/rodneyrehm/viewport-units-buggyfill</a><br>这是个 vw 单位的 polyfill，建议配合 postcss-px-to-viewport 使用<br>作用是分析加载的 css 文件，然后将 vw 单位在转为 px，放到 head 中<br>建议非必要不要使用，…有时会出现写莫名其妙的 bug</p></blockquote></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><blockquote><p>在项目中写设计图上的 px 单位<br>通过 postcss-px2rem，预处理转为 rem 单位<br>通过 hotcss，在客户端改变 html font-size</p></blockquote><ul><li><p>预处理：postcss-px2rem</p><blockquote><p><a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-px2rem</a><br>基于 postcss 的插件，设置好 1rem = ？px 后，自动转换 px 为 rem 单位</p></blockquote></li><li><p>客户端：hotcss</p><blockquote><p><a href="https://github.com/imochen/hotcss" target="_blank" rel="noopener">https://github.com/imochen/hotcss</a><br>rem 解决方案，按照 640 设计图动态设置 html 的 font-size 属性<br>并通过设置 viewport scale，解决移动端 1px 难题<br>可以设置屏幕最大尺寸，友好的适配桌面端<br>建议配合 postcss-px2rem 使用</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotcss 是已 640 设计图为标准的</span></span><br><span class="line"><span class="comment">// 1rem = 40px - 在屏幕为 640</span></span><br><span class="line"><span class="comment">// 1rem = 20px - 在屏幕为 320</span></span><br><span class="line"><span class="comment">// 1rem = 40px - 在屏幕为 320，但是 viewport scale = 0.5 的情况下，相当于 640</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若设计图尺寸不是 640</span></span><br><span class="line"><span class="comment">// 则需要自己换算</span></span><br><span class="line"><span class="comment">// 算法为： innerWidth * 20 / 320</span></span><br><span class="line"><span class="comment">// innerWidth 为屏幕实际尺寸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="comment">//   750 设计图</span></span><br><span class="line"><span class="comment">//   算法为：750 / 2 * 20 / 320</span></span><br><span class="line"><span class="comment">//   1rem = 46.875px  - 在屏幕为 750</span></span><br><span class="line"><span class="comment">//   1rem = 23.4375px - 在屏幕为 375</span></span><br><span class="line"><span class="comment">//   1rem = 46.875px  - 在屏幕为 375，但是 viewport scale = 0.5 的情况下，相当于 750</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要讨论移动端开发的页面适配技巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为何要适配？&quot;&gt;&lt;a href=&quot;#为何要适配？&quot; class=&quot;headerlink&quot; title=&quot;为何要适配？&quot;&gt;&lt;/a&gt;为何要适配？&lt;/h2&gt;&lt;blo
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>酷库-swiper</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu55001lz9vc0tlc01ku/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu55001lz9vc0tlc01ku/</id>
    <published>2019-11-28T08:11:03.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><blockquote><p><a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">https://github.com/nolimits4web/swiper</a><br>非常知名的触摸滑动解决方案</p></blockquote><h2 id="this-emit-方法"><a href="#this-emit-方法" class="headerlink" title="this.emit 方法"></a>this.emit 方法</h2><blockquote><p>该函数用于主动触发 swiper 的事件，文档中找不到….<br>比如在 transitionStart 中写好了切换函数，但是在 初始化(init) 中也想调用一次<br>就可以在 init 中使用 this.emit(‘transitionStart’) 来调用执行</p></blockquote><h2 id="mousewheel-心得"><a href="#mousewheel-心得" class="headerlink" title="mousewheel 心得"></a>mousewheel 心得</h2><ul><li>建议开启 mousewheel.releaseOnEdges 否则鼠标滚轮无效</li><li>写项目时使用 <a href="mailto:swiper@5.2.1" target="_blank" rel="noopener">swiper@5.2.1</a>，mousewheel 功能有些 bug，垂直滚动异常，降级即可解决</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;swiper&quot;&gt;&lt;a href=&quot;#swiper&quot; class=&quot;headerlink&quot; title=&quot;swiper&quot;&gt;&lt;/a&gt;swiper&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="切换" scheme="https://q-jason.github.io/blog/tags/%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>心得-前端对接</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4o000oz9vc22w2hfol/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4o000oz9vc22w2hfol/</id>
    <published>2019-11-26T01:53:05.000Z</published>
    <updated>2020-02-07T08:34:19.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做项目时<br>经常有需要后端提供接口才能继续往下进行的场景<br>本文主要讨论碰到该类场景，如何优雅的处理</p></blockquote><h2 id="后端各类情况分析"><a href="#后端各类情况分析" class="headerlink" title="后端各类情况分析"></a>后端各类情况分析</h2><ol><li><p>完美型: 已有成型接口</p><blockquote><p>分析：非常理想的开发体验，通常为重构项目等<br>方案：该情况下可以直接使用已有接口进行前端开发，无需特殊注意<br>星级：★★★★★</p></blockquote></li><li><p>常规型：没有成型接口，前后端同时进行，约定或者没有约定数据字段</p><blockquote><p>分析：通常为新项目<br>方案：本文着重探讨的情况，继续往下看吧<br>星级：★★★★</p></blockquote></li><li><p>缺陷型：没有成型接口，后端进度比前端慢，甚至慢很多，约定或者没有约定数据字段</p><blockquote><p>分析：后端项目多，任务重等场景<br>方案：本文着重探讨的情况，继续往下看吧<br>星级：★★</p></blockquote></li><li><p>不知所措型：没有成型接口，后端遥遥无期，甚至迷茫</p><blockquote><p>分析：后端极度不确定<br>方案：本文着重探讨的情况，继续往下看吧<br>星级：★</p></blockquote></li></ol><h2 id="问题小记"><a href="#问题小记" class="headerlink" title="问题小记"></a>问题小记</h2><blockquote><p>总结起来就是没有正式接口，无法确定返回的 key 值，前端无法继续做功能<br>就算通过传统 mock 数据的方式，后期也需要大量修改 key 值代码，造成很多问题，开发体验极差<br>并且部分复杂提交表单等功能，必须依赖后端的返回值实现连贯逻辑，光靠 mock 无法继续</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>青铜：无后端不进行</p><blockquote><p>解释：完成切图后，放任项目不管，等待后端提供接口后，继续进行。<br>分析：非常适合小型无复杂功能类项目。<br>优点：劳动力小<br>缺点：开发体验不连贯，“头重，尾更重，中间轻”，对接时需要同时兼顾前端逻辑和后端对接。</p></blockquote></li><li><p>白银：在前端 mock 一些假数据</p><blockquote><p>解释：冒充后端，表单提交等场景打印出参数确保正确，正式对接时 key 值和后端商量着改<br>分析：该方案为 3 做铺垫，mock 数据是 “无后端” 场景又想继续进行的唯一办法…<br>优点：开发连贯，可以在无后端的情况下，打包一份 mock 版本<br>缺点：会有 “沟通问题” 和 “字段成型差异”，“改” 可能会 “大改” 甚至 “全改”</p></blockquote></li><li><p>王者：新增 mock 环境，定义前端字段，不需要与后端相同，通过 loader 转换，实现 “预卜先知”</p><blockquote><p>解释：定义前端字段实现功能，对接时通过 “转换器” ，将后端字段转为前端字段<br>分析：用 “转换器” 的代价，避免了 “沟通成本”，避免了后端随意更改，防止了后期大改代码<br>优点：极佳的开发体验，开发连贯，随时打包一份 mock 版本。<br>缺点：需要额外增加 “转换器” 代码，作为后端字段和前端字段之间的桥梁，增大项目体积<br>注意：尽量增加 originData 字段，记录转换前的数据（方便后期维护修改，或增加其他逻辑）</p></blockquote></li></ol><h2 id="来个例子"><a href="#来个例子" class="headerlink" title="来个例子"></a>来个例子</h2><blockquote><p>例子使用了 vue-cli3<br>开发步骤：</p></blockquote><ol><li><p>定义 mock 环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">新建 .env.mock 文件，文件内容 VUE_APP_MOCK=true</span><br><span class="line">新增 mock 相关启动命令</span><br><span class="line">npm run dev        -&gt; 开发模式，正式对接版本</span><br><span class="line">npm run build      -&gt; 产品模式，正式对接版本</span><br><span class="line">npm run dev:mock   -&gt; 开发模式，mock 版本</span><br><span class="line">npm run build:mock -&gt; 产品模式，mock 版本</span><br></pre></td></tr></table></figure></li><li><p>分析并定义页面需要的字段</p></li><li><p>根据环境 mock 数据，完成功能(提交表单等打印出参数，确保正确)</p></li><li><p>后端接口完成，正式对接(此时退出 mock 环境，进入正式对接开发环境)</p></li><li><p>对接口数据进行处理，转换成 “前端字段” 后再进行赋值</p></li><li><p>完成表单提交等，必须有后端才能继续的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"dataArr"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in dataArr"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.name"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否为 mock 环境</span></span><br><span class="line"><span class="keyword">const</span> IS_MOCK = process.env.VUE_APP_MOCK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: IS_MOCK ? <span class="string">'10086'</span> : <span class="literal">null</span>,</span><br><span class="line">      dataArr: IS_MOCK ? [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">originData</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="number">2</span>, <span class="attr">originData</span>: <span class="literal">null</span> &#125;</span><br><span class="line">      ] : <span class="literal">null</span>,</span><br><span class="line">      <span class="comment">// 不需要 mock 字段</span></span><br><span class="line">      bannerI: <span class="number">0</span>,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 组件初始化方法</span></span><br><span class="line">    <span class="keyword">async</span> init () &#123;</span><br><span class="line">      <span class="comment">// 正式对接</span></span><br><span class="line">      <span class="keyword">if</span> (!IS_MOCK) &#123;</span><br><span class="line">        <span class="comment">// 发送请求获取数据</span></span><br><span class="line">        <span class="keyword">let</span> dataArr = <span class="keyword">await</span> (axios.get(<span class="string">'...'</span>)).data</span><br><span class="line">        <span class="comment">// 转换数据</span></span><br><span class="line">        <span class="keyword">this</span>.dataArr = dataArr.map(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">/****/</span>&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 提交表单</span></span><br><span class="line">    submit () &#123;</span><br><span class="line">      <span class="keyword">if</span> (IS_MOCK) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'------------------------------'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'提交表单测试：'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.form);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'------------------------------'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 正式对接 */</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>项目需求修改，从步骤 1 重新开始，无限循环</p></li></ol><h2 id="非技术经验"><a href="#非技术经验" class="headerlink" title="非技术经验"></a>非技术经验</h2><blockquote><p>用 “王者” 方法还有一个优点是 “自我保护”<br>通常项目卡住时，若前端依赖后端，导致页面显示异常<br>你的团队和领导并不知道项目是卡在谁手中(耳听为虚，眼见为实)<br>客户或领导通常不懂技术<br>但肯定是看前端页面来判断项目是否完成，很显然，此时锅通常/有时就在委屈的前端这里了…<br>通过此方法，可以 mock 出一份静态版本<br>沟通时就可以对着 mock 版说 “前端部分已基本完成，等后端写接口正式对接” (后端的锅)</p></blockquote><blockquote><p>我不认为这是推责任<br>我认为这是将项目推到正确的方向<br>正视关键问题所在，正确引导解决项目问题<br>前端打死也不可能自己变出接口来呀</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;做项目时&lt;br&gt;经常有需要后端提供接口才能继续往下进行的场景&lt;br&gt;本文主要讨论碰到该类场景，如何优雅的处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端各类情况分析&quot;&gt;&lt;a href=&quot;#后端各类情况分析&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>心得-微信小程序</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4s000uz9vc9qd14czn/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4s000uz9vc9qd14czn/</id>
    <published>2019-11-12T01:23:45.000Z</published>
    <updated>2020-02-07T08:34:19.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记载着微信小程序的开发心得</p></blockquote><h2 id="框架的选择"><a href="#框架的选择" class="headerlink" title="框架的选择"></a>框架的选择</h2><blockquote><p>若原生撸请忽略，但并不推荐<br>原生的开发体验较为差劲，解决方案少<br>现在是 2020.1.3，个人推荐 uni-app 这个框架<br>真心强大！</p></blockquote><h3 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h3><blockquote><p><a href="https://github.com/dcloudio/uni-app" target="_blank" rel="noopener">https://github.com/dcloudio/uni-app</a><br>非常推荐<br>体验：完全的 vue 开发体验，支持所有 vue 语法，支持跨端，社区完善，并拥有插件平台</p></blockquote><p>碰到的问题…</p><ol><li>使用 <a href="mailto:lodash@4.17.15" target="_blank" rel="noopener">lodash@4.17.15</a>，dev 正常，pro 报错，降级到 <a href="mailto:lodash@4.16.0" target="_blank" rel="noopener">lodash@4.16.0</a> 好了</li><li>prop 在 template 中传入时，要用驼峰命名，短横线命名会无效</li></ol><h3 id="wepy"><a href="#wepy" class="headerlink" title="wepy"></a>wepy</h3><blockquote><p><a href="https://github.com/Tencent/wepy" target="_blank" rel="noopener">https://github.com/Tencent/wepy</a><br>不推荐<br>体验：类 vue 开发体验，但是区别还是比较大的，有学习成本<br>问题：使用过一段时间，问题比较多…，放弃使用的原因是 repeat 双层循环，内层循环读取不到数据，并且无解决办法</p></blockquote><h3 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h3><blockquote><p><a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/mpvue</a><br>推荐<br>体验：不完全的 vue 开发体验，不支持 filter 等，其他基本相同，支持跨端<br>问题：据说停止维护了….</p></blockquote><hr><h2 id="酷库-html-渲染方案"><a href="#酷库-html-渲染方案" class="headerlink" title="酷库 - html 渲染方案"></a>酷库 - html 渲染方案</h2><h3 id="rich-text-组件"><a href="#rich-text-组件" class="headerlink" title="rich-text 组件"></a>rich-text 组件</h3><blockquote><p>无法主动控制样式，只能想办法改变 html 中的 style<br>非常不灵活</p></blockquote><h3 id="wxParse"><a href="#wxParse" class="headerlink" title="wxParse"></a>wxParse</h3><blockquote><p><a href="https://github.com/icindy/wxParse" target="_blank" rel="noopener">https://github.com/icindy/wxParse</a><br>基于原生小程序，若没有使用小程序框架就用它吧</p></blockquote><h3 id="gaoyia-parse"><a href="#gaoyia-parse" class="headerlink" title="gaoyia-parse"></a>gaoyia-parse</h3><blockquote><p><a href="https://github.com/gaoyia/parse#readme" target="_blank" rel="noopener">https://github.com/gaoyia/parse#readme</a><br><a href="https://www.npmjs.com/package/gaoyia-parse" target="_blank" rel="noopener">https://www.npmjs.com/package/gaoyia-parse</a><br>若为 mpvue uni-app 就用这个</p></blockquote><h2 id="酷库-支持-cookie"><a href="#酷库-支持-cookie" class="headerlink" title="酷库 - 支持 cookie"></a>酷库 - 支持 cookie</h2><blockquote><p>小程序默认不支持 cookie 传输，但后端的逻辑经常会依赖 cookie<br>解决方案：<a href="https://github.com/charleslo1/weapp-cookie" target="_blank" rel="noopener">https://github.com/charleslo1/weapp-cookie</a><br>使用起来非常方便，只需要引入即可</p></blockquote><hr><h2 id="酷库-优雅的发送请求"><a href="#酷库-优雅的发送请求" class="headerlink" title="酷库 - 优雅的发送请求"></a>酷库 - 优雅的发送请求</h2><blockquote><p><a href="https://github.com/SoloJiang/axios" target="_blank" rel="noopener">https://github.com/SoloJiang/axios</a><br>wx-axios 用这个库<br>微信小程序版 axios，作者 fork 原本的 axios 实现</p></blockquote><hr><h2 id="经验-getCurrentPages-使用注意"><a href="#经验-getCurrentPages-使用注意" class="headerlink" title="经验 - getCurrentPages 使用注意"></a>经验 - getCurrentPages 使用注意</h2><blockquote><p>getCurrentPages 方法返回的页面数组中 route 属性无查询字符串<br>查询字符串保存在 options 属性中(对象形式)，想要完整的需要自己拼接<br>建议使用 qs 库做拼接</p></blockquote><img src="/blog/article/ck6bwyu4s000uz9vc9qd14czn/getCurrentPages-route-options.jpg" class=""><hr><h2 id="经验-储存图片到本地"><a href="#经验-储存图片到本地" class="headerlink" title="经验 - 储存图片到本地"></a>经验 - 储存图片到本地</h2><blockquote><p>建议使用 saveImageToPhotosAlbum 这个方法<br>saveFile 保存后，路径很迷，并且无后缀，相册中也找不到<br>saveImageToPhotosAlbum 成功后，微信会自动弹出一个友好提示（水平居中垂直居下的 Toast 弹框）<br>下载图片时，别忘了在微信公众后台增加上 download domain 否则上线后，下载会报错</p></blockquote><hr><h2 id="经验-iconfont-引入"><a href="#经验-iconfont-引入" class="headerlink" title="经验 - iconfont 引入"></a>经验 - iconfont 引入</h2><blockquote><p>小程序推荐使用 iconfont 作为部分图片的解决方案<br>因为小程序中的 image 标签，默认宽高不是真实图片大小，需要手动定义<br>替换图片时会造成一些麻烦(比如传的图片大小不一样，导致的显示不全问题)<br>使用 iconfont 即可以解决问题<br>注意：小程序不支持加载本地字体文件！但是可以加载网络字体文件</p></blockquote><img src="/blog/article/ck6bwyu4s000uz9vc9qd14czn/iconfont.jpg" class=""><hr><h2 id="经验-button-边框"><a href="#经验-button-边框" class="headerlink" title="经验 - button 边框"></a>经验 - button 边框</h2><blockquote><p>button 边框是用 :after 实现的<br>并不是 border 实现</p></blockquote><hr><h2 id="经验-分包"><a href="#经验-分包" class="headerlink" title="经验 - 分包"></a>经验 - 分包</h2><blockquote><p>小程序有代码体积限制（小于 2m）<br>若体积过大就只能用分包的形式</p></blockquote><blockquote><p>uni-app 可以强制开启代码压缩缓解在开发环境下体积过大，无法真机预览的问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="comment">// uni-app 强制开启代码压缩</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack (config) &#123;</span><br><span class="line">    <span class="comment">// 防止在开发环境文件过大的情况</span></span><br><span class="line">    config.optimization.minimize = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// uni-app 的分包优化配置</span><br><span class="line">&quot;mp-weixin&quot;: &#123;</span><br><span class="line">  &quot;optimization&quot; : &#123;</span><br><span class="line">    &quot;subPackages&quot; : true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="经验-map-组件"><a href="#经验-map-组件" class="headerlink" title="经验 - map 组件"></a>经验 - map 组件</h2><h3 id="阻止手势缩放和拖动"><a href="#阻止手势缩放和拖动" class="headerlink" title="阻止手势缩放和拖动"></a>阻止手势缩放和拖动</h3><blockquote><p>官方暂不支持，但若无点击需求可以通过一个遮盖层实现</p></blockquote><h3 id="marker-自定义文字的位置"><a href="#marker-自定义文字的位置" class="headerlink" title="marker 自定义文字的位置"></a>marker 自定义文字的位置</h3><blockquote><p>2020.1.2…<br>建议放弃使用下面的想法，还是改用一张图片实现<br>经过测试有些 bug 无法解决</p></blockquote><ol><li>位置太难对准</li><li>ios 设备上有 marker 和 label 的层叠性问题</li></ol><p>ios 效果如下</p><img src="/blog/article/ck6bwyu4s000uz9vc9qd14czn/map-label-center-2.jpg" class=""><blockquote><p><del>marker callout 只能显示在 marker 的上方，位置不能改变</del><br><del>marker label 可以改变相对于 marker 的位置(大约计算)</del><br><del>但是没有 left，center，right 这种属性</del><br><del>下面例子使用 label 实现文字垂直居中对其</del></p></blockquote><img src="/blog/article/ck6bwyu4s000uz9vc9qd14czn/map-label-center-1.jpg" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> markerArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ... marker options ...</span></span><br><span class="line">    label: &#123;</span><br><span class="line">      <span class="comment">// ... label options ...</span></span><br><span class="line">      anchorX: (<span class="string">'自定义文字'</span>.length * <span class="number">4.7</span>) * <span class="number">-1</span>,</span><br><span class="line">      anchorY: <span class="number">-29</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... other marker</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="经验-input-change-事件不触发"><a href="#经验-input-change-事件不触发" class="headerlink" title="经验 - input change 事件不触发"></a>经验 - input change 事件不触发</h2><blockquote><p>已知基础库 2.9.3 有这个 bug<br>若出现，降级或升级试试看</p></blockquote><hr><h2 id="填坑-uni-app-map-事件-markertap-回调参数各平台不一致"><a href="#填坑-uni-app-map-事件-markertap-回调参数各平台不一致" class="headerlink" title="填坑 - uni-app map 事件 markertap 回调参数各平台不一致"></a>填坑 - uni-app map 事件 markertap 回调参数各平台不一致</h2><blockquote><p>markerId 位置不一致</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.markerId 是小程序</span></span><br><span class="line"><span class="comment">// e.detail.markerId 是h5</span></span><br><span class="line"><span class="keyword">let</span> id = e.markerId || e.detail.markerId</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记载着微信小程序的开发心得&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;框架的选择&quot;&gt;&lt;a href=&quot;#框架的选择&quot; class=&quot;headerlink&quot; title=&quot;框架的选择&quot;&gt;&lt;/a&gt;框架的选择&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>酷库-图片相关</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu5a001xz9vccy2sgf5f/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu5a001xz9vccy2sgf5f/</id>
    <published>2019-11-11T01:25:31.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fancybox"><a href="#fancybox" class="headerlink" title="fancybox"></a>fancybox</h2><blockquote><p><a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">https://github.com/fancyapps/fancybox</a><br>作用：点击看大图、视频、模态框<br>备注：功能非常强大，但是基于 jQuery</p></blockquote><hr><h2 id="medium-zoom"><a href="#medium-zoom" class="headerlink" title="medium-zoom"></a>medium-zoom</h2><blockquote><p><a href="https://github.com/francoischalifour/medium-zoom" target="_blank" rel="noopener">https://github.com/francoischalifour/medium-zoom</a><br>作用：点击看大图<br>备注：功能单一，原生 js 实现</p></blockquote><hr><h2 id="smartcrop-js"><a href="#smartcrop-js" class="headerlink" title="smartcrop.js"></a>smartcrop.js</h2><blockquote><p><a href="https://github.com/jwagner/smartcrop.js" target="_blank" rel="noopener">https://github.com/jwagner/smartcrop.js</a><br>用途：根据传入的长宽比，计算出图片的主要内容区域<br>场景：主要用于响应式图片</p></blockquote><img src="/blog/article/ck6bwyu5a001xz9vccy2sgf5f/smartcrop.jpg" class=""><img src="/blog/article/ck6bwyu5a001xz9vccy2sgf5f/smartcrop-2.jpg" class=""><hr><h2 id="grade"><a href="#grade" class="headerlink" title="grade"></a>grade</h2><blockquote><p><a href="https://github.com/benhowdle89/grade" target="_blank" rel="noopener">https://github.com/benhowdle89/grade</a><br>用途：根据图片主题色生成渐变色<br>场景：主要用于图片背景</p></blockquote><img src="/blog/article/ck6bwyu5a001xz9vccy2sgf5f/grade.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fancybox&quot;&gt;&lt;a href=&quot;#fancybox&quot; class=&quot;headerlink&quot; title=&quot;fancybox&quot;&gt;&lt;/a&gt;fancybox&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fancy
      
    
    </summary>
    
    
      <category term="酷库" scheme="https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"/>
    
    
      <category term="图片" scheme="https://q-jason.github.io/blog/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>心得-bfcache</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu3t0000z9vcdujh20zv/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu3t0000z9vcdujh20zv/</id>
    <published>2019-11-08T01:36:31.000Z</published>
    <updated>2020-02-07T08:34:19.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文讨论 bfcache 机制带来的一些 bug</p></blockquote><h2 id="bfcache-是啥"><a href="#bfcache-是啥" class="headerlink" title="bfcache 是啥"></a>bfcache 是啥</h2><blockquote><p>是一个游览器机制<br>比如说从 a 网页去 b 网页，然后再点击 b 网页的回退按钮回到 a 网页<br>页面不会刷新，而是使用缓存，用意是提高用户体验<br>表单提交场景发生的比较多</p></blockquote><h2 id="例子：项目分析"><a href="#例子：项目分析" class="headerlink" title="例子：项目分析"></a>例子：项目分析</h2><blockquote><p>项目：后端模板 webApp 项目<br>前端：使用了 vue 做部分的效果(日期选择等，现成的组件)，页面上留有额外 input 供后端提取值<br>后端：使用了 php 模板渲染页面<br>结论：使用了较为混乱的开发方式，本以为使用额外 input 与后端进行解耦就可以顺利使用 vue 组件</p></blockquote><h2 id="例子：html结构"><a href="#例子：html结构" class="headerlink" title="例子：html结构"></a>例子：html结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue 组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-comp-input</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 供后端提取值的额外 input --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="例子：bug-展示"><a href="#例子：bug-展示" class="headerlink" title="例子：bug 展示"></a>例子：bug 展示</h2><img src="/blog/article/ck6bwyu3t0000z9vcdujh20zv/demo.gif" class=""><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>找了半天原因应该是就是因为使用了混乱的开发方式，导致使正常的 bfcache 逻辑出错<br>最终想到放弃使用 bfcache 逻辑，每次都强制刷新页面即可解决这个问题<br>解决方案如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将此代码放到 head 标签靠上的位置</span></span><br><span class="line"><span class="comment">// 否则会加载额外的资源</span></span><br><span class="line"><span class="comment">// 此代码相当于使用 bfcache 机制的回调</span></span><br><span class="line"><span class="comment">// 使用 location.reload 重置页面</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.persisted || (<span class="built_in">window</span>.performance &amp;&amp;</span><br><span class="line">    <span class="built_in">window</span>.performance.navigation.type == <span class="number">2</span>)) &#123;</span><br><span class="line">    location.reload();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文讨论 bfcache 机制带来的一些 bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;bfcache-是啥&quot;&gt;&lt;a href=&quot;#bfcache-是啥&quot; class=&quot;headerlink&quot; title=&quot;bfcache 是啥&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="游览器机制" scheme="https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>心得-傻傻分不清的DOM尺寸属性</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4j000iz9vc7q8j3prx/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4j000iz9vc7q8j3prx/</id>
    <published>2019-11-08T01:14:07.000Z</published>
    <updated>2020-02-07T08:34:19.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要讨论以下属性</p></blockquote><ul><li>clientHeight / clientWidth</li><li>offsetHeight / offsetWidth</li><li>scrollHeight / scrollWidth</li></ul><h2 id="包罗万象"><a href="#包罗万象" class="headerlink" title="包罗万象"></a>包罗万象</h2><blockquote><p>看懂了就啥都明白了</p></blockquote><img src="/blog/article/ck6bwyu4j000iz9vc7q8j3prx/all.jpg" class=""><hr><h2 id="clientHeight-clientWidth"><a href="#clientHeight-clientWidth" class="headerlink" title="clientHeight / clientWidth"></a>clientHeight / clientWidth</h2><blockquote><p>包含 padding，不包含 border、margin、滚动条尺寸</p></blockquote><img src="/blog/article/ck6bwyu4j000iz9vc7q8j3prx/clientHeight-clientWidth.png" class=""><hr><h2 id="offsetHeight-offsetWidth"><a href="#offsetHeight-offsetWidth" class="headerlink" title="offsetHeight / offsetWidth"></a>offsetHeight / offsetWidth</h2><blockquote><p>包含 padding、border、滚动条尺寸，不包含 margin</p></blockquote><img src="/blog/article/ck6bwyu4j000iz9vc7q8j3prx/offsetHeight-offsetWidth.png" class=""><hr><h2 id="scrollHeight-scrollWidth"><a href="#scrollHeight-scrollWidth" class="headerlink" title="scrollHeight / scrollWidth"></a>scrollHeight / scrollWidth</h2><blockquote><p>此属性一般用于有滚动条的元素<br>返回滚动内容的总尺寸</p></blockquote><img src="/blog/article/ck6bwyu4j000iz9vc7q8j3prx/scrollHeight-scrollWidth.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;主要讨论以下属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;clientHeight / clientWidth&lt;/li&gt;
&lt;li&gt;offsetHeight / offsetWidth&lt;/li&gt;
&lt;li&gt;scrollHeight / s
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="文档" scheme="https://q-jason.github.io/blog/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>心得-hover伪类选择器-移动端的表现</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu400002z9vc3ruq7qtu/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu400002z9vc3ruq7qtu/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2020-02-07T08:34:19.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里主要记载一个响应式项目中碰到的下拉菜单的问题</p></blockquote><blockquote><p>美化下拉菜单在项目中是常见的需求<br>常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单<br>但是 :hover 在移动端兼容并不友好<br>经过测试，在除 safari 的游览器中，兼容还比较好，唯独 safari 出现了问题…</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><img src="/blog/article/ck6bwyu400002z9vc3ruq7qtu/example.gif" class=""><hr><h2 id="移动端-safari-的奇怪表现"><a href="#移动端-safari-的奇怪表现" class="headerlink" title="移动端 safari 的奇怪表现"></a>移动端 safari 的奇怪表现</h2><ul><li>必须是 a 元素才能触发 :hover</li><li>将元素修改成了 a 之后，点击页面其他处无法失去 :hover 焦点，除非点击其他 按钮 或 input</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>使用 js 事件加 class 的方式实现，代替 :hover</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这里主要记载一个响应式项目中碰到的下拉菜单的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;美化下拉菜单在项目中是常见的需求&lt;br&gt;常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单&lt;br&gt;但是 
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="游览器差异" scheme="https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>心得-移动端文字垂直居中的影响因素</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4u000xz9vcbanl3ue0/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4u000xz9vcbanl3ue0/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2020-02-07T08:34:19.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>移动端开发时经常会碰到文字居上的问题<br>经过测试发现，主要是使用了独特的 font-family 引起的</p></blockquote><h2 id="移动端最佳-font-family-设置"><a href="#移动端最佳-font-family-设置" class="headerlink" title="移动端最佳 font-family 设置"></a>移动端最佳 font-family 设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: </span><br><span class="line">    -apple-system, BlinkMacSystemFont,</span><br><span class="line">    <span class="string">"PingFang SC"</span>, <span class="string">"Helvetica Neue"</span>,</span><br><span class="line">    STHeiti, <span class="string">"Microsoft Yahei"</span>,</span><br><span class="line">    Tahoma,Simsun,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端-input-placeholder-居上"><a href="#移动端-input-placeholder-居上" class="headerlink" title="移动端 input placeholder 居上"></a>移动端 input placeholder 居上</h2><blockquote><p>经过测试是由于 placeholder 默认的 line-height 导致的</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* safari placeholder 偏上的问题 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><h3 id="android-未设置特殊字体"><a href="#android-未设置特殊字体" class="headerlink" title="android 未设置特殊字体"></a>android 未设置特殊字体</h3><img src="/blog/article/ck6bwyu4u000xz9vcbanl3ue0/android-good.jpg" class=""><hr><h3 id="android-设置了特殊字体"><a href="#android-设置了特殊字体" class="headerlink" title="android 设置了特殊字体"></a>android 设置了特殊字体</h3><img src="/blog/article/ck6bwyu4u000xz9vcbanl3ue0/android-bad.jpg" class=""><hr><h3 id="ios-未设置特殊字体"><a href="#ios-未设置特殊字体" class="headerlink" title="ios 未设置特殊字体"></a>ios 未设置特殊字体</h3><img src="/blog/article/ck6bwyu4u000xz9vcbanl3ue0/ios-good.jpg" class=""><hr><h3 id="ios-设置了特殊字体"><a href="#ios-设置了特殊字体" class="headerlink" title="ios 设置了特殊字体"></a>ios 设置了特殊字体</h3><img src="/blog/article/ck6bwyu4u000xz9vcbanl3ue0/ios-bad.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;移动端开发时经常会碰到文字居上的问题&lt;br&gt;经过测试发现，主要是使用了独特的 font-family 引起的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;移动端最佳-font-family-设置&quot;&gt;&lt;a href=&quot;#移动端最佳-font-
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="游览器差异" scheme="https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>心得-到底是谁的滚动条</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4m000kz9vc24bk3pru/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4m000kz9vc24bk3pru/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2020-02-07T08:34:19.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网页中默认的滚动条到底是哪个元素的？<br>body？html？</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>打印输出各大游览器 body 和 html 标签的 scrollTop 属性</p></blockquote><h3 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h3><img src="/blog/article/ck6bwyu4m000kz9vc24bk3pru/chrome.jpg" class=""><hr><h3 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h3><img src="/blog/article/ck6bwyu4m000kz9vc24bk3pru/firefox.jpg" class=""><hr><h3 id="ie11"><a href="#ie11" class="headerlink" title="ie11"></a>ie11</h3><img src="/blog/article/ck6bwyu4m000kz9vc24bk3pru/ie11.jpg" class=""><hr><h3 id="safari"><a href="#safari" class="headerlink" title="safari"></a>safari</h3><img src="/blog/article/ck6bwyu4m000kz9vc24bk3pru/safari.jpg" class=""><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>除去 safari 默认滚动条都是 html 元素的<br>只有 safari 这个奇葩滚动条是使用 body 元素的<br>为啥 safari 这个奇葩总会有各种有问题……</p></blockquote><h2 id="优雅的获取页面滚动位置"><a href="#优雅的获取页面滚动位置" class="headerlink" title="优雅的获取页面滚动位置"></a>优雅的获取页面滚动位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 IE</span></span><br><span class="line"><span class="built_in">window</span>.scrollY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE8以及以下</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容性最好的写法</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop;</span><br></pre></td></tr></table></figure><h2 id="优雅的滚动页面"><a href="#优雅的滚动页面" class="headerlink" title="优雅的滚动页面"></a>优雅的滚动页面</h2><h3 id="原生方法（推荐）"><a href="#原生方法（推荐）" class="headerlink" title="原生方法（推荐）"></a>原生方法（推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这俩货是一样的....</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo(x, y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相对滚动</span></span><br><span class="line"><span class="built_in">window</span>.scrollBy(offsetX, offsetY)</span><br></pre></td></tr></table></figure><h3 id="直接赋值（不推荐）"><a href="#直接赋值（不推荐）" class="headerlink" title="直接赋值（不推荐）"></a>直接赋值（不推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome, ie, 火狐 ...</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 奇葩 safari</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="number">500</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;网页中默认的滚动条到底是哪个元素的？&lt;br&gt;body？html？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;block
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="游览器差异" scheme="https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"/>
    
      <category term="文档" scheme="https://q-jason.github.io/blog/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>心得-移动端理想的用户体验</title>
    <link href="https://q-jason.github.io/blog/article/ck6bwyu4v000zz9vc7uzwbgej/"/>
    <id>https://q-jason.github.io/blog/article/ck6bwyu4v000zz9vc7uzwbgej/</id>
    <published>2019-11-08T01:06:15.000Z</published>
    <updated>2020-02-07T08:34:19.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前前端的跨端技术层出不穷，开发快，对用户透明。<br>对前端开发者来说掌握的东西要更多了~</p></blockquote><blockquote><p>本文谈论一些原生移动 app 用户体验</p></blockquote><h2 id="体验分析"><a href="#体验分析" class="headerlink" title="体验分析"></a>体验分析</h2><blockquote><p>每天都会用各种 app，各种操作熟记于心<br>总结出以下网页不容易实现的需求</p></blockquote><ol><li>类似网页的历史记录，前进刷新网页，后退时使用历史缓存</li><li>前进或者后退（物理返回键）会有不同的切换效果（滑动切换）</li><li>点击物理返回键时若正处于 “模态对话框(dialog, alert)等”，不会返回页面，会先将对话框关闭</li></ol><h2 id="实现难点分析以及解决方案"><a href="#实现难点分析以及解决方案" class="headerlink" title="实现难点分析以及解决方案"></a>实现难点分析以及解决方案</h2><ol><li>vue keep-alive 无法实现前进刷新，后退使用缓存的 app 缓存逻辑<blockquote><p>这里可以使用 vue-navigation 实现</p></blockquote></li><li>前进和后退实现不同的切换效果<blockquote><p>vue transition 标签配合 vue-navigation 实现</p></blockquote></li><li>模态框逻辑，如何判断当前正在弹框，如何优雅的阻止切换切换并关闭模态框<blockquote><p>推荐 vue-create-api 这个库，本文例子中使用了 element-ui 中的 MessageBox 实现</p></blockquote></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p><a href="https://github.com/q-jason/code/tree/master/good-vue-app" target="_blank" rel="noopener">github</a></p></blockquote><iframe src="https://codesandbox.io/embed/github/q-jason/code/tree/master/good-vue-app?fontsize=14" width="100%" height="800" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前前端的跨端技术层出不穷，开发快，对用户透明。&lt;br&gt;对前端开发者来说掌握的东西要更多了~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文谈论一些原生移动 app 用户体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="前端心得" scheme="https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="经验" scheme="https://q-jason.github.io/blog/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
