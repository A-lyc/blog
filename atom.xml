<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qteam</title>
  
  <subtitle>博客</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://q-jason.github.io/blog/"/>
  <updated>2019-10-31T10:53:18.469Z</updated>
  <id>https://q-jason.github.io/blog/</id>
  
  <author>
    <name>jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>:hover伪类选择器，移动端的表现</title>
    <link href="https://q-jason.github.io/blog/article/ck2elcbbe0000x9nc2cto0da2/"/>
    <id>https://q-jason.github.io/blog/article/ck2elcbbe0000x9nc2cto0da2/</id>
    <published>2019-10-31T10:53:18.469Z</published>
    <updated>2019-10-31T10:53:18.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里主要记载一个响应式项目中碰到的下拉菜单的问题</p></blockquote><blockquote><p>美化下拉菜单在项目中是常见的需求<br>常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单<br>但是 :hover 在移动端兼容并不友好<br>经过测试，在除 safari 的游览器中，兼容还比较好，唯独 safari 出现了问题…</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><img src="/blog/article/ck2elcbbe0000x9nc2cto0da2/example.gif" class=""><hr><h2 id="移动端-safari-的奇怪表现"><a href="#移动端-safari-的奇怪表现" class="headerlink" title="移动端 safari 的奇怪表现"></a>移动端 safari 的奇怪表现</h2><ul><li>必须是 a 元素才能触发 :hover</li><li>将元素修改成了 a 之后，点击页面其他处无法失去 :hover 焦点，除非点击其他 按钮 或 input</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>使用 js 事件加 class 的方式实现，代替 :hover</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这里主要记载一个响应式项目中碰到的下拉菜单的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;美化下拉菜单在项目中是常见的需求&lt;br&gt;常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单&lt;br&gt;但是 
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="css" scheme="https://q-jason.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vh单位的可信度</title>
    <link href="https://q-jason.github.io/blog/article/ck2elcbbm0002x9ncgysj9ymr/"/>
    <id>https://q-jason.github.io/blog/article/ck2elcbbm0002x9ncgysj9ymr/</id>
    <published>2019-10-31T10:53:18.469Z</published>
    <updated>2019-10-31T10:53:18.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vw, vh 都是自适应页面的利器<br>vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>手机游览器的 100vh 总会高出一截<br>经过查阅，好像是算上了地址栏的高度，并且不准备修复，被认为是正常的。</p></blockquote><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"height: 100vh"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'innerHeight: '</span> + innerHeight + <span class="string">'\n'</span> + <span class="string">'test元素高度: '</span> + $(<span class="string">'#test'</span>).css(<span class="string">'height'</span>));</span><br></pre></td></tr></table></figure><h3 id="PC端测试"><a href="#PC端测试" class="headerlink" title="PC端测试"></a>PC端测试</h3><img src="/blog/article/ck2elcbbm0002x9ncgysj9ymr/pc.jpg" class=""><hr><h3 id="移动端测试"><a href="#移动端测试" class="headerlink" title="移动端测试"></a>移动端测试</h3><img src="/blog/article/ck2elcbbm0002x9ncgysj9ymr/phone.jpg" class=""><hr><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><blockquote><p>使用 js 赋值 innerHeight</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.height-full'</span>).css(<span class="string">'height'</span>, <span class="built_in">window</span>.innerHeight);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;vw, vh 都是自适应页面的利器&lt;br&gt;vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="css" scheme="https://q-jason.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>window.opener</title>
    <link href="https://q-jason.github.io/blog/article/ck2elcbbs0006x9nc0n9nbhkf/"/>
    <id>https://q-jason.github.io/blog/article/ck2elcbbs0006x9nc0n9nbhkf/</id>
    <published>2019-10-31T10:53:18.469Z</published>
    <updated>2019-10-31T10:53:18.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目中经常存在着需要跳转网页然后再跳转回来的需求<br>比如说 oauth 登陆，微信支付宝等第三方登陆等<br>若采用通常的链接跳转，会失去当前页面的所有逻辑<br>回调跳转回来时页面也会重新加载<br>用户体验极差，代码逻辑也失去了连贯性</p></blockquote><blockquote><p>终于有一天。。我发现了 window.opener…..</p></blockquote><h2 id="window-open"><a href="#window-open" class="headerlink" title="window.open"></a>window.open</h2><blockquote><p>该方法将打开一个新的网页标签<br>注意：若用户未交互，游览器会阻止该方法的执行（游览器会认为不是用户的操作，认为是广告等）<br>解决：在用户交互事件中调用 window.open（click 等事件）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="window-opener"><a href="#window-opener" class="headerlink" title="window.opener"></a>window.opener</h2><blockquote><p>当前网页必须由 window.open 打开时才有<br>window.opener 指向 window.open 时的父 window 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener.alert(<span class="string">'提示'</span>)</span><br></pre></td></tr></table></figure><h2 id="实现（跳转网页回调）"><a href="#实现（跳转网页回调）" class="headerlink" title="实现（跳转网页回调）"></a>实现（跳转网页回调）</h2><h3 id="父窗口"><a href="#父窗口" class="headerlink" title="父窗口"></a>父窗口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义回调 cb 事件</span></span><br><span class="line"><span class="built_in">window</span>.callback = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮触发网页跳转，打开一个新页面</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="子窗口"><a href="#子窗口" class="headerlink" title="子窗口"></a>子窗口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发父窗口回调方法，并传入参数</span></span><br><span class="line"><span class="built_in">window</span>.opener.callback(<span class="comment">/* any */</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭当前子窗口</span></span><br><span class="line"><span class="built_in">window</span>.close();</span><br></pre></td></tr></table></figure><p>这样保证了页面的执行顺序，也保证了用户体验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;项目中经常存在着需要跳转网页然后再跳转回来的需求&lt;br&gt;比如说 oauth 登陆，微信支付宝等第三方登陆等&lt;br&gt;若采用通常的链接跳转，会失去当前页面的所有逻辑&lt;br&gt;回调跳转回来时页面也会重新加载&lt;br&gt;用户体验极差，代码逻辑也失去了连贯性&lt;/p
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="js" scheme="https://q-jason.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>五险一金扣除，实发工资算法</title>
    <link href="https://q-jason.github.io/blog/article/ck2elcbbu0007x9nchw4r3fk2/"/>
    <id>https://q-jason.github.io/blog/article/ck2elcbbu0007x9nchw4r3fk2/</id>
    <published>2019-10-31T10:53:18.469Z</published>
    <updated>2019-10-31T10:53:18.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前是 2019.10.03，本文记载着我理解的五险一金和税款的算法，具体比例会隔几年一调整，想要精确百度下即可。</p></blockquote><h2 id="个人承担比例"><a href="#个人承担比例" class="headerlink" title="个人承担比例"></a>个人承担比例</h2><ul><li>养老 = 8%</li><li>医疗 = 2%</li><li>失业 = 0.3%</li><li>一金 = 12%（该值非规定）</li><li>税款 = 0.03%（工资越高税率越高，具体百度吧）</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>应发工资 10000</p></blockquote><h3 id="五险"><a href="#五险" class="headerlink" title="五险"></a>五险</h3><ul><li>养老 10000 * 0.08 = 800</li><li>失业 10000 * 0.003 = 30</li><li>医疗 10000 * 0.02 = 200</li><li>生育和工伤不需要个人承担</li><li>总共 800 + 30 + 200 = 1030</li></ul><h3 id="公积金"><a href="#公积金" class="headerlink" title="公积金"></a>公积金</h3><blockquote><p>一金较为特殊，需要看公司定的缴纳基数（可能会按照比应发工资低的基数缴纳）</p></blockquote><ul><li>一金理想情况       10000 * 0.12</li><li>一金非理想情况   2600 * 0.12（2600是胡乱写的，具体要公司定）</li><li>总共（理想） 10000 * 0.12 = 1200</li></ul><h3 id="税款"><a href="#税款" class="headerlink" title="税款"></a>税款</h3><blockquote><p>这个较为复杂，目前应发工资超过 5000 才交税，税率为 3%<br>工资到达某档位后，税率也会加，10000 是 3%，具体百度吧<br>但是 3% 并不指的是应发工资（10000）的 3%，而是 应发工资 - 底数 - 五险一金扣款后 的剩余部分<br>看公式吧</p></blockquote><ul><li>(10000 - 5000 - 五险一金个人承担部分) * 0.03 = 所需要交纳的税款</li><li>(10000 - 5000 - 1030 - 1200) * 0.03 = 83.1</li></ul><h3 id="实发工资"><a href="#实发工资" class="headerlink" title="实发工资"></a>实发工资</h3><ul><li>应发工资 - 五险 - 公积金 - 税 = 实发工资</li><li>10000 - 1030 - 1200 - 83.1 = 7686.9</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前是 2019.10.03，本文记载着我理解的五险一金和税款的算法，具体比例会隔几年一调整，想要精确百度下即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;个人承担比例&quot;&gt;&lt;a href=&quot;#个人承担比例&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="职场经验" scheme="https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="职场" scheme="https://q-jason.github.io/blog/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>到底是谁的滚动条？</title>
    <link href="https://q-jason.github.io/blog/article/ck2elcbbx0008x9nc9l0d1sy6/"/>
    <id>https://q-jason.github.io/blog/article/ck2elcbbx0008x9nc9l0d1sy6/</id>
    <published>2019-10-31T10:53:18.469Z</published>
    <updated>2019-10-31T10:53:18.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网页中默认的滚动条到底是哪个元素的？<br>body？html？</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>打印输出各大游览器 body 和 html 标签的 scrollTop 属性</p></blockquote><h3 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h3><img src="/blog/article/ck2elcbbx0008x9nc9l0d1sy6/chrome.jpg" class=""><hr><h3 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h3><img src="/blog/article/ck2elcbbx0008x9nc9l0d1sy6/firefox.jpg" class=""><hr><h3 id="ie11"><a href="#ie11" class="headerlink" title="ie11"></a>ie11</h3><img src="/blog/article/ck2elcbbx0008x9nc9l0d1sy6/ie11.jpg" class=""><hr><h3 id="safari"><a href="#safari" class="headerlink" title="safari"></a>safari</h3><img src="/blog/article/ck2elcbbx0008x9nc9l0d1sy6/safari.jpg" class=""><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>除去 safari 默认滚动条都是 html 元素的<br>只有 safari 这个奇葩滚动条是使用 body 元素的<br>为啥 safari 这个奇葩总会有各种有问题……</p></blockquote><h2 id="优雅的获取页面滚动位置"><a href="#优雅的获取页面滚动位置" class="headerlink" title="优雅的获取页面滚动位置"></a>优雅的获取页面滚动位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 IE</span></span><br><span class="line"><span class="built_in">window</span>.scrollY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE8以及以下</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容性最好的写法</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop;</span><br></pre></td></tr></table></figure><h2 id="优雅的滚动页面"><a href="#优雅的滚动页面" class="headerlink" title="优雅的滚动页面"></a>优雅的滚动页面</h2><h3 id="原生方法（推荐）"><a href="#原生方法（推荐）" class="headerlink" title="原生方法（推荐）"></a>原生方法（推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这俩货是一样的....</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo(x, y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相对滚动</span></span><br><span class="line"><span class="built_in">window</span>.scrollBy(offsetX, offsetY)</span><br></pre></td></tr></table></figure><h3 id="直接赋值（不推荐）"><a href="#直接赋值（不推荐）" class="headerlink" title="直接赋值（不推荐）"></a>直接赋值（不推荐）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome, ie, 火狐 ...</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 奇葩 safari</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="number">500</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;网页中默认的滚动条到底是哪个元素的？&lt;br&gt;body？html？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;block
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="js" scheme="https://q-jason.github.io/blog/tags/js/"/>
    
      <category term="html" scheme="https://q-jason.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>移动端文字垂直居中的问题</title>
    <link href="https://q-jason.github.io/blog/article/ck2elcbc3000cx9nc8swo0wjj/"/>
    <id>https://q-jason.github.io/blog/article/ck2elcbc3000cx9nc8swo0wjj/</id>
    <published>2019-10-31T10:53:18.469Z</published>
    <updated>2019-10-31T10:53:18.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>移动端开发时经常会碰到文字居上的问题<br>经过测试发现，主要是使用了独特的 font-family 引起的</p></blockquote><h2 id="移动端最佳-font-family-设置"><a href="#移动端最佳-font-family-设置" class="headerlink" title="移动端最佳 font-family 设置"></a>移动端最佳 font-family 设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: </span><br><span class="line">    -apple-system, BlinkMacSystemFont,</span><br><span class="line">    <span class="string">"PingFang SC"</span>, <span class="string">"Helvetica Neue"</span>,</span><br><span class="line">    STHeiti, <span class="string">"Microsoft Yahei"</span>,</span><br><span class="line">    Tahoma,Simsun,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端-input-placeholder-居上"><a href="#移动端-input-placeholder-居上" class="headerlink" title="移动端 input placeholder 居上"></a>移动端 input placeholder 居上</h2><blockquote><p>经过测试是由于 placeholder 默认的 line-height 导致的</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* safari placeholder 偏上的问题 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><h3 id="android-未设置特殊字体"><a href="#android-未设置特殊字体" class="headerlink" title="android 未设置特殊字体"></a>android 未设置特殊字体</h3><img src="/blog/article/ck2elcbc3000cx9nc8swo0wjj/android-good.jpg" class=""><hr><h3 id="android-设置了特殊字体"><a href="#android-设置了特殊字体" class="headerlink" title="android 设置了特殊字体"></a>android 设置了特殊字体</h3><img src="/blog/article/ck2elcbc3000cx9nc8swo0wjj/android-bad.jpg" class=""><hr><h3 id="ios-未设置特殊字体"><a href="#ios-未设置特殊字体" class="headerlink" title="ios 未设置特殊字体"></a>ios 未设置特殊字体</h3><img src="/blog/article/ck2elcbc3000cx9nc8swo0wjj/ios-good.jpg" class=""><hr><h3 id="ios-设置了特殊字体"><a href="#ios-设置了特殊字体" class="headerlink" title="ios 设置了特殊字体"></a>ios 设置了特殊字体</h3><img src="/blog/article/ck2elcbc3000cx9nc8swo0wjj/ios-bad.jpg" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;移动端开发时经常会碰到文字居上的问题&lt;br&gt;经过测试发现，主要是使用了独特的 font-family 引起的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;移动端最佳-font-family-设置&quot;&gt;&lt;a href=&quot;#移动端最佳-font-
      
    
    </summary>
    
    
      <category term="web" scheme="https://q-jason.github.io/blog/categories/web/"/>
    
    
      <category term="css" scheme="https://q-jason.github.io/blog/tags/css/"/>
    
  </entry>
  
</feed>
