{"meta":{"title":"qteam","subtitle":"博客","description":"碰到的事情，记下来，才是真的","author":"jason","url":"https://q-jason.github.io/blog","root":"/blog/"},"pages":[{"title":"","date":"2020-03-12T01:54:09.476Z","updated":"2020-03-12T01:54:09.476Z","comments":false,"path":"categories/index.html","permalink":"https://q-jason.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-03-12T01:54:09.476Z","updated":"2020-03-12T01:54:09.476Z","comments":false,"path":"tags/index.html","permalink":"https://q-jason.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"酷库-涂鸦签名","slug":"酷库-涂鸦签名","date":"2020-03-12T01:20:05.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8fj0024xzpahg7xead0/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8fj0024xzpahg7xead0/","excerpt":"","text":"drawingboard.js github 好几年没更新了，但是差不多能满足需要https://github.com/Leimi/drawingboard.jshttps://www.npmjs.com/package/drawingboard.js","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"涂鸦签名","slug":"涂鸦签名","permalink":"https://q-jason.github.io/blog/tags/%E6%B6%82%E9%B8%A6%E7%AD%BE%E5%90%8D/"}]},{"title":"心得-react","slug":"心得-react","date":"2020-03-08T06:37:31.000Z","updated":"2020-03-12T01:54:09.464Z","comments":true,"path":"article/ck7o3n8e30007xzpahlpjbtqx/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8e30007xzpahlpjbtqx/","excerpt":"","text":"vue 和 react 是目前前端主要使用的框架在国内还是 vue 用的较多，通常 api 记得也比较熟练vue 和 react 的作用和 api 基本差不多…经常容易记混这里记录一下，方便日后提醒 优雅的 css module react 不像 vue 有 scopedcreate-react-app 默认集成了 css-module个人感觉也是比较好使的一种方式 命名需要已 .module 的方式结尾并在组件中引入 styles 对象 在 jsx 中定义 className 在 css 文件中定义样式建议使用后代选择器的方式而非短横线，写代码时会方便很多（代码提示）要覆盖其他组件的样式则用 :global 的形式 覆盖其他组件的样式生成后 后代选择器类名生成后 传入组件的 props 中涉及类名的，也需要使用 styles 对象的方式 事件传参以及 this 指向 render 中写成函数封函数的方式，传递 event 对象和其他参数 如果事件处理函数中需要 this，则需要定义成下面这种形式（public class fields 语法） react-router 到底引入哪一个 只引入 react-router-dom 即可 react-router（实现路由的核心） react-router-dom（在 react-router 的基础上多了一些组件） react-router 传参 显式 - path 传参 优点：可清楚表达语义，刷新页面参数仍然存在缺点：path 参数位置固定，参数过多可能导致灵活问题 显式 - 查询字符串传参 优点：刷新页面参数仍然存在，适合于参数大量的情况缺点：代码上不如 path 传参语义性强 隐式 - state 传参 优点：对象传参，写起来简单，保证参数安全性 react-router js 跳转 在非页面级组件中，使用 withRouter 后会给 props 设置 history 属性 在其他 js 中，可以使用 history 库来实现（react-router 有依赖不用自己安装） react-router 路由嵌套 主路由 子路由 react-redux 使用步骤 引入 12npm i --save reduxnpm i --save react-redux 创建 store.js 文件，创建 reducer、mapStateToProps、mapDispatchToProps 方法，store 实例 1234567891011121314151617181920212223242526let defaultState = &#123; value: 0 &#125;let reducer = function (state = defaultState, action) &#123; switch (action.type) &#123; case 'value': &#123; return &#123;...state, value: action.value&#125; &#125; default: &#123; return state; &#125; &#125;&#125;let mapStateToProps = function (state) &#123; return &#123; ...state &#125;&#125;let mapDispatchToProps = function(dispatch) &#123; return &#123; setValue (value) &#123; dispatch(&#123; type: 'value', value &#125;) &#125; &#125;&#125;let store = createStore(reducer);export &#123; store, reducer, mapStateToProps, mapDispatchToProps&#125; 将 Provider 组件套在 App 最外侧，同时传入 props store harmony123456789import &#123; store &#125; from './store'import App from './App'ReactDOM.render( &lt;Provider store=&#123; store &#125;&gt; &lt;App/&gt; &lt;/Provider&gt;, document.getElementById('root')) 哪个组件需要 store 只需要使用 connect 方法连接即可（react-redux） 1234567891011import &#123; connect &#125; from 'react-redux'import &#123; mapStateToProps, mapDispatchToProps &#125; from '../../store'function Page () &#123; /** .. **/&#125;export default connect( mapStateToProps, mapDispatchToProps)(Page) 在组件中获取值或者触发 action 12this.props.valuethis.props.setValue(10) 定义环境变量 创建环境变量文件 自定义的环境变量要以 “REACT_APP_” 作为开头 优雅的写 render 函数 宗旨为尽量不在 render 中写大量的 js循环等操作尽量单独出来维护 简单的 render 带有循环的 render","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"react","slug":"react","permalink":"https://q-jason.github.io/blog/tags/react/"}]},{"title":"酷库-倒计时","slug":"酷库-倒计时","date":"2020-02-27T04:40:19.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8fb001wxzpa8nmv1x1o/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8fb001wxzpa8nmv1x1o/","excerpt":"","text":"倒计时是项目中较为常见的需求要是手动计算，麻烦的要死…这里记录几个解决方案 countdown（原生） github: https://github.com/mckamey/countdownjsnpm: https://www.npmjs.com/package/countdown 万能解决方案，用就对了下面记录用法 123456789101112131415161718192021import countdown from 'countdown'/** 可已通过 clearInterval(timer) 取消倒计时 **/let timer = countdown( // 结束时间 new Date().getTime() + 10000, // 每一秒会触发的函数 // result 为倒计时数据 // 自定义显示逻辑 function(result) &#123; console.log(result) &#125;, // 最大单位 // 比如说最大单位只想到 \"日\" // 就删除 YEARS 和 MONTHS // 下面的 \"|\" 是位运算符（作者底蕴好强大...） countdown.YEARS | countdown.MONTHS | countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS) @chenfengyuan/vue-countdown（vue） github: https://fengyuanchen.github.io/vue-countdownnpm: https://www.npmjs.com/package/@chenfengyuan/vue-countdown vue 倒计时组件也非常的强大，通过 slot 可自定义样式","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"倒计时","slug":"倒计时","permalink":"https://q-jason.github.io/blog/tags/%E5%80%92%E8%AE%A1%E6%97%B6/"}]},{"title":"电影-我想让大家都开心","slug":"电影-我想让大家都开心","date":"2020-02-11T14:42:17.000Z","updated":"2020-03-12T01:54:09.472Z","comments":true,"path":"article/ck7o3n8f20018xzpa42bdfspc/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f20018xzpa42bdfspc/","excerpt":"","text":"","categories":[{"name":"电影片段","slug":"电影片段","permalink":"https://q-jason.github.io/blog/categories/%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5/"}],"tags":[{"name":"电影片段","slug":"电影片段","permalink":"https://q-jason.github.io/blog/tags/%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5/"}]},{"title":"心得-node-sass安装不上","slug":"心得-node-sass安装不上","date":"2020-01-30T05:17:52.000Z","updated":"2020-03-12T01:54:09.464Z","comments":true,"path":"article/ck7o3n8e10006xzpa2klxh9nm/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8e10006xzpa2klxh9nm/","excerpt":"","text":"我习惯在项目中使用 sass 作为 css 高级语言通常 sass 基于 node-sass 这个库但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上原因有缺少啥 gyp 环境，node-sass 下载超时等这里记录一下，以后出现后，跟着跑即可 参考网址https://www.jianshu.com/p/92afe92db99f 12345678# 若 npm 速度慢建议换源npm i -g nrmnrm use taobaonpm install -g node-gypnpm install --global --production windows-build-toolsnpm uninstall node-sassnpm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"https://q-jason.github.io/blog/tags/npm/"}]},{"title":"酷库-移动端调试","slug":"酷库-移动端调试","date":"2020-01-30T05:14:20.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8fn002axzpa1e49fc76/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8fn002axzpa1e49fc76/","excerpt":"","text":"开发中调试是必不可免的pc端可以直接通过游览器 F12 控制台调试移动端通常没有方便的调试手段这里记录一个非常好用的调试库 eruda 移动端调试工具（js库），比 vconsole 更好用https://eruda.liriliri.io/https://github.com/liriliri/erudahttps://www.npmjs.com/package/eruda eruda-webpack-plugin eruda webpack 插件（更建议使用这个方式，不影响业务代码）https://github.com/huruji/eruda-webpack-pluginhttps://www.npmjs.com/package/eruda-webpack-plugin","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"调试技巧","slug":"调试技巧","permalink":"https://q-jason.github.io/blog/tags/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"}]},{"title":"心得-奇怪的 input[type=\"number\"] 元素 min 和 max 属性","slug":"心得-奇怪的input-number-min-max","date":"2020-01-19T08:30:32.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8el000oxzpa42x90uh9/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8el000oxzpa42x90uh9/","excerpt":"","text":"本文主要讨论 input[type=”number”] 元素的 min 和 max 属性2020.01.19 这天引起了我严重的不适….. 问题由来input 的属性 min 和 max 不能限制用户输入，只能按上下键时限制范围这在平常项目中是无法忍受的更多的时候是希望用户输入 &lt; min || &gt; max 时 input 的值自动修正让值限制在 min 和 max 中使用原生的 min 和 max 是无法满足需求了只能自己写，然后就会发现坑就来了html input 标签设计时应该就发现了这个问题…所以原生 min 和 max 表现这么奇葩 问题重现 当你使用 js 自动根据 min 和 max 修正了值后… 一个 input 元素你想让他 min = 20、max = 100当前 value 为空你想输入 83 这个数字首先输入 8触发 min 逻辑，值会自动重置为 20然后就怎么也输入不对了… 解决方案 放弃由 js 修正值的想法….在输入、提交时使用错误提示，引导用户修改….","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"},{"name":"逻辑优化","slug":"逻辑优化","permalink":"https://q-jason.github.io/blog/tags/%E9%80%BB%E8%BE%91%E4%BC%98%E5%8C%96/"}]},{"title":"心得-赋值inputEl.value","slug":"心得-赋值inputEl-value","date":"2020-01-17T02:56:08.000Z","updated":"2020-03-12T01:54:09.472Z","comments":true,"path":"article/ck7o3n8f10015xzpa14n62so6/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f10015xzpa14n62so6/","excerpt":"","text":"手动赋值 input.value 是项目中常见的场景但是直接赋值的话不会触发 input 事件，导致现实场景中逻辑异常需要手动触发事件 123let customEvent = document.createEvent('UIEvents')customEvent.initUIEvent('input', true, true, window, 1)inputEl.dispatchEvent(customEvent)","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}]},{"title":"酷库-坐标格式转换","slug":"酷库-坐标格式转换","date":"2020-01-03T13:27:47.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8fh0022xzpa7b7hdp8w/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8fh0022xzpa7b7hdp8w/","excerpt":"","text":"coordtransform https://github.com/wandergis/coordtransform一个提供了百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具模块。用就完事了","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"坐标转换","slug":"坐标转换","permalink":"https://q-jason.github.io/blog/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"}]},{"title":"酷库-ajax","slug":"酷库-ajax","date":"2019-12-20T05:15:50.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8f5001gxzpab8ggav38/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f5001gxzpab8ggav38/","excerpt":"","text":"axios github: https://github.com/axios/axios中文文档: https://www.kancloud.cn/yunye/axios/234845Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。用它就对了 axios-retry（axios 重试方案） github: https://github.com/softonic/axios-retry基于 axios，若 axios 发送的请求失败，可根据配置自动重试 可以全局设置，也可以在请求时单独设置 shouldResetTimeout 的作用为每次重试重置超时，建议开启，否则控制台会变成 “机关枪” 默认只有 “5xx错误” 和 “网络错误” 才会重发，可设置 retryCondition 自定义重发逻辑 1234567891011121314import axios from 'axios'import axiosRetry from 'axios-retry'/** 全局设置 **/axiosRetry(axios, &#123; /** options **/&#125;)axios.get('/abc', &#123; /** 单独设置 **/ 'axios-retry': &#123; retries: 3 &#125;&#125;) promise-poller（重试、轮询） https://github.com/joeattardi/promise-poller此库主要作用为基于 Promise 的重试解决方案可用于任何 http 库十分优雅的即可实现也可以 “取巧” 用来当做轮询库使用 123456789101112131415161718192021222324// return PromisepromisePoller(&#123; /** * 返回 Promise 的任务函数 * 若 reject 则会重试（可以一直 reject 实现无限轮询） * 直到 resolve **/ taskFn, /** 重试请求间隔 **/ interval: 500, /** * 失败重试次数 * 这里设置为 Infinity 则可以实现无限重发（实现无限轮询） **/ retries: 10, /** 每次请求的超时 **/ timeout: 1000, /** 整个任务的超时 **/ masterTimeout: 5000&#125;);","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"ajax","slug":"ajax","permalink":"https://q-jason.github.io/blog/tags/ajax/"}]},{"title":"心得-strapi","slug":"心得-strapi","date":"2019-12-19T06:51:16.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8e60008xzpa43x88fjb/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8e60008xzpa43x88fjb/","excerpt":"","text":"strapi 是我一直关注的 node cms 框架我认为他将是未来迈向全栈之路的一个非常重要的 node 框架从 alpha 版本开始一直关注更新逐渐的推出了很多实用性很高，眼前一亮的特性、功能、插件下面是学习笔记： 相关链接整理 官网：https://strapi.io/github: https://github.com/strapi/strapi功能路线图：https://portal.productboard.com/strapi插件库：https://strapi.io/marketplace 启用 –inspect 调试步骤 项目根目录新建 index.js（代码在下面直接复制即可） 安装 nodemon (npm i –save-dev nodemon) 在 package.json scripts 中创建 dev 命令 nodemon –inspect index 在 cmd 运行 npm run dev 即可 打开谷歌游览器 node devTools 查看 注意 使用上述方法，无法在管理界面添加字段，正确姿势是在 develop 命令下创建好后，转到 dev 命令调试 1234567891011require('strapi/lib/commands/start')()/** * develop 模式启动文件 --inspect 不好使 * build 经过测试应该传入 true * watchAdmin 经过测试应该传入 undefined **/// require('strapi/lib/commands/develop')(&#123;// build: true,// watchAdmin: undefined// &#125;) 左边侧边栏字段翻译 version: strapi@3.0.0-beta.18 默认创建好模型后，名字是英文的，只有 Users(用户) 字段是中文改变语言后，字段也不会发生变化，一直是英文当前版本已经可以很方便的自定义 admin 管理界面了只需要在项目目录下，新建 admin 目录，里面放入需要替换的文件strapi 就会用你自定义的文件替换原有的文件进行打包管理界面 —– 手动间隙 —– 翻译过程 在项目根目录创建目录 admin/src/translations 将 strapi-admin/admin/src/translations 中的 en.json(必须有), zh-Hans.json(或其他语言) 复制过来 将字段显示的!!复数!!名字复制到 en.json 和 zh-Hans.json 中的 key，value 写需要翻译显示的名字 strapi develop –watch-admin(开发管理界面模式看下结果) npm run build(翻译成功后，打包管理员界面) en.json 1234&#123; \"Categories\": \"Categories\", \"Restaurants\": \"Restaurants\"&#125; zh-Hans.json 1234&#123; \"Categories\": \"餐厅分类\", \"Restaurants\": \"餐厅\"&#125; —– 手动间隙 —– 备注 en.json 一定要复制并填值，因为 admin/components/LeftMenuLink/index.js 中是根据 en.json 进行判断是否有无 key 值，若没有就不走国际化流程了 harmony123456789101112131415// in node_modules/strapi-admin/admin/components/LeftMenuLink/index.js// Check if messageId exists in en locale to prevent warning messagesconst content = en[props.label] ? ( &lt;FormattedMessage id=&#123;props.label&#125; defaultMessage=\"&#123;label&#125;\" values=&#123;&#123; label: `$&#123;props.label&#125;` &#125;&#125; className=\"linkLabel\" /&gt;) : ( &lt;span className=\"linkLabel\"&gt;&#123;props.label&#125;&lt;/span&gt;); 如何在后台中隐藏指定模型管理 version: 3.0.0-beta.18.7 ！！！ 目前没有发现从模型配置中隐藏的方法 ！！！负责可视化管理数据的插件是 strapi-plugin-content-manager 这个包在其 services/ContentTypes.js 中重写 HIDDEN_CONTENT_TYPES 常量即可实现步骤如下 首先你要有一个项目，并且有自定义的模型字段 在项目根目录 extensions 文件夹中创建 content-manager/services/ContentTypes.js 文件 复制 node_modules/strapi-plugin-content-manager/services/ContentTypes.js 中的代码 黏贴到 extensions/content-manager/services/ContentTypes.js 中 修改 ContentTypes.js 中的依赖包的路径，使其路径正确，下面有例子 找到 HIDDEN_CONTENT_TYPES 常量，新增需要隐藏的模型，下面有例子 123/** 修改依赖路径 **/const storeUtils = require('strapi-plugin-content-manager/services/utils/store')const &#123; pickSchemaFields &#125; = require('strapi-plugin-content-manager/services/utils/schema') 12345678910111213/** 重写需要隐藏的模型 **/const HIDDEN_CONTENT_TYPES = [ /** 原有的 **/ 'strapi::admin', 'plugins::upload.file', 'plugins::users-permissions.permission', 'plugins::users-permissions.role', /** 以下是新增的 **/ 'plugins::config.config', /** application 代表项目中创建的模型 **/ 'application::house.house'] 自定义插件 version: 3.0.0-beta.18.7 这个功能是重头戏哈哈日后封装常用功能，快速开发全指着自定义插件研究了半天，有了以下总结注意：strapi 的管理面板是基于 react 的…需要熟悉 如何在本地进行开发插件 官方文档照着官方文档跑环境就能搭建起来，也比较简单，下面是步骤 下面均为在控制台输入 1234567891011121314# 首先你要有一个项目...npx create-strapi-app my-project# 进入项目目录cd my-project# 创建一个本地插件strapi generate:plugin my-plugin# 打开开发管理面板环境strapi develop --watch-admin# 然后访问 http://localhost:8000 即可# 此时已经搭建好了插件开发环境，接下来接插件逻辑即可 自定义插件开发过程 后台管理面板的作用无非就两件事一. 查看或统计数据（展示数据）二. 修改数据（表单提交） 思考确定插件功能 根据插件功能定义插件数据模型（并非唯一，可多个，在 models 文件夹中） 根据插件功能设计接口并绑定控制器（/config/routes.json 和 controllers 目录） 思考设计并完成后台管理面板 后台管理面板如何发送请求 strapi 默认有一套权限设置，发送请求会被拦截获取不到数据（jwt 验证）strapi 提供了 helper（strapi-helper-plugin）其中 request 模块是用来发请求的开发者只需要引用，然后使用就可以了不需要了解权限逻辑，对开发透明如下： 12345678910import &#123; request &#125; from 'strapi-helper-plugin'// 返回 Promiserequest('/users-permissions/advanced', &#123; method: 'get'&#125;).then(res =&gt; &#123; console.log(res)&#125;).catch(err =&gt; &#123; console.error(err)&#125;) 自定义插件的小储存库 strapi 给插件的配置单独设置了一个地方（数据库中的一个表 core_store）涉及插件配置的逻辑可以基于这个功能来做但是这个 api 官方文档中并未标明，不知是啥原因，官方插件中都已用到这个 api如下 123456789101112131415161718module.exports = async () =&gt; &#123; // 插件储存库 const pluginStore = strapi.store(&#123; environment: '', type: 'plugin', name: 'config' &#125;) // 设置储存库中的字段 await pluginStore.set(&#123; key: 'test', value: [ 1, 2, 3, 4 ] &#125;) // 获取储存库中的字段 console.log(await pluginStore.get(&#123; key: 'test' &#125;)) // =&gt; [ 1, 2, 3, 4 ]&#125;","categories":[{"name":"后端心得","slug":"后端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%90%8E%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"cms","slug":"cms","permalink":"https://q-jason.github.io/blog/tags/cms/"},{"name":"strapi","slug":"strapi","permalink":"https://q-jason.github.io/blog/tags/strapi/"}]},{"title":"酷库-echarts","slug":"酷库-echarts","date":"2019-12-17T01:12:50.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8f6001ixzpabjm726dv/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f6001ixzpabjm726dv/","excerpt":"","text":"echarts 是非常强大、知名的图表库https://www.echartsjs.com/zh/index.html 官方文档阅读心得 此库文档非常大…一开始阅读总不知道从哪里下手个人总结以下步骤 确定需求，从 官方例子 中，找到类似的作为参考，或直接复制配置套用 首先确认 series 属性，确认图表类型 模拟数据，设置图表类型对应的 data 属性 增加辅助组件(toolbox、timeline、title 等) 设置细节样式 增加交互逻辑 map 系列省份地图 label 自定义位置 问题描述：经常有需求会要求在省份、城市中心显示 labelmap 系列中 label 的属性 position 和 offset 经测试偏移无效并且一个个 “看着大概偏移” 改麻烦的很..开启 legend 组件，这俩属性才有效，暂不知道为啥legend 组件会造成区域上有一个点，也不太好去除 解决办法：放弃使用默认 label，使用 markPoint 模拟 labelmarkPoint data 中项的属性 coord 可以自定义 mark 位置(百度坐标拾取器提取经纬度)然后将图标隐藏（sysbom 空图片 或 大小设置为 1都行） series 散点无效 必须指定 geo，否则无效暂时不知道 geo 和 series 中 type = map 有什么区别…","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"图表","slug":"图表","permalink":"https://q-jason.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"}]},{"title":"心得-移动端适配心得","slug":"心得-移动端适配心得","date":"2019-12-05T01:18:37.000Z","updated":"2020-03-12T01:54:09.472Z","comments":true,"path":"article/ck7o3n8f00013xzpahkrb57e7/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f00013xzpahkrb57e7/","excerpt":"","text":"本文主要讨论移动端开发的页面适配技巧 为何要适配？ 各个手机的屏幕大小不同，若用 px 单位，则会在各个屏幕下显示相同尺寸往往会偏大或偏小，效果差劲，原因是因为没有等比例缩放(没有用相对单位)相对单位有 vw，em，rem，% 等保证其在不同屏幕尺寸下，按照一定的尺寸标准，等比例缩放，实现自动适配 适配方法 原理都是根据屏幕实际宽度来计算 vw 适配方案 ★★★★★由于 1vw = 屏幕总宽的百分之一，是最适合用来适配的单位兼容性不如 rem 单位 rem 适配方案 ★★★★通过改变在 html 标签改变 font-size 属性，实现等比例缩放兼容性很好，是比较老的技术 开发体验 不论是 vw 还是 rem 自己算是很麻烦的… 0.2497rem … 2.645514vw …最好的开发体验是设计图多少就在项目中写多少然后通过预处理语言自动转化为 vw 或 rem 单位 解决方案 vw 在项目中写设计图上的 px 单位通过 postcss-px-to-viewport 预处理转为 vw单位通过 viewport-units-buggyfill 在客户端照顾兼容性 预处理：postcss-px-to-viewport https://github.com/evrone/postcss-px-to-viewportpostcss 的插件，只要写上参考设计图的宽度，自动将 px 单位转为 vw 单位 客户端：viewport-units-buggyfill https://github.com/rodneyrehm/viewport-units-buggyfill这是个 vw 单位的 polyfill，建议配合 postcss-px-to-viewport 使用作用是分析加载的 css 文件，然后将 vw 单位在转为 px，放到 head 中建议非必要不要使用，…有时会出现写莫名其妙的 bug rem 在项目中写设计图上的 px 单位通过 postcss-px2rem，预处理转为 rem 单位通过 hotcss，在客户端改变 html font-size 预处理：postcss-px2rem https://www.npmjs.com/package/postcss-px2rem基于 postcss 的插件，设置好 1rem = ？px 后，自动转换 px 为 rem 单位 客户端：hotcss https://github.com/imochen/hotcssrem 解决方案，按照 640 设计图动态设置 html 的 font-size 属性并通过设置 viewport scale，解决移动端 1px 难题可以设置屏幕最大尺寸，友好的适配桌面端建议配合 postcss-px2rem 使用 12345678910111213141516// hotcss 是已 640 设计图为标准的// 1rem = 40px - 在屏幕为 640// 1rem = 20px - 在屏幕为 320// 1rem = 40px - 在屏幕为 320，但是 viewport scale = 0.5 的情况下，相当于 640// 若设计图尺寸不是 640// 则需要自己换算// 算法为： innerWidth * 20 / 320// innerWidth 为屏幕实际尺寸// 例如：// 750 设计图// 算法为：750 / 2 * 20 / 320// 1rem = 46.875px - 在屏幕为 750// 1rem = 23.4375px - 在屏幕为 375// 1rem = 46.875px - 在屏幕为 375，但是 viewport scale = 0.5 的情况下，相当于 750","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"酷库-swiper","slug":"酷库-swiper","date":"2019-11-28T08:11:03.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8f7001lxzpaftmbb6hr/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f7001lxzpaftmbb6hr/","excerpt":"","text":"swiper https://github.com/nolimits4web/swiper非常知名的触摸滑动解决方案 this.emit 方法 该函数用于主动触发 swiper 的事件，文档中找不到….比如在 transitionStart 中写好了切换函数，但是在 初始化(init) 中也想调用一次就可以在 init 中使用 this.emit(‘transitionStart’) 来调用执行 mousewheel 心得 建议开启 mousewheel.releaseOnEdges 否则鼠标滚轮无效 写项目时使用 swiper@5.2.1，mousewheel 功能有些 bug，垂直滚动异常，降级即可解决","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"轮播功能","slug":"轮播功能","permalink":"https://q-jason.github.io/blog/tags/%E8%BD%AE%E6%92%AD%E5%8A%9F%E8%83%BD/"}]},{"title":"心得-无接口时如何继续前端开发","slug":"心得-无接口时如何继续前端开发","date":"2019-11-26T01:53:05.000Z","updated":"2020-03-12T01:54:09.472Z","comments":true,"path":"article/ck7o3n8ev000uxzpaf12kfcpe/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ev000uxzpaf12kfcpe/","excerpt":"","text":"本文讨论：前端做项目时如何优雅的对接数据接口 问题由来 大多功能都需要接口对接才能完成此时若后端接口还没出来，前端如何做？ 开发时后端各类情况分析 完美型: 已有成型接口 分析：非常理想的开发体验，通常为重构项目等方案：该情况下可以直接使用已有接口进行前端开发，无需特殊注意星级：★★★★★ 常规型：没有成型接口，前后端同时进行 分析：通常为新项目方案：本文着重探讨的情况，继续往下看吧星级：★★★★ 缺陷型：没有成型接口，后端进度比前端慢，甚至慢很多，需要等待接口 分析：后端项目多，任务重等场景方案：本文着重探讨的情况，继续往下看吧星级：★★ 不知所措型：没有成型接口，后端遥遥无期，甚至迷茫 分析：后端极度不确定方案：本文着重探讨的情况，继续往下看吧星级：★ “约定字段” 和 “前端字段” 约定字段这件事通常只是一个规范，一个好的习惯。实际情况前后端可能不会去约定，也无法准确约定，总有纰漏通常情况是 “各做各的”然后数据通过接口返回时才知道字段名好一点的会统一定义些数据模型但是特殊功能，表单提交等，通常也无法保证统一定义 前后端的应用场景不同，所以有时数据结构定义的也不同与其依赖后端的数据结构，还不如自定义前端字段完成功能然后通过 “装载器函数（webLoader）”再将值赋值给前端字段 无接口时的解决方案 无接口不进行 解释：完成基础样式后，放任项目不管，等待后端提供接口后，继续进行。分析：非常适合小型无复杂功能类项目。优点：劳动力最小，小项目很实用缺点：中大项目不适用，开发体验不连贯，“头重，尾重，中间轻”，接口对接时需要同时兼顾前端逻辑和后端对接，导致无法专一面对问题。 mock 数据继续进行 解释：模拟一些数据，继续往下开发，有接口时，将 mock 的数据替换成真实数据分析：mock 数据是 “无后端” 时的唯一办法优点：开发连贯，可以在无后端的情况下，打包一份 mock 版本，保证前端任务完成缺点：根据不同项目需要选择最优的 mock 方式，不健壮的 mock 会带来一定烦恼注意：一定要灵活的切换 mock 和真实环境，否则导致项目频繁报错，查原因很麻烦 前端字段 和 mock 是必须的吗？ “前端字段” 是一种思想抛弃前后端字段统一的问题，使用 loader（装载器函数）的代价完成数据对接 mock 数据的作用就是在无 “真实数据源” 的时候提供一个 “虚假数据源” 继续开发等待有 “真实数据源” 时，再尽量 ！！无缝切换！！ 这俩通常情况下是绑在一起的，定义 “前端字段” 的时候顺便 mock 来个例子 例子功能：数据展示，提交表单项目脚手架：vue-cli后端情况：进度较慢推荐库：mock.js 创建 mock 环境，定义环境变量 process.env.VUE_APP_MOCK 12console.log(process.env.VUE_APP_MOCK)// =&gt; true 切好样式，同时根据功能设计前端字段，同时 mock 数据 1234567891011&lt;template&gt; &lt;div&gt; &lt;div class=\"article\" v-for=\"item in dataArr\" :key=\"item.id\"&gt; &lt;img :src=\"item.cover\" alt=\"\"&gt; &lt;h3 class=\"title\"&gt; &#123;&#123; item.title &#125;&#125; &lt;/h3&gt; &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#123; Random &#125; from 'mockjs';let IS_MOCK = process.env.VUE_APP_MOCK;export default &#123; data () &#123; return &#123; dataArr: IS_MOCK ? [ &#123; id: Random.integer(), pic: Random.dataImage('100x100'), title: Random.ctitle(), desc: Random.cparagraph() &#125;, ] : [] &#125; &#125;, methods: &#123; init () &#123; /** 请求数据 **/ let apiDataArr = new Promise((resolve, reject) =&gt; &#123; /** 不重要 **/ &#125;).then(apiDataArr =&gt; &#123; /** 调用 loader 为前端字段赋值 **/ this.loader(apiDataArr); &#125;) &#125;, loader (apiDataArr) &#123; /*** * 如果是 mock 环境，则使用 mock 数据 * 写在这里的原因是尽量不要在逻辑代码中加入 IS_MOCK 判断 * 影响代码视觉 ***/ if (IS_MOCK) return; /** * 接口字段赋值前端字段 **/ this.dataArr = apiDataArr.map(item =&gt; &#123; return &#123; id: item._id, /** 你永远不知道后端起的什么奇怪的名字... **/ cover: item.p, title: item.t, desc: item.d &#125; &#125;); &#125; &#125;, created () &#123; this.init(); &#125;&#125;","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"对接经验","slug":"对接经验","permalink":"https://q-jason.github.io/blog/tags/%E5%AF%B9%E6%8E%A5%E7%BB%8F%E9%AA%8C/"}]},{"title":"心得-小程序开发集合","slug":"心得-小程序开发集合","date":"2019-11-12T01:23:45.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8en000rxzpahw30dtky/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8en000rxzpahw30dtky/","excerpt":"","text":"记载着小程序的开发心得 框架的选择 若原生撸请忽略，但并不推荐原生的开发体验较为差劲，解决方案少现在是 2020.1.3，个人推荐 uni-app 这个框架真心强大！ uni-app https://github.com/dcloudio/uni-app非常推荐体验：完全的 vue 开发体验，支持所有 vue 语法，支持跨端，社区完善，并拥有插件平台 碰到的问题… 使用 lodash@4.17.15，dev 正常，pro 报错，降级到 lodash@4.16.0 好了 prop 在 template 中传入时，要用驼峰命名，短横线命名会无效 wepy https://github.com/Tencent/wepy不推荐体验：类 vue 开发体验，但是区别还是比较大的，有学习成本问题：使用过一段时间，问题比较多…，放弃使用的原因是 repeat 双层循环，内层循环读取不到数据，并且无解决办法 mpvue https://github.com/Meituan-Dianping/mpvue推荐体验：不完全的 vue 开发体验，不支持 filter 等，其他基本相同，支持跨端问题：据说停止维护了…. 酷库 - html 渲染方案原生 rich-text 组件 无法主动控制样式，只能想办法改变 html 字符串中的 style非常不灵活 wxParse github：https://github.com/icindy/wxParse基于原生小程序，若没有使用其他小程序框架就用它吧 gaoyia-parse github：https://github.com/gaoyia/parse#readmenpm：https://www.npmjs.com/package/gaoyia-parse若为 mpvue uni-app 就用这个 酷库 - 支持 cookie 小程序默认不支持 cookie 传输解决方案：https://github.com/charleslo1/weapp-cookie使用起来非常方便，只需要引入即可，对开发透明 酷库 - 优雅的发送请求 wx-axios 用这个库微信小程序版 axios，作者 fork 原本的 axios 实现api 和 axios 完全一样github：https://github.com/SoloJiang/axiosnpm：https://www.npmjs.com/package/wx-axios 经验 - getCurrentPages 使用注意 getCurrentPages 方法返回的页面数组中 route 属性无查询字符串查询字符串保存在 options 属性中(对象形式)，想要完整的需要自己拼接建议使用 qs 库做拼接 经验 - 储存图片到本地 建议使用 saveImageToPhotosAlbum 这个方法saveFile 保存后，路径很迷，并且无后缀，相册中也找不到saveImageToPhotosAlbum 成功后，微信会自动弹出一个友好提示（水平居中垂直居下的 Toast 弹框）下载图片时，别忘了在微信公众后台增加上 download domain 否则上线后，下载会报错 经验 - 字体（iconfont）引入 小程序不支持加载本地字体文件支持加载网络字体 或把字体文件转为 base64 经验 - button 标签边框 button 边框是用 :after 实现的并不是 border 实现 经验 - 分包 小程序有代码体积限制（小于 2m）若体积过大就只能用分包的形式建议稍微大一丢丢的项目一开始就考虑分包 uni-app 可以强制开启代码压缩缓解在开发环境下体积过大，无法真机预览的问题 12345678// vue.config.js// uni-app 强制开启代码压缩module.exports = &#123; configureWebpack (config) &#123; // 防止在开发环境文件过大的情况 config.optimization.minimize = true &#125;&#125; 123456// uni-app 的分包优化配置&quot;mp-weixin&quot;: &#123; &quot;optimization&quot; : &#123; &quot;subPackages&quot; : true &#125;&#125; 经验 - map 组件marker 自定义文字的位置 2020.1.2…建议放弃使用下面的想法，还是改用一张图片实现经过测试有些 bug 无法解决 位置太难对准 ios 设备上有 marker 和 label 的层叠性问题 ios 效果如下 marker callout 只能显示在 marker 的上方，位置不能改变marker label 可以改变相对于 marker 的位置(大约计算)但是没有 left，center，right 这种属性下面例子使用 label 实现文字垂直居中对其 1234567891011let markerArr = [ &#123; // ... marker options ... label: &#123; // ... label options ... anchorX: ('自定义文字'.length * 4.7) * -1, anchorY: -29 &#125; &#125;, // ... other marker] 经验 - input change 事件不触发 已知基础库 2.9.3 有这个 bug若出现，降级或升级试试看 经验 - h5-helper（使用h5页面辅助完成小程序功能） 小程序的部分场景功能，可以使用 web-view 引入 h5 网页来实现通过 bindmessage 来返回参数 比如： 海报生成（H5有现成的 html2canvas，可以轻松实现 dom - 图片的转换） 电子签名（drawingboard.js 可轻松实现） 填坑 - map markertap 不触发 对应的 marker 数据需要设置 id否则 markertap 不会触发（uni-app 项目测试） 填坑 - uni-app map 事件 markertap 回调参数各平台不一致 markerId 位置不一致 123// e.markerId 是小程序// e.detail.markerId 是h5let id = e.markerId || e.detail.markerId","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"开发经验","slug":"开发经验","permalink":"https://q-jason.github.io/blog/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"},{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"}]},{"title":"酷库-图片相关","slug":"酷库-图片相关","date":"2019-11-11T01:25:31.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8ff001xxzpa8lcl0acp/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ff001xxzpa8lcl0acp/","excerpt":"","text":"fancybox（基于 jquery） https://github.com/fancyapps/fancybox作用：点击看大图、视频、模态框备注：功能非常强大，但是基于 jQuery lightgallery.js（基于原生） github：https://github.com/sachinchoolur/lightgallery.jsnpm：https://www.npmjs.com/package/lightgallery.js作用：图片、视频相册备注：目前没深入使用，目前查看不支持 html 自定义标签（模态框） medium-zoom https://github.com/francoischalifour/medium-zoom作用：点击看大图备注：功能单一，原生 js 实现 smartcrop.js https://github.com/jwagner/smartcrop.js用途：根据传入的长宽比，计算出图片的主要内容区域场景：主要用于响应式图片 grade https://github.com/benhowdle89/grade用途：根据图片主题色生成渐变色场景：主要用于图片背景","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"图片","slug":"图片","permalink":"https://q-jason.github.io/blog/tags/%E5%9B%BE%E7%89%87/"}]},{"title":"心得-bfcache","slug":"心得-bfcache","date":"2019-11-08T01:36:31.000Z","updated":"2020-03-12T01:54:09.460Z","comments":true,"path":"article/ck7o3n8dp0000xzpagajyfvvb/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8dp0000xzpagajyfvvb/","excerpt":"","text":"本文讨论 bfcache 机制带来的一些 bug bfcache 是啥 是一个游览器机制比如说从 a 网页去 b 网页，然后再点击 b 网页的回退按钮回到 a 网页页面不会刷新，而是使用缓存，用意是提高用户体验表单提交场景发生的比较多 例子：项目分析 项目：后端模板 webApp 项目前端：使用了 vue 做部分的效果(日期选择等，现成的组件)，页面上留有额外 input 供后端提取值后端：使用了 php 模板渲染页面结论：使用了较为混乱的开发方式，本以为使用额外 input 与后端进行解耦就可以顺利使用 vue 组件 例子：html结构1234567891011121314&lt;main&gt; &lt;div id=\"app\"&gt; &lt;!-- vue 组件 --&gt; &lt;vue-comp-input/&gt; &lt;vue-comp-input/&gt; &lt;vue-comp-input/&gt; &lt;vue-comp-input/&gt; &lt;/div&gt; &lt;!-- 供后端提取值的额外 input --&gt; &lt;input type=\"text\"&gt; &lt;input type=\"text\"&gt; &lt;input type=\"text\"&gt; &lt;input type=\"text\"&gt;&lt;/main&gt; 例子：bug 展示 总结 找了半天原因应该是就是因为使用了混乱的开发方式，导致使正常的 bfcache 逻辑出错最终想到放弃使用 bfcache 逻辑，每次都强制刷新页面即可解决这个问题解决方案如下： 12345678910// 将此代码放到 head 标签靠上的位置// 否则会加载额外的资源// 此代码相当于使用 bfcache 机制的回调// 使用 location.reload 重置页面window.addEventListener('pageshow', function (e) &#123; if (e.persisted || (window.performance &amp;&amp; window.performance.navigation.type == 2)) &#123; location.reload(); &#125;&#125;, false);","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器机制","slug":"游览器机制","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E6%9C%BA%E5%88%B6/"}]},{"title":"心得-傻傻分不清的 DOM 尺寸属性","slug":"心得-傻傻分不清的DOM尺寸属性","date":"2019-11-08T01:14:07.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8eh000ixzpa35j90z2d/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8eh000ixzpa35j90z2d/","excerpt":"","text":"主要讨论以下属性 / 方法 clientHeight / clientWidth offsetHeight / offsetWidth scrollHeight / scrollWidth getBoundingClientRect 方法 包罗万象 看懂了就啥都明白了 clientHeight / clientWidth 包含 padding，不包含 border、margin、滚动条尺寸 offsetHeight / offsetWidth 包含 padding、border、滚动条尺寸，不包含 margin scrollHeight / scrollWidth 此属性一般用于有滚动条的元素返回滚动内容的总尺寸 getBoundingClientRect 用于获取某个元素相对于视窗的位置集合返回值对象中有 top, right, bottom, left, width, height 属性。其中 width, height 有些兼容问题（IE 中没有这俩属性） 12let react = domObj.getBoundingClientRect();// =&gt; &#123; top, right, bottom, left, width, height &#125;","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"属性记载","slug":"属性记载","permalink":"https://q-jason.github.io/blog/tags/%E5%B1%9E%E6%80%A7%E8%AE%B0%E8%BD%BD/"}]},{"title":"心得-到底是谁的滚动条","slug":"心得-到底是谁的滚动条","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8ej000lxzpaetpjb4pc/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ej000lxzpaetpjb4pc/","excerpt":"","text":"网页中默认的滚动条到底是哪个元素的？body？html？ 测试 打印输出各大游览器 body 和 html 标签的 scrollTop 属性 chrome firefox ie11 safari 总结 除去 safari 默认滚动条都是 html 元素的只有 safari 这个奇葩滚动条是使用 body 元素的为啥 safari 这个奇葩总会有各种有问题…… 优雅的获取页面滚动位置1234567891011// IE9+window.pageYOffset;// 非 IEwindow.scrollY;// IE8以及以下document.documentElement.scrollTop;// 兼容性最好的写法window.pageYOffset || document.documentElement.scrollTop; 优雅的滚动页面原生方法（推荐）12345// 这俩货是一样的....window.scrollTo(x, y);// 相对滚动window.scrollBy(offsetX, offsetY) 直接赋值（不推荐）12345// chrome, ie, 火狐 ...document.documentElement.scrollTop = 100// 奇葩 safaridocument.body.scrollTop = 500","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"},{"name":"属性记载","slug":"属性记载","permalink":"https://q-jason.github.io/blog/tags/%E5%B1%9E%E6%80%A7%E8%AE%B0%E8%BD%BD/"}]},{"title":"心得-移动端理想的用户体验","slug":"心得-移动端理想的用户体验","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.472Z","comments":true,"path":"article/ck7o3n8ey000zxzpafnyk1v3w/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ey000zxzpafnyk1v3w/","excerpt":"","text":"目前前端的跨端技术层出不穷，开发快，对用户透明。对前端开发者来说掌握的东西要更多了~ 本文谈论一些原生移动 app 用户体验 体验分析 每天都会用各种 app，各种操作熟记于心总结出以下网页不容易实现的需求 类似网页的历史记录，前进刷新网页，后退时使用历史缓存 前进或者后退（物理返回键）会有不同的切换效果（滑动切换） 点击物理返回键时若正处于 “模态对话框(dialog, alert)等”，不会返回页面，会先将对话框关闭 实现难点分析以及解决方案 vue keep-alive 无法实现前进刷新，后退使用缓存的 app 缓存逻辑 这里可以使用 vue-navigation 实现 前进和后退实现不同的切换效果 vue transition 标签配合 vue-navigation 实现 模态框逻辑，如何判断当前正在弹框，如何优雅的阻止切换切换并关闭模态框 推荐 vue-create-api 这个库，本文例子中使用了 element-ui 中的 MessageBox 实现 例子 github","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"心得-hover伪类选择器-移动端的表现","slug":"心得-hover伪类选择器-移动端的表现","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.464Z","comments":true,"path":"article/ck7o3n8dw0002xzpa17wo7zy0/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8dw0002xzpa17wo7zy0/","excerpt":"","text":"这里主要记载一个响应式项目中碰到的下拉菜单的问题 美化下拉菜单在项目中是常见的需求常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单但是 :hover 在移动端兼容并不友好经过测试，在除 safari 的游览器中，兼容还比较好，唯独 safari 出现了问题… 例子 移动端 safari 的奇怪表现 必须是 a 元素才能触发 :hover 将元素修改成了 a 之后，点击页面其他处无法失去 :hover 焦点，除非点击其他 按钮 或 input 解决方案 使用 js 事件加 class 的方式实现，代替 :hover","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"}]},{"title":"酷库-低版本IE辅助库","slug":"酷库-低版本IE辅助库","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8fa001rxzpacz0z4w65/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8fa001rxzpacz0z4w65/","excerpt":"","text":"万恶的 IE….. 参考 css 圆角 和 阴影（PIE - 实现圆角和阴影） css background-size（background-size-htc - 实现背景大小设置，可惜只兼容到 IE8） css border-spacing IE 6 7 不支持（给 td 设置高度模拟） css border-box （box-sizing-polyfill） 表单元素的 placeholder（jquery.placeholder - 简单粗暴）","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"IE","slug":"IE","permalink":"https://q-jason.github.io/blog/tags/IE/"}]},{"title":"职场-工资算法","slug":"职场-工资算法","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8f4001bxzpa9c1i45p6/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f4001bxzpa9c1i45p6/","excerpt":"","text":"目前是 2019.10.03，本文记载着我理解的五险一金和税款的算法，具体比例会隔几年一调整，想要精确百度下即可。 个人承担比例 养老 = 8% 医疗 = 2% 失业 = 0.3% 一金 = 12%（该值非规定） 税款 = 0.03%（工资越高税率越高，具体百度吧） 例子 应发工资 10000 五险 养老 10000 * 0.08 = 800 失业 10000 * 0.003 = 30 医疗 10000 * 0.02 = 200 生育和工伤不需要个人承担 总共 800 + 30 + 200 = 1030 公积金 一金较为特殊，需要看公司定的缴纳基数（可能会按照比应发工资低的基数缴纳） 一金理想情况 10000 * 0.12 一金非理想情况 2600 * 0.12（2600是胡乱写的，具体要公司定） 总共（理想） 10000 * 0.12 = 1200 税款 这个较为复杂，目前应发工资超过 5000 才交税，税率为 3%工资到达某档位后，税率也会加，10000 是 3%，具体百度吧但是 3% 并不指的是应发工资（10000）的 3%，而是 应发工资 - 底数 - 五险一金扣款后 的剩余部分看公式吧 (10000 - 5000 - 五险一金个人承担部分) * 0.03 = 所需要交纳的税款 (10000 - 5000 - 1030 - 1200) * 0.03 = 83.1 实发工资 应发工资 - 五险 - 公积金 - 税 = 实发工资 10000 - 1030 - 1200 - 83.1 = 7686.9","categories":[{"name":"职场经验","slug":"职场经验","permalink":"https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"工资","slug":"工资","permalink":"https://q-jason.github.io/blog/tags/%E5%B7%A5%E8%B5%84/"}]},{"title":"心得-移动端文字垂直居中的影响因素","slug":"心得-移动端文字垂直居中的影响因素","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.472Z","comments":true,"path":"article/ck7o3n8ex000xxzpa2tcnc04w/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ex000xxzpa2tcnc04w/","excerpt":"","text":"移动端开发时经常会碰到文字居上的问题经过测试发现，主要是使用了独特的 font-family 引起的 移动端最佳 font-family 设置1234567body &#123; font-family: -apple-system, BlinkMacSystemFont, \"PingFang SC\", \"Helvetica Neue\", STHeiti, \"Microsoft Yahei\", Tahoma,Simsun,sans-serif;&#125; 移动端 input placeholder 居上 经过测试是由于 placeholder 默认的 line-height 导致的 1234/* safari placeholder 偏上的问题 */input::-webkit-input-placeholder &#123; line-height: normal;&#125; 问题重现android 未设置特殊字体 android 设置了特殊字体 ios 未设置特殊字体 ios 设置了特殊字体","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"}]},{"title":"心得-window.opener","slug":"心得-window.opener","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8ec000dxzpa7uewdtrm/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ec000dxzpa7uewdtrm/","excerpt":"","text":"项目中经常存在着需要跳转网页然后再跳转回来的需求比如说 oauth 登陆，微信支付宝等第三方登陆等若采用通常的链接跳转，会失去当前页面的所有逻辑回调跳转回来时页面也会重新加载用户体验极差，代码逻辑也失去了连贯性 终于有一天。。我发现了 window.opener….. window.open 该方法将打开一个新的网页标签注意：若用户未交互，游览器会阻止该方法的执行（游览器会认为不是用户的操作，认为是广告等）解决：在用户交互事件中调用 window.open（click 等事件） 123document.getElementById('btn').addEventListener(function (e) &#123; window.open('https://www.baidu.com');&#125;) window.opener 当前网页必须由 window.open 打开时才有window.opener 指向 window.open 时的父 window 对象 1window.opener.alert('提示') 实现（跳转网页回调）父窗口123456789// 定义回调 cb 事件window.callback = function (params) &#123; console.log(params);&#125;;// 点击按钮触发网页跳转，打开一个新页面document.getElementById('btn').addEventListener(function (e) &#123; window.open('https://www.baidu.com');&#125;) 子窗口12345// 触发父窗口回调方法，并传入参数window.opener.callback(/* any */);// 关闭当前子窗口window.close(); 这样保证了页面的执行顺序，也保证了用户体验。","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"优化逻辑","slug":"优化逻辑","permalink":"https://q-jason.github.io/blog/tags/%E4%BC%98%E5%8C%96%E9%80%BB%E8%BE%91/"},{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"心得-vh单位的可信度","slug":"心得-vh单位的可信度","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.468Z","comments":true,"path":"article/ck7o3n8ea000cxzpaeyulfbch/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8ea000cxzpaeyulfbch/","excerpt":"","text":"vw, vh 都是自适应页面的利器vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！ 问题 手机游览器的 100vh 总会高出一截经过查阅，好像是算上了地址栏的高度，并且不准备修复，被认为是正常的。 测试代码1&lt;div id=\"test\" style=\"height: 100vh\"&gt;&lt;div&gt; 1alert('innerHeight: ' + innerHeight + '\\n' + 'test元素高度: ' + $('#test').css('height')); PC端测试 移动端测试 解决思路 使用 js 赋值 innerHeight 1$('.height-full').css('height', window.innerHeight);","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"}]},{"title":"酷库-滚动监听","slug":"酷库-滚动监听","date":"2019-11-08T01:06:15.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8fl0028xzpaemswffoz/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8fl0028xzpaemswffoz/","excerpt":"","text":"gumshoe https://github.com/cferdinandi/gumshoe项目中经常有需求的锚点滚动监听需求我之前尝试过用 ScrollReveal 实现，但是逻辑不太一样","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"滚动监听","slug":"滚动监听","permalink":"https://q-jason.github.io/blog/tags/%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC/"}]},{"title":"酷库-vue相关","slug":"酷库-vue相关","date":"2019-11-07T01:06:15.000Z","updated":"2020-03-12T01:54:09.476Z","comments":true,"path":"article/ck7o3n8f9001pxzpa2ztrfar5/","link":"","permalink":"https://q-jason.github.io/blog/article/ck7o3n8f9001pxzpa2ztrfar5/","excerpt":"","text":"UI库element-ui https://github.com/ElemeFE/element主要用于 PC 端项目个人认为其中的 messageBox (弹框消息盒子) 组件特别好用移动端改改样式其实也可以正常使用 vant-ui https://github.com/youzan/vant主要用于移动端项目拥有大量的实用组件 cube-ui https://github.com/didi/cube-ui主要用于移动端项目拥有大量实用组件 transition 过渡动画vue2-animate https://github.com/asika32764/vue2-animate基于 animate.css 封装的进场离场动画 表单验证vee-validate https://github.com/logaretm/vee-validate主要用于表单验证，使用起来十分优雅方便，可嵌套几乎任何 ui 库使用内置了大量的规则，并实现了国际化 函数式调用vue-create-api ★ https://github.com/cube-ui/vue-create-api强烈推荐作用是将组件函数式调用，主要用于弹框等，可以设置单例模式。 时间操作、格式化vue-moment https://github.com/brockpetrie/vue-moment将 moment 封装为 js 过滤器 离线存储vuex-persistedstate https://github.com/robinvdvleuten/vuex-persistedstate主要用于 vuex 离线存储例如：存储用户状态 token 等 拖拽排序Vue.Draggable https://github.com/SortableJS/Vue.Draggable用于拖拽排序场景，高星库 地图vue-baidu-map https://github.com/Dafrok/vue-baidu-map作用：组件化实现百度地图的功能备注：推荐使用，使用起来非常优雅 表单vue-echarts https://github.com/ecomfe/vue-echarts作用：对 echarts 的组件封装备注：大量数据时，要注意 vue 数据绑定的性能问题备注：组件提供了 props manual-update 来避免数据绑定 国际化vue-i18n github: https://github.com/kazupon/vue-i18n备注：碰到国际化问题无脑用就行了 改变语言 若在组件中用 this.$i18n.locale 改变，则只会改变当前组件要改变 this.$root.$i18n.locale 或 i18n 实例，才会全局改变","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://q-jason.github.io/blog/tags/vue/"}]}]}