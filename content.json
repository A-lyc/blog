{"meta":{"title":"qteam","subtitle":"博客","description":"碰到的事情，记下来，才是真的","author":"jason","url":"https://q-jason.github.io/blog","root":"/blog/"},"pages":[{"title":"","date":"2020-04-20T11:40:31.515Z","updated":"2020-04-20T11:40:31.515Z","comments":false,"path":"categories/index.html","permalink":"https://q-jason.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-04-20T11:40:31.515Z","updated":"2020-04-20T11:40:31.515Z","comments":false,"path":"tags/index.html","permalink":"https://q-jason.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"心得-SPA项目-qs和hash的顺序","slug":"心得-SPA项目-qs和hash的顺序","date":"2020-04-20T11:30:49.000Z","updated":"2020-04-20T11:40:31.495Z","comments":true,"path":"article/ck98ergei00004wrq1te75fxc/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergei00004wrq1te75fxc/","excerpt":"","text":"观察下图 url 和控制台的输出 查询字符串在后 若为 SPA 项目，qs 应该在 hash 之后vue-router、react-router 都是按照这个顺序做的 api ————- 手动间隙 ————- ————- 手动间隙 ————- 查询字符串在前 若为常规项目，则 qs 应该在 hash 之前 ————- 手动间隙 ————-","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://q-jason.github.io/blog/tags/vue/"},{"name":"react","slug":"react","permalink":"https://q-jason.github.io/blog/tags/react/"}]},{"title":"职场-人事档案","slug":"职场-人事档案","date":"2020-04-17T13:55:49.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergg8001h4wrqhq1ae0ge/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergg8001h4wrqhq1ae0ge/","excerpt":"","text":"档案…一个从小就听上一辈说…非常重要的玩意… 啥是档案 简单来说就是一个小袋子，这个小袋子从你上小学开始就开始装东西装着你在哪上的学，获得过啥荣誉，有没有惹祸（记过）等信息 未参加工作前，所有人的档案都由学校统一保管走流程，不需要自己费心参加工作后，每个人的档案开始就各不相同了… 有的人去了国企，有的人当了老师，有的人做了公务员，有的人去了私营企业…单位和职位各不相同，档案的作用和管理方法，也各不相同 档案不能放在自己手中（非必须，很多人都放在自己手里保管，但是最好不要，继续往下看吧）通常要由公司保管（国企、老师、公务员）或交给当地的 “人力资源市场”（私营企业） 学校给的报到证（不确定，仅供参考） 离开学校的大门时，学校一定会统一发一张 “报到证” 这个证很重要，掉了不知道咋补（应该是能补） 这玩意作用是在你第一份工作转正时，你的所在单位会需要这张 “报到证”，会问你要，把你的档案身份从 “学生” 变为 “职工/社会人员”，之后好像就没啥用处了… 第一份工作离职后，第二份工作就不需要 “报到证” 了（目前看起来就没啥用了…） 注意：第一份工作的单位将你档案的 “学生” 身份转为 “职工/社会人员” 后，通常这个公司会帮你保管着档案 国企员工、老师、公务员等 这几类职位对档案非常看重！据说是通过档案的工龄（工作年龄）来评职称一定要多留心，否则就算工作了很长时间，但是不算工龄就亏大了！ 私营企业员工 这类员工（大多数人…）档案的作用不是很大，甚至说完全没用退休的时候能用一把，作为退休材料提交，所以要知道档案在哪里保管着，用的时候别抓瞎找不到档案的工龄和退休（养老金等）没有任何关系…（现实例子 + 百度查阅，很确定）退休只和年纪、交养老保险的累计年限、交医疗保险的累计年限有关，养老保险交的越多拿的越多 令人迷惑的 “国企” 和 “私企” 档案管理方式 国企：国企公司有权利自己保管员工档案（没去过国企暂时不知道是否一定会强制保管…）私企：没有权利保管员工档案，只能花钱通过第三方管理（可以理解为租了一个人力局的小柜子） 注意：私企现在很多都不会管理员工档案会让你自己保管着档案，或者干脆不理睬档案的管理问题五险一金都不基于档案，没有档案也可以交很正常！因为管理是需要给私企增加另外一部分费用的（因没有权限，需要”租”） 我目前的流程 私营企业 我在学校毕业，拿到了 “报到证” 我找到了心仪的私营公司，并在这个单位成功转正入职（第一次转正） 该单位问我要 “报到证”，将我的档案身份从 “学生” 转为了 “社会人员”，并给我保存了档案（我记得还在 “毕业生就业信息网” 网上填了些东西） 我在这个私营公司离职了，公司将我的个人档案袋子直接给了我 目前我属于失业人员，我拿着档案袋子到当地的 “人力资源市场” 办理了 “失业人员档案托管”（不花钱） 我入职了新公司（还是私营企业），我询问过新公司不保管员工档案 档案就一直存在 “人力资源市场”，不会移出（我咨询过办理人员，很确定） 直到以后工作找到了 “保管档案的公司”，再由该公司从 “人力资源市场” 移出，转入公司档案管理流程（个人好像无法主动把档案提出来…不确定） 若以后的所有单位全都不管理档案，那么这个档案就会一直在 “人力资源市场”，需要时就去 “人力资源市场” 找（退休等场景，目前就知道退休会要档案作为材料，未发现其他场景）","categories":[{"name":"职场经验","slug":"职场经验","permalink":"https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"人事档案","slug":"人事档案","permalink":"https://q-jason.github.io/blog/tags/%E4%BA%BA%E4%BA%8B%E6%A1%A3%E6%A1%88/"}]},{"title":"酷库-解决js计算精度问题","slug":"酷库-解决js计算精度问题","date":"2020-04-15T12:06:20.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggz00304wrqegxb2au3/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggz00304wrqegxb2au3/","excerpt":"","text":"js 精度问题例子 就问你蛋不蛋疼… 12345console.log(0.1 + 0.2)// =&gt; 0.30000000000000004console.log(45685 * 666.7)// =&gt; 30458189.500000004 mathjs 此库是 javascript 数学库github: https://github.com/josdejong/mathjsnpm: https://www.npmjs.com/package/mathjs文档：https://mathjs.org/docs/datatypes/bignumbers.html 例子如下有两种使用方式，选其一使用即可 1234567891011121314151617import * as math from 'mathjs' console.log( math.add( math.bignumber(0.1), math.bignumber(0.2) ).toNumber())// =&gt; 0.3console.log( math.multiply( math.bignumber(45685), math.bignumber(666.7) ).toNumber())// =&gt; 30458189.5 12345678910111213141516171819import &#123; create, all &#125; from 'mathjs'/** 创建一个 math 新实例 **/const math = create(all)math.config(&#123; number: 'BigNumber', precision: 64&#125;)console.log( math.evaluate('0.1 + 0.2').toNumber())// =&gt; 0.3console.log( math.evaluate('45685 * 666.7').toNumber())// =&gt; 30458189.5","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"计算精度","slug":"计算精度","permalink":"https://q-jason.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6/"}]},{"title":"职场-离职和入职","slug":"职场-离职和入职","date":"2020-04-10T02:24:00.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98erggc001o4wrq21cy5w6z/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggc001o4wrq21cy5w6z/","excerpt":"","text":"离职和入职前多看一眼吧虽然可能都是大白话，但是都是必要的过程 离职 提前打招呼，既然说了就一定不要多逗留，除非有特殊原因，能早离开就早离开 要一份离职证明，新单位一般都是需要的 搞明白离职当月的社保交还是不交，要是不交你的到手工资会比平常的多一些 入职 搞清楚公司是干什么的，是个什么方向 上班时间，休息时间，加班等时间相关的情况 了解在公司中你的工作需要涉及的区域，不要跨越，不要扔锅 几号发工资，压不压第一个月工资，什么形式发工资，发哪个银行，提前去办银行卡 实习期过后，若转正无人领路，主动问人事一嘴","categories":[{"name":"职场经验","slug":"职场经验","permalink":"https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"离职和入职","slug":"离职和入职","permalink":"https://q-jason.github.io/blog/tags/%E7%A6%BB%E8%81%8C%E5%92%8C%E5%85%A5%E8%81%8C/"}]},{"title":"心得-获取Dom元素的相对位置","slug":"心得-获取Dom元素的相对位置","date":"2020-04-02T03:09:08.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergfx001a4wrq4uks3yjj/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfx001a4wrq4uks3yjj/","excerpt":"","text":"元素相对于视口的距离 domEl.getBoundingClientRect 这个方法可以轻松获取例子如下： 123let react = domObj.getBoundingClientRect();// react = &#123; top, right, bottom, left, width, height &#125;// 其中 width, height 有些兼容问题（IE 中没有这俩属性） 各个属性解释如下 —————— END —————— 元素的定位父元素以及距离 解释：”定位父元素” 是距离自身最近的 position: relative || absolute || fixed 的父级元素获取：用 dom 原生属性即可获取例子：看下图 注意： 元素自身有 fixed 定位，offsetParent 的结果为 null 元素自身无 fixed 定位，且父级元素都未经过定位，offsetParent 的结果为 body body 元素的 parentNode 是 null —————— END —————— 元素相对于页面最顶部的距离 无现成属性可以通过计算而来方法如下： 123console.log( el.getBoundingClientRect().top + window.pageYOffset) —————— END ——————","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"文档","slug":"文档","permalink":"https://q-jason.github.io/blog/tags/%E6%96%87%E6%A1%A3/"},{"name":"DOM","slug":"DOM","permalink":"https://q-jason.github.io/blog/tags/DOM/"},{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}]},{"title":"运维-docker技术","slug":"运维-docker技术","date":"2020-03-23T07:53:50.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergge001s4wrq01025ykv/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergge001s4wrq01025ykv/","excerpt":"","text":"在工作中认识了 docker仔细一看这玩意真是强大… 简单介绍：有亲手配置过服务器线上项目的一定经历过很多痛苦通常是这个环境不对，那个环境不对的docker 就是解决这个的（不用自己配置服务器运行环境了） 原理以及名词介绍：镜像：也称为 image，就是把本地的项目和环境打包成一个镜像文件（你可以理解一个压缩包）容器：是镜像的实例（面向对象的思想），就像是 windows 系统，同一个镜像可以给很多电脑装系统通过 “镜像” 生成 “容器”，每一个容器都是封闭的通常会有一个端口号对外映射暴露，提供服务 学习文章 阮一峰老师：http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html","categories":[{"name":"运维","slug":"运维","permalink":"https://q-jason.github.io/blog/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"node","slug":"node","permalink":"https://q-jason.github.io/blog/tags/node/"},{"name":"docker","slug":"docker","permalink":"https://q-jason.github.io/blog/tags/docker/"}]},{"title":"酷库-走马灯效果","slug":"酷库-走马灯效果","date":"2020-03-17T02:03:58.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98ergh000354wrqgajh6hh3/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergh000354wrqgajh6hh3/","excerpt":"","text":"也许你可以先试试 marquee 标签这个标签已经被 w3c 淘汰，各大浏览器对这个标签的支持非常好 marquee-js 简介：基于原生实现，github 星不太高（能用就行哈哈哈）home: http://mapleliu.com/marquee-jsgithub: https://github.com/liujian10/marquee-js#readmenpm: https://www.npmjs.com/package/marquee-js","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"走马灯","slug":"走马灯","permalink":"https://q-jason.github.io/blog/tags/%E8%B5%B0%E9%A9%AC%E7%81%AF/"}]},{"title":"酷库-表单验证","slug":"酷库-表单验证","date":"2020-03-12T10:41:50.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggx002x4wrq0kk2ckb1/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggx002x4wrq0kk2ckb1/","excerpt":"","text":"async-validator（原生，无依赖） github: http://github.com/yiminghe/async-validatornpm: https://www.npmjs.com/package/async-validator非常强大的验证库用法大约就是先定义对象风格，然后生成验证器，传入对象进行验证看名字就知道支持异步验证！下面总结几个需要理解才能懂的知识 whitespace 的作用是判断是否为只包含空格的字符串，这个属性在字段的风格中写 一个字段可以包含多个验证（数组），这个好处是可以定义多个 message 来响应不同的错误 123456let validator = new Schema(&#123; name: [ &#123; type: 'string', required: true, message: '姓名不能为空', whitespace: true &#125;, &#123; min: 2, max: 4, message: '姓名为 2 ~ 4 位' &#125; ]&#125;) vee-validate（vue） github: https://github.com/logaretm/vee-validatenpm: https://www.npmjs.com/package/vee-validate直接在 template 模板中写验证规则，代码逻辑上比较友好原则上所有 vue ui 库都能使用支持异步验证（通过手动 setErrors 的方式）","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"表单验证","slug":"表单验证","permalink":"https://q-jason.github.io/blog/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"}]},{"title":"酷库-mockjs","slug":"酷库-mockjs","date":"2020-03-12T01:54:09.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggj00224wrq60v040wj/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggj00224wrq60v040wj/","excerpt":"","text":"模拟数据应该是开发中必有的情况= = mockjs home：http://mockjs.comgithub：https://github.com/nuysoft/Mocknpm：https://www.npmjs.com/package/mockjs文档查阅：https://github.com/nuysoft/Mock/wiki 示例查阅：http://mockjs.com/examples.html Random 单词记录 记录着常用的单词注：字符串类型通常分为英文和中文，中文是在英文的单词基础上前面加 ‘c’ex: title, ctitle 标题（title，ctitle）1234567891011// Random.title( min?, max? )Random.title()// =&gt; \"Ploinc Trus Ukvfcqv\"Random.title(3, 5)// =&gt; \"Fllryhnhn Uouqco Adhmx Jnux\"// Random.ctitle( min?, max? )Random.ctitle()// =&gt; \"期和效除亲专\"Random.ctitle(3, 5)// =&gt; \"北二亲\" 段落描述（paragraph，cparagraph，sentence, csentence） min 和 max 代表的是几句话，而为字符串个数 1234567891011// Random.paragraph( min?, max? )// Random.sentence( min?, max? )Random.paragraph()Random.sentence()// =&gt; \"Uspwcg symp bbn dydjdkgmh odhxg ppfmw sxcqcc ixacnm ouubxyh ohdq hdnytokmq jpekjv sgfodecmp.\"// Random.cparagraph( min?, max? )// Random.csentence( min?, max? )Random.cparagraph()Random.csentence()// =&gt; \"算对但放经被将始参文工价适。等开飞之提正与九入养出交装达指。者住小机价更系头日体活七你马王报设。保车技置思走少必问样总主米时四选群土。\" 图片（image、dataImage）1234567// Random.image( size, background, foreground, format, text )Random.image('200x100', '#894FC4', '#FFF', 'png', '!')// =&gt; 返回一张真实的网络图片路径// Random.dataImage( size, text )Random.dataImage('200x100', 'Hello Mock.js!')// =&gt; base64 格式的图片 时间（date，time，datatime，now） format 传 T 则会转为毫秒值 12345678910111213141516171819202122232425// Random.date( format? )Random.date()// =&gt; \"2008-09-07\"Random.date('yy-MM-dd')// =&gt; \"91-05-09\"// Random.time( format? )Random.time()// =&gt; \"09:38:34\"Random.time('HH:mm:ss')// =&gt; \"01:45:11\"// Random.datetime( format? )Random.datetime()// =&gt; \"1977-11-12 07:01:43\"Random.datetime('yyyy-MM-dd A HH:mm:ss')// =&gt; \"1999-08-30 PM 15:20:22\"// Random.now( unit?, format? )Random.now()// =&gt; \"2020-03-12 09:58:09\"Random.now('hour')// =&gt; \"2020-03-12 90:00:00\"Random.now('yyyy-MM-dd HH:mm:ss SS')// =&gt; \"2020-03-12 09:58:09 206\" id标识（id） 不光有数字，可能会有 X 字符串 12Random.id()// =&gt; \"51000019730908273X\" 数字（integer，float）1234567891011// Random.integer( min?, max? )Random.integer()// =&gt; -7897216954377768Random.integer(60, 100)// =&gt; 92// Random.float( min?, max?, dmin?, dmax? )Random.float()// =&gt; -996747130985524.9Random.float(60, 100, 3, 5)// =&gt; 87.3435 布尔（boolean）12345// Random.boolean( min?, max?, current? )Random.boolean()// =&gt; falseRandom.boolean(1, 9, true)// =&gt; false 人名（name，cname）12345678// Random.name( middle? )Random.name()// =&gt; \"Matthew Jones\"Random.name(true)// =&gt; \"Ronald Sharon Martinez\"Random.cname()// =&gt; \"武超\" 地区（region，province，city，county）123456789101112131415Random.region()// =&gt; \"华中\"Random.province()// =&gt; \"吉林省\"Random.city()// =&gt; \"石家庄市\"Random.city(true)// =&gt; \"海南省 三亚市\"Random.county()// =&gt; \"西贡区\"Random.county(true)// =&gt; \"广东省 中山市 -\"","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"mock 数据","slug":"mock-数据","permalink":"https://q-jason.github.io/blog/tags/mock-%E6%95%B0%E6%8D%AE/"}]},{"title":"酷库-涂鸦签名","slug":"酷库-涂鸦签名","date":"2020-03-12T01:20:05.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggt002n4wrqh0ww90wt/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggt002n4wrqh0ww90wt/","excerpt":"","text":"drawingboard.js github 好几年没更新了，但是差不多能满足需要https://github.com/Leimi/drawingboard.jshttps://www.npmjs.com/package/drawingboard.js","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"涂鸦签名","slug":"涂鸦签名","permalink":"https://q-jason.github.io/blog/tags/%E6%B6%82%E9%B8%A6%E7%AD%BE%E5%90%8D/"}]},{"title":"心得-react","slug":"心得-react","date":"2020-03-08T06:37:31.000Z","updated":"2020-04-20T11:40:31.503Z","comments":true,"path":"article/ck98ergf600084wrqgr24fuum/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergf600084wrqgr24fuum/","excerpt":"","text":"vue 和 react 是目前前端主要使用的框架在国内还是 vue 用的较多，api 记得也比较熟练vue 和 react 的作用和 api 基本差不多…经常容易记混这里记录一下，方便日后提醒 优雅的 css module react 不像 vue 有 scopedcreate-react-app 默认集成了 css-module个人感觉也是比较好使的一种方式 命名需要已 .module 的方式结尾并在组件中引入 styles 对象 ———————– 手动间隙 ———————– 在 jsx 中定义 className ———————– 手动间隙 ———————– 在 css 文件中定义样式，要覆盖其他组件的样式则用 :global ———————– 手动间隙 ———————– 覆盖其他组件的样式生成后 ———————– 手动间隙 ———————– 后代选择器类名生成后 ———————– 手动间隙 ———————– 传入组件的 props 中涉及类名的，也需要使用 styles 对象的方式 ———————– 手动间隙 ———————– 注意建议采用后代选择器的方式定义类名，而非短横线jsx 中会方便很多（对象写法以及 ide 代码提示） harmony1234567&lt;div className=&#123; styles.banner &#125;&gt; &#123;/** 不方便 **/&#125; &lt;div className=&#123; styles['banner-pic'] &#125;&gt;&lt;/div&gt; &#123;/** 方便 **/&#125; &lt;div className=&#123; styles.pic &#125;&gt;&lt;/div&gt;&lt;/div&gt; ———————– END ———————– 事件传参以及 this 指向 render 中写成函数封函数的方式，传递 event 对象和其他参数 如果事件处理函数中需要 this，需要写成下面这种形式，否则 this 指向错误（public class fields 语法） ———————– END ———————– react-router 到底引入哪一个 只引入 react-router-dom 即可 react-router（实现路由的核心） react-router-dom（在 react-router 的基础上多了一些组件） ———————– END ———————– react-router 传参 显式 - path 传参 用处：参数数量少的情况下优点：刷新页面参数仍然存在，可清楚表达语义缺点：path 参数位置固定，参数过多可能导致灵活问题 显式 - 查询字符串传参 用处：参数数量多的情况下优点：刷新页面参数仍然存在缺点：不如 path 传参语义性强 隐式 - state 传参 用处：参数保密 / 参数数量多的情况优点：对象传参，写起来简单，保证参数安全性缺点：页面刷新后参数失效 ———————– END ———————– react-router js 跳转组件中 在页面级组件上，默认已有 props.history在非页面级组件中，使用 withRouter 封装后会给 props 设置 history 属性 ———————– 手动间隔 ———————– 非组件中 在其他 js 中，可以使用 history 库来实现react-router 有依赖不用自己安装，直接引入即可 ———————– END ———————– react-router 路由嵌套 主路由 子路由 react-redux 使用步骤 我个人不太喜欢在用常量表示 type需要多一层定义引用…着实麻烦个人喜欢通过 mapStateToProps 和 mapDispatchToProps 引入全部的 state 和 actions这样的缺点是会混淆组件内部的状态和方法来源，但是可以通过加前缀的形式区分比如: state: { storeValue }, actions: { setStoreValue } 引入12npm i --save reduxnpm i --save react-redux ———————– 手动间隔 ———————– 创建 /store/reducer.js 文件1234567891011121314const defaultState = &#123; storeValue: null&#125;export default function (state = defaultState, action) &#123; switch (action.type) &#123; case 'storeValue': &#123; return &#123; ...state, value: action.value &#125; &#125; default: &#123; return state &#125; &#125;&#125; ———————– 手动间隔 ———————– 创建 /store/actions.js 文件123456export const setStoreValue = function (value) &#123; return &#123; type: 'storeValue', value &#125;&#125; ———————– 手动间隔 ———————– 创建 /store/index.js 文件harmony1234567891011121314151617181920212223import &#123; createStore &#125; from 'redux'import reducer from './reducer'import * as actions from './actions'let store = createStore(reducer)/** 默认引用全部的 state 和 actions **/let mapStateToProps = function (state) &#123; return &#123; ...state &#125;&#125;let mapDispatchToProps = function (dispatch) &#123; return actions&#125;export default storeexport &#123; store, mapStateToProps, mapDispatchToProps&#125; ———————– 手动间隔 ———————– 将 Provider 包裹在 App 组件的外侧，同时传入 /store/index.js 暴露的 store 作为 propharmony1234567891011121314import React from 'react'import ReactDOM from 'react-dom'import &#123; Provider &#125; from 'react-redux'import store from './store'import App from './App'ReactDOM.render( &lt;Provider store=&#123; store &#125;&gt; &lt;App/&gt; &lt;/Provider&gt;, document.getElementById('root')) ———————– 手动间隔 ———————– 在组件中使用 connect 方法连接 redux（通过 props 的方式传入组件） this.props.storeValuethis.props.setStoreValue harmony1234567891011import &#123; connect &#125; from 'react-redux'import &#123; mapStateToProps, mapDispatchToProps &#125; from '../../store'function Page () &#123; /** .. **/&#125;export default connect( mapStateToProps, mapDispatchToProps)(Page) ———————– END ———————– 定义环境变量 创建环境变量文件 自定义的环境变量要以 “REACT_APP_” 作为开头","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"react","slug":"react","permalink":"https://q-jason.github.io/blog/tags/react/"}]},{"title":"酷库-倒计时","slug":"酷库-倒计时","date":"2020-02-27T04:40:19.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggp002f4wrq8vm8gvcm/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggp002f4wrq8vm8gvcm/","excerpt":"","text":"倒计时是项目中较为常见的需求要是手动计算，麻烦的要死…这里记录几个解决方案 countdown（原生） github: https://github.com/mckamey/countdownjsnpm: https://www.npmjs.com/package/countdown 万能解决方案，用就对了下面记录用法 123456789101112131415161718192021import countdown from 'countdown'/** 可已通过 clearInterval(timer) 取消倒计时 **/let timer = countdown( // 结束时间 new Date().getTime() + 10000, // 每一秒会触发的函数 // result 为倒计时数据 // 自定义显示逻辑 function(result) &#123; console.log(result) &#125;, // 最大单位 // 比如说最大单位只想到 \"日\" // 就删除 YEARS 和 MONTHS // 下面的 \"|\" 是位运算符（作者底蕴好强大...） countdown.YEARS | countdown.MONTHS | countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS) @chenfengyuan/vue-countdown（vue） github: https://fengyuanchen.github.io/vue-countdownnpm: https://www.npmjs.com/package/@chenfengyuan/vue-countdown vue 倒计时组件也非常的强大，通过 slot 可自定义样式","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"倒计时","slug":"倒计时","permalink":"https://q-jason.github.io/blog/tags/%E5%80%92%E8%AE%A1%E6%97%B6/"}]},{"title":"电影-我想让大家都开心","slug":"电影-我想让大家都开心","date":"2020-02-11T14:42:17.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergg0001f4wrqagu1fyih/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergg0001f4wrqagu1fyih/","excerpt":"","text":"","categories":[{"name":"电影片段","slug":"电影片段","permalink":"https://q-jason.github.io/blog/categories/%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5/"}],"tags":[{"name":"电影片段","slug":"电影片段","permalink":"https://q-jason.github.io/blog/tags/%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5/"}]},{"title":"心得-node-sass安装不上","slug":"心得-node-sass安装不上","date":"2020-01-30T05:17:52.000Z","updated":"2020-04-20T11:40:31.499Z","comments":true,"path":"article/ck98ergf000074wrq8sj9h4an/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergf000074wrq8sj9h4an/","excerpt":"","text":"我习惯在项目中使用 sass 作为 css 高级语言通常 sass 基于 node-sass 这个库但是在实际情况下，node-sass 经常会因为各种各样的问题安装不上原因有缺少啥 gyp 环境，node-sass 下载超时等这里记录一下，以后出现后，跟着跑即可 参考网址https://www.jianshu.com/p/92afe92db99f 12345678# 若 npm 速度慢建议换源npm i -g nrmnrm use taobaonpm install -g node-gypnpm install --global --production windows-build-toolsnpm uninstall node-sassnpm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"https://q-jason.github.io/blog/tags/npm/"}]},{"title":"酷库-移动端调试","slug":"酷库-移动端调试","date":"2020-01-30T05:14:20.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggw002t4wrqgbhf9i63/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggw002t4wrqgbhf9i63/","excerpt":"","text":"开发中调试是必不可免的pc端可以直接通过游览器 F12 控制台调试移动端通常没有方便的调试手段这里记录一个非常好用的调试库 eruda 移动端调试工具（js库），比 vconsole 更好用https://eruda.liriliri.io/https://github.com/liriliri/erudahttps://www.npmjs.com/package/eruda eruda-webpack-plugin eruda webpack 插件（更建议使用这个方式，不影响业务代码）https://github.com/huruji/eruda-webpack-pluginhttps://www.npmjs.com/package/eruda-webpack-plugin","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"调试技巧","slug":"调试技巧","permalink":"https://q-jason.github.io/blog/tags/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"}]},{"title":"心得-奇怪的 input[type=\"number\"] 元素 min 和 max 属性","slug":"心得-奇怪的input-number-min-max","date":"2020-01-19T08:30:32.000Z","updated":"2020-04-20T11:40:31.507Z","comments":true,"path":"article/ck98ergfk000r4wrq6xmwhni1/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfk000r4wrq6xmwhni1/","excerpt":"","text":"本文主要讨论 input[type=”number”] 元素的 min 和 max 属性2020.01.19 这天引起了我严重的不适….. 问题由来input 的属性 min 和 max 不能限制用户输入，只能按上下键时限制范围这在平常项目中是无法忍受的更多的时候是希望用户输入 &lt; min || &gt; max 时 input 的值自动修正让值限制在 min 和 max 中使用原生的 min 和 max 是无法满足需求了只能自己写，然后就会发现坑就来了html input 标签设计时应该就发现了这个问题…所以原生 min 和 max 表现这么奇葩 问题重现 当你使用 js 自动根据 min 和 max 修正了值后… 一个 input 元素你想让他 min = 20、max = 100当前 value 为空你想输入 83 这个数字首先输入 8触发 min 逻辑，值会自动重置为 20然后就怎么也输入不对了… 解决方案 放弃由 js 修正值的想法….在输入、提交时使用错误提示，引导用户修改….","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"},{"name":"逻辑优化","slug":"逻辑优化","permalink":"https://q-jason.github.io/blog/tags/%E9%80%BB%E8%BE%91%E4%BC%98%E5%8C%96/"}]},{"title":"心得-赋值inputEl.value","slug":"心得-赋值inputEl-value","date":"2020-01-17T02:56:08.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergfy001c4wrq1vgxh32z/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfy001c4wrq1vgxh32z/","excerpt":"","text":"手动赋值 input.value 是项目中常见的场景但是直接赋值的话不会触发 input 事件，导致现实场景中逻辑异常需要手动触发事件 123let customEvent = document.createEvent('UIEvents')customEvent.initUIEvent('input', true, true, window, 1)inputEl.dispatchEvent(customEvent)","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}]},{"title":"酷库-坐标格式转换","slug":"酷库-坐标格式转换","date":"2020-01-03T13:27:47.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggs002l4wrqc5fa76jc/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggs002l4wrqc5fa76jc/","excerpt":"","text":"coordtransform https://github.com/wandergis/coordtransform一个提供了百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具模块。用就完事了","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"坐标转换","slug":"坐标转换","permalink":"https://q-jason.github.io/blog/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"}]},{"title":"酷库-ajax","slug":"酷库-ajax","date":"2019-12-20T05:15:50.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98erggg001w4wrq4uk4hjh8/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggg001w4wrq4uk4hjh8/","excerpt":"","text":"axios github: https://github.com/axios/axios中文文档: https://www.kancloud.cn/yunye/axios/234845Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。用它就对了 axios-retry（axios 重试方案） github: https://github.com/softonic/axios-retry基于 axios，若 axios 发送的请求失败，可根据配置自动重试 可以全局设置，也可以在请求时单独设置 shouldResetTimeout 的作用为每次重试重置超时，建议开启，否则控制台会变成 “机关枪” 默认只有 “5xx错误” 和 “网络错误” 才会重发，可设置 retryCondition 自定义重发逻辑 1234567891011121314import axios from 'axios'import axiosRetry from 'axios-retry'/** 全局设置 **/axiosRetry(axios, &#123; /** options **/&#125;)axios.get('/abc', &#123; /** 单独设置 **/ 'axios-retry': &#123; retries: 3 &#125;&#125;) promise-poller（重试、轮询） https://github.com/joeattardi/promise-poller此库主要作用为基于 Promise 的重试解决方案可用于任何 http 库十分优雅的即可实现也可以 “取巧” 用来当做轮询库使用 123456789101112131415161718192021222324// return PromisepromisePoller(&#123; /** * 返回 Promise 的任务函数 * 若 reject 则会重试（可以一直 reject 实现无限轮询） * 直到 resolve **/ taskFn, /** 重试请求间隔 **/ interval: 500, /** * 失败重试次数 * 这里设置为 Infinity 则可以实现无限重发（实现无限轮询） **/ retries: 10, /** 每次请求的超时 **/ timeout: 1000, /** 整个任务的超时 **/ masterTimeout: 5000&#125;);","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"ajax","slug":"ajax","permalink":"https://q-jason.github.io/blog/tags/ajax/"}]},{"title":"心得-strapi","slug":"心得-strapi","date":"2019-12-19T06:51:16.000Z","updated":"2020-04-20T11:40:31.503Z","comments":true,"path":"article/ck98ergfa000b4wrq820af887/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfa000b4wrq820af887/","excerpt":"","text":"strapi 是我一直关注的 node “无头” cms 框架我认为他将是未来迈向全栈之路的一个非常重要的 node 框架从 alpha 版本开始一直关注更新逐渐的推出了很多实用性很高，眼前一亮的特性、功能、插件下面是学习笔记： 资料 - 相关链接整理 官网：https://strapi.io/github: https://github.com/strapi/strapi功能路线图：https://portal.productboard.com/strapi插件库：https://strapi.io/marketplace 心得 - 启用 –inspect 调试步骤 项目根目录新建 index.js（代码在下面直接复制即可） 安装 nodemon (npm i –save-dev nodemon) 在 package.json scripts 中创建 dev 命令 nodemon –inspect index 在 cmd 运行 npm run dev 即可 打开谷歌游览器 node devTools 查看 注意 使用上述方法，无法在管理界面添加字段，正确姿势是在 develop 命令下创建好后，转到 dev 命令调试 1234567891011require('strapi/lib/commands/start')()/** * develop 模式启动文件 --inspect 不好使 * build 经过测试应该传入 true * watchAdmin 经过测试应该传入 undefined **/// require('strapi/lib/commands/develop')(&#123;// build: true,// watchAdmin: undefined// &#125;) 心得 - 后台左边侧边栏模型名称翻译 version: strapi@3.0.0-beta.18 默认创建好模型后，名字是英文的，只有 Users(用户) 字段是中文改变语言后，字段也不会发生变化，一直是英文当前版本已经可以很方便的自定义 admin 管理界面了只需要在项目目录下，新建 admin 目录，里面放入需要替换的文件strapi 就会用你自定义的文件替换原有的文件进行打包管理界面 —– 手动间隙 —– 翻译过程 在项目根目录创建目录 admin/src/translations 将 strapi-admin/admin/src/translations 中的 en.json(必须有), zh-Hans.json(或其他语言) 复制过来 将字段显示的!!复数!!名字复制到 en.json 和 zh-Hans.json 中的 key，value 写需要翻译显示的名字 strapi develop –watch-admin(开发管理界面模式看下结果) npm run build(翻译成功后，打包管理员界面) en.json 1234&#123; \"Categories\": \"Categories\", \"Restaurants\": \"Restaurants\"&#125; zh-Hans.json 1234&#123; \"Categories\": \"餐厅分类\", \"Restaurants\": \"餐厅\"&#125; —– 手动间隙 —– 备注 en.json 一定要复制并填值，因为 admin/components/LeftMenuLink/index.js 中是根据 en.json 进行判断是否有无 key 值，若没有就不走国际化流程了 harmony123456789101112131415// in node_modules/strapi-admin/admin/components/LeftMenuLink/index.js// Check if messageId exists in en locale to prevent warning messagesconst content = en[props.label] ? ( &lt;FormattedMessage id=&#123;props.label&#125; defaultMessage=\"&#123;label&#125;\" values=&#123;&#123; label: `$&#123;props.label&#125;` &#125;&#125; className=\"linkLabel\" /&gt;) : ( &lt;span className=\"linkLabel\"&gt;&#123;props.label&#125;&lt;/span&gt;); 心得 - 后台左侧侧边栏中隐藏指定模型管理 version: 3.0.0-beta.18.7 ！！！ 目前没有发现从模型配置中隐藏的方法 ！！！负责可视化管理数据的插件是 strapi-plugin-content-manager 这个包在其 services/ContentTypes.js 中重写 HIDDEN_CONTENT_TYPES 常量即可实现步骤如下 首先你要有一个项目，并且有自定义的模型字段 在项目根目录 extensions 文件夹中创建 content-manager/services/ContentTypes.js 文件 复制 node_modules/strapi-plugin-content-manager/services/ContentTypes.js 中的代码 黏贴到 extensions/content-manager/services/ContentTypes.js 中 修改 ContentTypes.js 中的依赖包的路径，使其路径正确，下面有例子 找到 HIDDEN_CONTENT_TYPES 常量，新增需要隐藏的模型，下面有例子 123/** 修改依赖路径 **/const storeUtils = require('strapi-plugin-content-manager/services/utils/store')const &#123; pickSchemaFields &#125; = require('strapi-plugin-content-manager/services/utils/schema') 12345678910111213/** 重写需要隐藏的模型 **/const HIDDEN_CONTENT_TYPES = [ /** 原有的 **/ 'strapi::admin', 'plugins::upload.file', 'plugins::users-permissions.permission', 'plugins::users-permissions.role', /** 以下是新增的 **/ 'plugins::config.config', /** application 代表项目中创建的模型 **/ 'application::house.house'] 心得 - 禁止在后台中修改删除模型字段 在模型配置中(xxx.settings.json)给字段 configurable 属性设置为 false 心得 - strapi.store（配置存储库） strapi 提供了这么一个 api 来存储配置信息（存到数据库里的 core_store 表中）但是官方文档中没有任何描述我通过查看了官方插件，学习到了这个 api 的使用方法如下： 1234567891011121314151617181920212223242526272829303132module.exports = async () =&gt; &#123; /** * 存数据库的命名规则为 * type_[name_]key **/ const store = strapi.store(&#123; /** 开发环境和线上环境可以分开不同的配置 **/ environment: '', /** * type 一定要填写 * 存数据库时会已 type 作为前缀 **/ type: 'plugin', /** * name 不需要一定填写 * 存数据库时会把 name 作为第二前缀 **/ name: 'config' &#125;) // 设置储存库中的字段 await store.set(&#123; key: 'test', value: [ 1, 2, 3, 4 ] &#125;) // 获取储存库中的字段 console.log(await store.get(&#123; key: 'test' &#125;)) // =&gt; [ 1, 2, 3, 4 ]&#125; 自定义插件 - 环境搭建 version: 3.0.0-beta.18.7 这个功能是重头戏哈哈日后封装常用功能，快速开发全指着自定义插件研究了半天，有了以下总结注意：strapi 的管理面板是基于 react 的…需要熟悉 官方文档照着官方文档跑环境就能搭建起来，也比较简单，下面是步骤 下面均为在控制台输入 1234567891011121314# 首先你要有一个项目...npx create-strapi-app my-project# 进入项目目录cd my-project# 创建一个本地插件strapi generate:plugin my-plugin# 打开开发管理面板环境strapi develop --watch-admin# 然后访问 http://localhost:8000/admin 即可# 此时已经搭建好了插件开发环境，接下来接插件逻辑即可 自定义插件 - 插件开发思路 后台管理面板的作用无非就两件事一. 查看或统计数据（展示数据）二. 修改数据（表单提交） 思考确定插件功能 根据插件功能定义插件数据模型（并非唯一，可多个，在 models 文件夹中） 根据插件功能设计接口并绑定控制器（/config/routes.json 和 controllers 目录） 思考设计并完成后台管理面板 自定义插件 - 后台管理面板如何发送请求 strapi 默认有一套权限设置，发送请求会被拦截获取不到数据（jwt 验证）strapi 提供了 helper（strapi-helper-plugin）其中 request 模块是用来发请求的开发者只需要引用，然后使用就可以了不需要了解权限逻辑，对开发透明如下： 12345678910import &#123; request &#125; from 'strapi-helper-plugin'// 返回 Promiserequest('/users-permissions/advanced', &#123; method: 'get'&#125;).then(res =&gt; &#123; console.log(res)&#125;).catch(err =&gt; &#123; console.error(err)&#125;) 自定义插件 - 内部配置（储存库） 可以用 strapi.store 来存储内部配置strapi.store 上面介绍过了参考了官方插件代码中的使用需要注意的是：type 都是 pluginname 都是 插件名称 12345const pluginStore = strapi.store(&#123; environment: '', type: 'plugin', name: 'users-permissions',&#125;);","categories":[{"name":"后端心得","slug":"后端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%90%8E%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"react","slug":"react","permalink":"https://q-jason.github.io/blog/tags/react/"},{"name":"node","slug":"node","permalink":"https://q-jason.github.io/blog/tags/node/"},{"name":"cms","slug":"cms","permalink":"https://q-jason.github.io/blog/tags/cms/"}]},{"title":"酷库-echarts","slug":"酷库-echarts","date":"2019-12-17T01:12:50.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98erggi001z4wrq5svc5lz6/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggi001z4wrq5svc5lz6/","excerpt":"","text":"echarts 是非常强大、知名的图表库https://www.echartsjs.com/zh/index.html 官方文档阅读心得 此库文档非常大…一开始阅读总不知道从哪里下手个人总结以下步骤 确定需求，从 官方例子 中，找到类似的作为参考，或直接复制配置套用 首先确认 series 属性，确认图表类型 模拟数据，设置图表类型对应的 data 属性 增加辅助组件(toolbox、timeline、title 等) 设置细节样式 增加交互逻辑 map 系列省份地图 label 自定义位置 问题描述：经常有需求会要求在省份、城市中心显示 labelmap 系列中 label 的属性 position 和 offset 经测试偏移无效并且一个个 “看着大概偏移” 改麻烦的很..开启 legend 组件，这俩属性才有效，暂不知道为啥legend 组件会造成区域上有一个点，也不太好去除 解决办法：放弃使用默认 label，使用 markPoint 模拟 labelmarkPoint data 中项的属性 coord 可以自定义 mark 位置(百度坐标拾取器提取经纬度)然后将图标隐藏（sysbom 空图片 或 大小设置为 1都行） series 散点无效 必须指定 geo，否则无效暂时不知道 geo 和 series 中 type = map 有什么区别…","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"图表","slug":"图表","permalink":"https://q-jason.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"}]},{"title":"心得-移动端适配心得","slug":"心得-移动端适配心得","date":"2019-12-05T01:18:37.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergfu00164wrq70y59o0m/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfu00164wrq70y59o0m/","excerpt":"","text":"本文主要讨论移动端开发的页面适配技巧 为何要适配？ 各个手机的屏幕大小不同，若用 px 单位，则会在各个屏幕下显示相同尺寸往往会偏大或偏小，效果差劲，原因是因为没有等比例缩放(没有用相对单位)相对单位有 vw，em，rem，% 等保证其在不同屏幕尺寸下，按照一定的尺寸标准，等比例缩放，实现自动适配 适配方法 原理都是根据屏幕实际宽度来计算 vw 适配方案 ★★★★★由于 1vw = 屏幕总宽的百分之一，是最适合用来适配的单位兼容性不如 rem 单位 rem 适配方案 ★★★★通过改变在 html 标签改变 font-size 属性，实现等比例缩放兼容性很好，是比较老的技术 开发体验 不论是 vw 还是 rem 自己算是很麻烦的… 0.2497rem … 2.645514vw …最好的开发体验是设计图多少就在项目中写多少然后通过预处理语言自动转化为 vw 或 rem 单位 解决方案 vw 在项目中写设计图上的 px 单位通过 postcss-px-to-viewport 预处理转为 vw单位通过 viewport-units-buggyfill 在客户端照顾兼容性 预处理：postcss-px-to-viewport https://github.com/evrone/postcss-px-to-viewportpostcss 的插件，只要写上参考设计图的宽度，自动将 px 单位转为 vw 单位 客户端：viewport-units-buggyfill https://github.com/rodneyrehm/viewport-units-buggyfill这是个 vw 单位的 polyfill，建议配合 postcss-px-to-viewport 使用作用是分析加载的 css 文件，然后将 vw 单位在转为 px，放到 head 中建议非必要不要使用，…有时会出现写莫名其妙的 bug rem 在项目中写设计图上的 px 单位通过 postcss-px2rem，预处理转为 rem 单位通过 hotcss，在客户端改变 html font-size 预处理：postcss-px2rem https://www.npmjs.com/package/postcss-px2rem基于 postcss 的插件，设置好 1rem = ？px 后，自动转换 px 为 rem 单位 客户端：hotcss https://github.com/imochen/hotcssrem 解决方案，按照 640 设计图动态设置 html 的 font-size 属性并通过设置 viewport scale，解决移动端 1px 难题可以设置屏幕最大尺寸，友好的适配桌面端建议配合 postcss-px2rem 使用 12345678910111213141516// hotcss 是已 640 设计图为标准的// 1rem = 40px - 在屏幕为 640// 1rem = 20px - 在屏幕为 320// 1rem = 40px - 在屏幕为 320，但是 viewport scale = 0.5 的情况下，相当于 640// 若设计图尺寸不是 640// 则需要自己换算// 算法为： innerWidth * 20 / 320// innerWidth 为屏幕实际尺寸// 例如：// 750 设计图// 算法为：750 / 2 * 20 / 320// 1rem = 46.875px - 在屏幕为 750// 1rem = 23.4375px - 在屏幕为 375// 1rem = 46.875px - 在屏幕为 375，但是 viewport scale = 0.5 的情况下，相当于 750","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"酷库-swiper","slug":"酷库-swiper","date":"2019-11-28T08:11:03.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggk00234wrq6f3f9n6y/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggk00234wrq6f3f9n6y/","excerpt":"","text":"swiper https://github.com/nolimits4web/swiper非常知名的触摸滑动解决方案 this.emit 方法 该函数用于主动触发 swiper 的事件，文档中找不到….比如在 transitionStart 中写好了切换函数，但是在 初始化(init) 中也想调用一次就可以在 init 中使用 this.emit(‘transitionStart’) 来调用执行 mousewheel 心得 建议开启 mousewheel.releaseOnEdges 否则鼠标滚轮无效 写项目时使用 swiper@5.2.1，mousewheel 功能有些 bug，垂直滚动异常，降级即可解决","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"轮播功能","slug":"轮播功能","permalink":"https://q-jason.github.io/blog/tags/%E8%BD%AE%E6%92%AD%E5%8A%9F%E8%83%BD/"}]},{"title":"心得-无接口时如何继续前端开发","slug":"心得-无接口时如何继续前端开发","date":"2019-11-26T01:53:05.000Z","updated":"2020-04-20T11:40:31.507Z","comments":true,"path":"article/ck98ergfp000x4wrq9bbv9y36/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfp000x4wrq9bbv9y36/","excerpt":"","text":"本文讨论：前端做项目时如何优雅的对接数据接口 问题由来 大多功能都需要接口对接才能完成此时若后端接口还没出来，前端如何做？ 开发时后端各类情况分析 完美型: 已有成型接口 分析：非常理想的开发体验，通常为重构项目等方案：该情况下可以直接使用已有接口进行前端开发，无需特殊注意星级：★★★★★ 常规型：没有成型接口，前后端同时进行 分析：通常为新项目方案：本文着重探讨的情况，继续往下看吧星级：★★★★ 缺陷型：没有成型接口，后端进度比前端慢，甚至慢很多，需要等待接口 分析：后端项目多，任务重等场景方案：本文着重探讨的情况，继续往下看吧星级：★★ 不知所措型：没有成型接口，后端遥遥无期，甚至迷茫 分析：后端极度不确定方案：本文着重探讨的情况，继续往下看吧星级：★ “约定字段” 和 “前端字段” 约定字段这件事通常只是一个规范，一个好的习惯。实际情况前后端可能不会去约定，也无法准确约定，总有纰漏通常情况是 “各做各的”然后数据通过接口返回时才知道字段名好一点的会统一定义些数据模型但是特殊功能，表单提交等，通常也无法保证统一定义 前后端的应用场景不同，所以有时数据结构定义的也不同与其依赖后端的数据结构，还不如自定义前端字段完成功能然后通过 “装载器函数（webLoader）”再将值赋值给前端字段 无接口时的解决方案 无接口不进行 解释：完成基础样式后，放任项目不管，等待后端提供接口后，继续进行。分析：非常适合小型无复杂功能类项目。优点：劳动力最小，小项目很实用缺点：中大项目不适用，开发体验不连贯，“头重，尾重，中间轻”，接口对接时需要同时兼顾前端逻辑和后端对接，导致无法专一面对问题。 mock 数据继续进行 解释：模拟一些数据，继续往下开发，有接口时，将 mock 的数据替换成真实数据分析：mock 数据是 “无后端” 时的唯一办法优点：开发连贯，可以在无后端的情况下，打包一份 mock 版本，保证前端任务完成缺点：根据不同项目需要选择最优的 mock 方式，不健壮的 mock 会带来一定烦恼注意：一定要灵活的切换 mock 和真实环境，否则导致项目频繁报错，查原因很麻烦 前端字段 和 mock 是必须的吗？ “前端字段” 是一种思想抛弃前后端字段统一的问题，使用 loader（装载器函数）的代价完成数据对接 mock 数据的作用就是在无 “真实数据源” 的时候提供一个 “虚假数据源” 继续开发等待有 “真实数据源” 时，再尽量 ！！无缝切换！！ 这俩通常情况下是绑在一起的，定义 “前端字段” 的时候顺便 mock 来个例子 例子功能：数据展示，提交表单项目脚手架：vue-cli后端情况：进度较慢推荐库：mock.js 创建 mock 环境，定义环境变量 process.env.VUE_APP_MOCK 12console.log(process.env.VUE_APP_MOCK)// =&gt; true 切好样式，同时根据功能设计前端字段，同时 mock 数据 1234567891011&lt;template&gt; &lt;div&gt; &lt;div class=\"article\" v-for=\"item in dataArr\" :key=\"item.id\"&gt; &lt;img :src=\"item.cover\" alt=\"\"&gt; &lt;h3 class=\"title\"&gt; &#123;&#123; item.title &#125;&#125; &lt;/h3&gt; &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#123; Random &#125; from 'mockjs';let IS_MOCK = process.env.VUE_APP_MOCK;export default &#123; data () &#123; return &#123; dataArr: IS_MOCK ? [ &#123; id: Random.integer(), pic: Random.dataImage('100x100'), title: Random.ctitle(), desc: Random.cparagraph() &#125;, ] : [] &#125; &#125;, methods: &#123; init () &#123; /** 请求数据 **/ let apiDataArr = new Promise((resolve, reject) =&gt; &#123; /** 不重要 **/ &#125;).then(apiDataArr =&gt; &#123; /** 调用 loader 为前端字段赋值 **/ this.loader(apiDataArr); &#125;) &#125;, loader (apiDataArr) &#123; /*** * 如果是 mock 环境，则使用 mock 数据 * 写在这里的原因是尽量不要在逻辑代码中加入 IS_MOCK 判断 * 影响代码视觉 ***/ if (IS_MOCK) return; /** * 接口字段赋值前端字段 **/ this.dataArr = apiDataArr.map(item =&gt; &#123; return &#123; id: item._id, /** 你永远不知道后端起的什么奇怪的名字... **/ cover: item.p, title: item.t, desc: item.d &#125; &#125;); &#125; &#125;, created () &#123; this.init(); &#125;&#125;","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"对接经验","slug":"对接经验","permalink":"https://q-jason.github.io/blog/tags/%E5%AF%B9%E6%8E%A5%E7%BB%8F%E9%AA%8C/"}]},{"title":"心得-小程序开发集合","slug":"心得-小程序开发集合","date":"2019-11-12T01:23:45.000Z","updated":"2020-04-20T11:40:31.507Z","comments":true,"path":"article/ck98ergfn000u4wrq15bf7uj8/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfn000u4wrq15bf7uj8/","excerpt":"","text":"记载着小程序的开发心得 框架的选择 若原生撸请忽略，但并不推荐原生的开发体验较为差劲，解决方案少现在是 2020.1.3，个人推荐 uni-app 这个框架真心强大！ uni-app https://github.com/dcloudio/uni-app非常推荐体验：完全的 vue 开发体验，支持所有 vue 语法，支持跨端，社区完善，并拥有插件平台 碰到的问题… 使用 lodash@4.17.15，dev 正常，pro 报错，降级到 lodash@4.16.0 好了 prop 在 template 中传入时，要用驼峰命名，短横线命名会无效 wepy https://github.com/Tencent/wepy不推荐体验：类 vue 开发体验，但是区别还是比较大的，有学习成本问题：使用过一段时间，问题比较多…，放弃使用的原因是 repeat 双层循环，内层循环读取不到数据，并且无解决办法 mpvue https://github.com/Meituan-Dianping/mpvue推荐体验：不完全的 vue 开发体验，不支持 filter 等，其他基本相同，支持跨端问题：据说停止维护了…. 酷库 - html 渲染方案原生 rich-text 组件 无法主动控制样式，只能想办法改变 html 字符串中的 style非常不灵活 wxParse github：https://github.com/icindy/wxParse基于原生小程序，若没有使用其他小程序框架就用它吧 gaoyia-parse github：https://github.com/gaoyia/parse#readmenpm：https://www.npmjs.com/package/gaoyia-parse若为 mpvue uni-app 就用这个 酷库 - 支持 cookie 小程序默认不支持 cookie 传输解决方案：https://github.com/charleslo1/weapp-cookie使用起来非常方便，只需要引入即可，对开发透明 酷库 - 优雅的发送请求 wx-axios 用这个库，同时适配 browser、node.js、微信小程序作者 fork 原本的 axios 实现api 和 axios 完全一样github：https://github.com/SoloJiang/axiosnpm：https://www.npmjs.com/package/wx-axios 经验 - getCurrentPages 使用注意 getCurrentPages 方法返回的页面数组中 route 属性无查询字符串查询字符串保存在 options 属性中(对象形式)，想要完整的需要自己拼接建议使用 qs 库做拼接 经验 - 储存图片到本地 建议使用 saveImageToPhotosAlbum 这个方法saveFile 保存后，路径很迷，并且无后缀，相册中也找不到saveImageToPhotosAlbum 成功后，微信会自动弹出一个友好提示（水平居中垂直居下的 Toast 弹框）下载图片时，别忘了在微信公众后台增加上 download domain 否则上线后，下载会报错 经验 - 字体（iconfont）引入 小程序不支持加载本地字体文件支持加载网络字体 或把字体文件转为 base64 经验 - button 标签边框 button 边框是用 :after 实现的并不是 border 实现 经验 - 分包 小程序有代码体积限制（小于 2m）若体积过大就只能用分包的形式建议稍微大一丢丢的项目一开始就考虑分包 uni-app 可以强制开启代码压缩缓解在开发环境下体积过大，无法真机预览的问题 12345678// vue.config.js// uni-app 强制开启代码压缩module.exports = &#123; configureWebpack (config) &#123; // 防止在开发环境文件过大的情况 config.optimization.minimize = true &#125;&#125; 123456// uni-app 的分包优化配置&quot;mp-weixin&quot;: &#123; &quot;optimization&quot; : &#123; &quot;subPackages&quot; : true &#125;&#125; 经验 - map 组件marker 自定义文字的位置 2020.1.2…建议放弃使用下面的想法，还是改用一张图片实现经过测试有些 bug 无法解决 位置太难对准 ios 设备上有 marker 和 label 的层叠性问题 ios 效果如下 marker callout 只能显示在 marker 的上方，位置不能改变marker label 可以改变相对于 marker 的位置(大约计算)但是没有 left，center，right 这种属性下面例子使用 label 实现文字垂直居中对其 1234567891011let markerArr = [ &#123; // ... marker options ... label: &#123; // ... label options ... anchorX: ('自定义文字'.length * 4.7) * -1, anchorY: -29 &#125; &#125;, // ... other marker] map 组件影响了页面滚动 设置了 enable-scroll=’false‘ 后安卓手机页面不能滑动 解决办法是用一个 view 标签覆盖在 map 上面，即可解决 注意1：不要使用 cover-view 标签，这个和 map 一样不支持滑动注意2：将 map 组件的点击事件放在 view 标签上注意3：若想同时实现散点（marker）点击，暂无解决办法…. 经验 - input change 事件不触发 已知基础库 2.9.3 有这个 bug若出现，降级或升级试试看 经验 - h5-helper（使用h5页面辅助完成小程序功能） 小程序的部分场景功能，可以使用 web-view 引入 h5 网页来实现通过 bindmessage 来返回参数 比如： 海报生成（H5有现成的 html2canvas，可以轻松实现 dom - 图片的转换） 电子签名（drawingboard.js 可轻松实现） 填坑 - map markertap 不触发 对应的 marker 数据需要设置 id否则 markertap 不会触发（uni-app 项目测试） 填坑 - uni-app map 事件 markertap 回调参数各平台不一致 markerId 位置不一致 123// e.markerId 是小程序// e.detail.markerId 是h5let id = e.markerId || e.detail.markerId","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"开发经验","slug":"开发经验","permalink":"https://q-jason.github.io/blog/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"},{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"}]},{"title":"酷库-图片相关","slug":"酷库-图片相关","date":"2019-11-11T01:25:31.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggr002h4wrq5o225mqb/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggr002h4wrq5o225mqb/","excerpt":"","text":"fancybox（基于 jquery） https://github.com/fancyapps/fancybox作用：点击看大图、视频、模态框备注：功能非常强大，但是基于 jQuery lightgallery.js（基于原生） github：https://github.com/sachinchoolur/lightgallery.jsnpm：https://www.npmjs.com/package/lightgallery.js作用：图片、视频相册备注：目前没深入使用，目前查看不支持 html 自定义标签（模态框） medium-zoom https://github.com/francoischalifour/medium-zoom作用：点击看大图备注：功能单一，原生 js 实现 smartcrop.js https://github.com/jwagner/smartcrop.js用途：根据传入的长宽比，计算出图片的主要内容区域场景：主要用于响应式图片 grade https://github.com/benhowdle89/grade用途：根据图片主题色生成渐变色场景：主要用于图片背景","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"图片","slug":"图片","permalink":"https://q-jason.github.io/blog/tags/%E5%9B%BE%E7%89%87/"}]},{"title":"心得-bfcache","slug":"心得-bfcache","date":"2019-11-08T01:36:31.000Z","updated":"2020-04-20T11:40:31.499Z","comments":true,"path":"article/ck98ergep00024wrq0a8a6hzm/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergep00024wrq0a8a6hzm/","excerpt":"","text":"本文讨论 bfcache 机制带来的一些 bug bfcache 是啥 是一个游览器机制比如说从 a 网页去 b 网页，然后再点击 b 网页的回退按钮回到 a 网页页面不会刷新，而是使用缓存，用意是提高用户体验表单提交场景发生的比较多 例子：项目分析 项目：后端模板 webApp 项目前端：使用了 vue 做部分的效果(日期选择等，现成的组件)，页面上留有额外 input 供后端提取值后端：使用了 php 模板渲染页面结论：使用了较为混乱的开发方式，本以为使用额外 input 与后端进行解耦就可以顺利使用 vue 组件 例子：html结构1234567891011121314&lt;main&gt; &lt;div id=\"app\"&gt; &lt;!-- vue 组件 --&gt; &lt;vue-comp-input/&gt; &lt;vue-comp-input/&gt; &lt;vue-comp-input/&gt; &lt;vue-comp-input/&gt; &lt;/div&gt; &lt;!-- 供后端提取值的额外 input --&gt; &lt;input type=\"text\"&gt; &lt;input type=\"text\"&gt; &lt;input type=\"text\"&gt; &lt;input type=\"text\"&gt;&lt;/main&gt; 例子：bug 展示 总结 找了半天原因应该是就是因为使用了混乱的开发方式，导致使正常的 bfcache 逻辑出错最终想到放弃使用 bfcache 逻辑，每次都强制刷新页面即可解决这个问题解决方案如下： 12345678910// 将此代码放到 head 标签靠上的位置// 否则会加载额外的资源// 此代码相当于使用 bfcache 机制的回调// 使用 location.reload 重置页面window.addEventListener('pageshow', function (e) &#123; if (e.persisted || (window.performance &amp;&amp; window.performance.navigation.type == 2)) &#123; location.reload(); &#125;&#125;, false);","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器机制","slug":"游览器机制","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E6%9C%BA%E5%88%B6/"}]},{"title":"心得-傻傻分不清的 DOM 尺寸属性","slug":"心得-傻傻分不清的DOM尺寸属性","date":"2019-11-08T01:14:07.000Z","updated":"2020-04-20T11:40:31.503Z","comments":true,"path":"article/ck98ergfh000j4wrqcrfr4tsn/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfh000j4wrqcrfr4tsn/","excerpt":"","text":"主要讨论以下属性 / 方法 clientHeight / clientWidth offsetHeight / offsetWidth scrollHeight / scrollWidth getBoundingClientRect 方法 包罗万象 看懂了就啥都明白了 clientHeight / clientWidth 包含 padding，不包含 border、margin、滚动条尺寸 offsetHeight / offsetWidth 包含 padding、border、滚动条尺寸，不包含 margin scrollHeight / scrollWidth 此属性一般用于有滚动条的元素返回滚动内容的总尺寸","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"属性记载","slug":"属性记载","permalink":"https://q-jason.github.io/blog/tags/%E5%B1%9E%E6%80%A7%E8%AE%B0%E8%BD%BD/"}]},{"title":"酷库-低版本IE辅助库","slug":"酷库-低版本IE辅助库","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggn002a4wrqcpvehjgt/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggn002a4wrqcpvehjgt/","excerpt":"","text":"万恶的 IE….. 参考 css 圆角 和 阴影（PIE - 实现圆角和阴影） css background-size（background-size-htc - 实现背景大小设置，可惜只兼容到 IE8） css border-spacing IE 6 7 不支持（给 td 设置高度模拟） css border-box （box-sizing-polyfill） 表单元素的 placeholder（jquery.placeholder - 简单粗暴）","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"IE","slug":"IE","permalink":"https://q-jason.github.io/blog/tags/IE/"}]},{"title":"心得-vh单位的可信度","slug":"心得-vh单位的可信度","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.503Z","comments":true,"path":"article/ck98ergfc000c4wrqfpbcaiwk/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfc000c4wrqfpbcaiwk/","excerpt":"","text":"vw, vh 都是自适应页面的利器vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！ 问题 手机游览器的 100vh 总会高出一截经过查阅，好像是算上了地址栏的高度，并且不准备修复，被认为是正常的。 测试代码1&lt;div id=\"test\" style=\"height: 100vh\"&gt;&lt;div&gt; 1alert('innerHeight: ' + innerHeight + '\\n' + 'test元素高度: ' + $('#test').css('height')); PC端测试 移动端测试 解决思路 使用 js 赋值 innerHeight 1$('.height-full').css('height', window.innerHeight);","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"}]},{"title":"心得-window.opener","slug":"心得-window.opener","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.503Z","comments":true,"path":"article/ck98ergfe000g4wrq5wlg4z58/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfe000g4wrq5wlg4z58/","excerpt":"","text":"项目中经常存在着需要跳转网页然后再跳转回来的需求比如说 oauth 登陆，微信支付宝等第三方登陆等若采用通常的链接跳转，会失去当前页面的所有逻辑回调跳转回来时页面也会重新加载用户体验极差，代码逻辑也失去了连贯性 终于有一天。。我发现了 window.opener….. window.open 该方法将打开一个新的网页标签注意：若用户未交互，游览器会阻止该方法的执行（游览器会认为不是用户的操作，认为是广告等）解决：在用户交互事件中调用 window.open（click 等事件） 123document.getElementById('btn').addEventListener(function (e) &#123; window.open('https://www.baidu.com');&#125;) window.opener 当前网页必须由 window.open 打开时才有window.opener 指向 window.open 时的父 window 对象 1window.opener.alert('提示') 实现（跳转网页回调）父窗口123456789// 定义回调 cb 事件window.callback = function (params) &#123; console.log(params);&#125;;// 点击按钮触发网页跳转，打开一个新页面document.getElementById('btn').addEventListener(function (e) &#123; window.open('https://www.baidu.com');&#125;) 子窗口12345// 触发父窗口回调方法，并传入参数window.opener.callback(/* any */);// 关闭当前子窗口window.close(); 这样保证了页面的执行顺序，也保证了用户体验。","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"优化逻辑","slug":"优化逻辑","permalink":"https://q-jason.github.io/blog/tags/%E4%BC%98%E5%8C%96%E9%80%BB%E8%BE%91/"},{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"心得-hover伪类选择器-移动端的表现","slug":"心得-hover伪类选择器-移动端的表现","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.499Z","comments":true,"path":"article/ck98ergew00064wrq67jpckil/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergew00064wrq67jpckil/","excerpt":"","text":"这里主要记载一个响应式项目中碰到的下拉菜单的问题 美化下拉菜单在项目中是常见的需求常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单但是 :hover 在移动端兼容并不友好经过测试，在除 safari 的游览器中，兼容还比较好，唯独 safari 出现了问题… 例子 移动端 safari 的奇怪表现 必须是 a 元素才能触发 :hover 将元素修改成了 a 之后，点击页面其他处无法失去 :hover 焦点，除非点击其他 按钮 或 input 解决方案 使用 js 事件加 class 的方式实现，代替 :hover","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"}]},{"title":"心得-移动端文字垂直居中的影响因素","slug":"心得-移动端文字垂直居中的影响因素","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.507Z","comments":true,"path":"article/ck98ergfr000z4wrq7vrc88pt/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfr000z4wrq7vrc88pt/","excerpt":"","text":"移动端开发时经常会碰到文字居上的问题经过测试发现，主要是使用了独特的 font-family 引起的 移动端最佳 font-family 设置1234567body &#123; font-family: -apple-system, BlinkMacSystemFont, \"PingFang SC\", \"Helvetica Neue\", STHeiti, \"Microsoft Yahei\", Tahoma,Simsun,sans-serif;&#125; 移动端 input placeholder 居上 经过测试是由于 placeholder 默认的 line-height 导致的 1234/* safari placeholder 偏上的问题 */input::-webkit-input-placeholder &#123; line-height: normal;&#125; 问题重现android 未设置特殊字体 android 设置了特殊字体 ios 未设置特殊字体 ios 设置了特殊字体","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"}]},{"title":"酷库-滚动监听","slug":"酷库-滚动监听","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggv002s4wrq2ar6d79x/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggv002s4wrq2ar6d79x/","excerpt":"","text":"gumshoe https://github.com/cferdinandi/gumshoe项目中经常有需求的锚点滚动监听需求我之前尝试过用 ScrollReveal 实现，但是逻辑不太一样","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"滚动监听","slug":"滚动监听","permalink":"https://q-jason.github.io/blog/tags/%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC/"}]},{"title":"心得-移动端理想的用户体验","slug":"心得-移动端理想的用户体验","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergft00134wrqaeeq1n3o/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergft00134wrqaeeq1n3o/","excerpt":"","text":"目前前端的跨端技术层出不穷，开发快，对用户透明。对前端开发者来说掌握的东西要更多了~ 本文谈论一些原生移动 app 用户体验 体验分析 每天都会用各种 app，各种操作熟记于心总结出以下网页不容易实现的需求 类似网页的历史记录，前进刷新网页，后退时使用历史缓存 前进或者后退（物理返回键）会有不同的切换效果（滑动切换） 点击物理返回键时若正处于 “模态对话框(dialog, alert)等”，不会返回页面，会先将对话框关闭 实现难点分析以及解决方案 vue keep-alive 无法实现前进刷新，后退使用缓存的 app 缓存逻辑 这里可以使用 vue-navigation 实现 前进和后退实现不同的切换效果 vue transition 标签配合 vue-navigation 实现 模态框逻辑，如何判断当前正在弹框，如何优雅的阻止切换切换并关闭模态框 推荐 vue-create-api 这个库，本文例子中使用了 element-ui 中的 MessageBox 实现 例子 github","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"心得-到底是谁的滚动条","slug":"心得-到底是谁的滚动条","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.507Z","comments":true,"path":"article/ck98ergfj000o4wrq3fx60gbq/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergfj000o4wrq3fx60gbq/","excerpt":"","text":"网页中默认的滚动条到底是哪个元素的？body？html？ 测试 打印输出各大游览器 body 和 html 标签的 scrollTop 属性 chrome firefox ie11 safari 总结 除去 safari 默认滚动条都是 html 元素的只有 safari 这个奇葩滚动条是使用 body 元素的为啥 safari 这个奇葩总会有各种有问题…… 优雅的获取页面滚动位置1234567891011// IE9+window.pageYOffset;// 非 IEwindow.scrollY;// IE8以及以下document.documentElement.scrollTop;// 兼容性最好的写法window.pageYOffset || document.documentElement.scrollTop; 优雅的滚动页面原生方法（推荐）12345// 这俩货是一样的....window.scrollTo(x, y);// 相对滚动window.scrollBy(offsetX, offsetY) 直接赋值（不推荐）12345// chrome, ie, 火狐 ...document.documentElement.scrollTop = 100// 奇葩 safaridocument.body.scrollTop = 500","categories":[{"name":"前端心得","slug":"前端心得","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"游览器差异","slug":"游览器差异","permalink":"https://q-jason.github.io/blog/tags/%E6%B8%B8%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82/"},{"name":"属性记载","slug":"属性记载","permalink":"https://q-jason.github.io/blog/tags/%E5%B1%9E%E6%80%A7%E8%AE%B0%E8%BD%BD/"}]},{"title":"职场-工资算法","slug":"职场-工资算法","date":"2019-11-08T01:06:15.000Z","updated":"2020-04-20T11:40:31.511Z","comments":true,"path":"article/ck98ergga001l4wrqekvg37ub/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98ergga001l4wrqekvg37ub/","excerpt":"","text":"目前是 2019.10.03，本文记载着我对工资算法公式的理解五险一金税款等具体比例可能会隔几年一调整，想要精确百度下即可 工资算法 以下算法为双休制，一个月上班天数为 21.75 天（百度搜索的的国家规定）提成、奖金、饭补、交通费等属于额外来源，不参与计算 每日工资算法 这里记录的是每日理论工资，包含着五险一金税款每日到手工资不太好计算，因为还减去到五险一金税款每日工资公式通常用于缺勤的时候扣工资时使用 1每日理论工资 = 基础工资 / 21.75 到手工资算法1每月到手工资 = 基础工资 - 五险一金 - 税款 - 缺勤请假部分（每日理论工资 * 缺勤天数） 五险一金和税款个人承担比例 养老 = 8% 医疗 = 2% 失业 = 0.3% 一金 = 12%（该值非规定） 税款 = 0.03%（工资越高税率越高，具体百度吧） 例子 应发工资 10000 五险 养老 10000 * 0.08 = 800 失业 10000 * 0.003 = 30 医疗 10000 * 0.02 = 200 生育和工伤不需要个人承担 总共 800 + 30 + 200 = 1030 公积金 一金较为特殊，需要看公司定的缴纳基数（可能会按照比应发工资低的基数缴纳） 一金理想情况 10000 * 0.12 一金非理想情况 2600 * 0.12（2600是胡乱写的，具体要公司定） 总共（理想） 10000 * 0.12 = 1200 税款 这个较为复杂，目前应发工资超过 5000 才交税，税率为 3%工资到达某档位后，税率也会加，10000 是 3%，具体百度吧但是 3% 并不指的是应发工资（10000）的 3%，而是 应发工资 - 底数 - 五险一金扣款后 的剩余部分看公式吧 (10000 - 5000 - 五险一金个人承担部分) * 0.03 = 所需要交纳的税款 (10000 - 5000 - 1030 - 1200) * 0.03 = 83.1 实发工资 应发工资 - 五险 - 公积金 - 税 = 实发工资 10000 - 1030 - 1200 - 83.1 = 7686.9","categories":[{"name":"职场经验","slug":"职场经验","permalink":"https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"工资","slug":"工资","permalink":"https://q-jason.github.io/blog/tags/%E5%B7%A5%E8%B5%84/"}]},{"title":"酷库-vue相关","slug":"酷库-vue相关","date":"2019-11-07T01:06:15.000Z","updated":"2020-04-20T11:40:31.515Z","comments":true,"path":"article/ck98erggm00284wrqhwekd7sb/","link":"","permalink":"https://q-jason.github.io/blog/article/ck98erggm00284wrqhwekd7sb/","excerpt":"","text":"UI库element-ui https://github.com/ElemeFE/element主要用于 PC 端项目（移动端改改样式大部分组件其实也可以正常使用）其中的 messageBox，loading 组件特别好用 vant-ui https://github.com/youzan/vant主要用于移动端项目拥有大量的实用组件 cube-ui https://github.com/didi/cube-ui主要用于移动端项目拥有大量实用组件 transition 过渡动画vue2-animate https://github.com/asika32764/vue2-animate基于 animate.css 封装的进场离场动画 表单验证vee-validate https://github.com/logaretm/vee-validate主要用于表单验证，使用起来十分优雅方便，可嵌套几乎任何 ui 库使用内置了大量的规则，并实现了国际化 函数式调用vue-create-api ★ https://github.com/cube-ui/vue-create-api强烈推荐作用是将组件函数式调用，主要用于弹框等，可以设置单例模式。 时间操作、格式化vue-moment https://github.com/brockpetrie/vue-moment将 moment 封装为 js 过滤器 离线存储vuex-persistedstate https://github.com/robinvdvleuten/vuex-persistedstate主要用于 vuex 离线存储例如：存储用户状态 token 等 拖拽排序Vue.Draggable https://github.com/SortableJS/Vue.Draggable用于拖拽排序场景，高星库 地图vue-baidu-map https://github.com/Dafrok/vue-baidu-map作用：组件化实现百度地图的功能备注：推荐使用，使用起来非常优雅 图表vue-echarts https://github.com/ecomfe/vue-echarts作用：对 echarts 的组件封装备注：大量数据时，要注意 vue 数据绑定的性能问题备注：组件提供了 props manual-update 来避免数据绑定 国际化vue-i18n github: https://github.com/kazupon/vue-i18n备注：碰到国际化问题无脑用就行了 改变语言 若在组件中用 this.$i18n.locale 改变，则只会改变当前组件要改变 this.$root.$i18n.locale 或 i18n 实例，才会全局改变 富文本编辑器 下面的这俩都是基于 quill.js默认的图片是已 base64 的形式上传 vue-quill-editor 基于 quill.jshome: https://github.surmon.me/vue-quill-editorgithub: https://github.com/surmon-china/vue-quill-editornpm: https://www.npmjs.com/package/vue-quill-editor vue2-editor 基于 quill.jshome: https://www.vue2editor.com/github: https://github.com/davidroyer/vue2-editornpm: https://www.npmjs.com/package/vue2-editor github 比 vue-quill-editor 星少一半多…但是个人感觉比 vue-quill-editor 好使多了…内置了图片添加和删除事件，可轻松实现各种逻辑","categories":[{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/categories/%E9%85%B7%E5%BA%93/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://q-jason.github.io/blog/tags/vue/"}]}]}