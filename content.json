{"meta":{"title":"qteam","subtitle":"博客","description":"碰到的事情，记下来，才是真的","author":"jason","url":"https://q-jason.github.io/blog","root":"/blog/"},"pages":[{"title":"","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":false,"path":"categories/index.html","permalink":"https://q-jason.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":false,"path":"tags/index.html","permalink":"https://q-jason.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"uni-app-心得","slug":"uni-app-心得","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn7l0002x8yxgh5h0e3r/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn7l0002x8yxgh5h0e3r/","excerpt":"","text":"待","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://q-jason.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"vue","slug":"vue","permalink":"https://q-jason.github.io/blog/tags/vue/"}]},{"title":"vh单位的可信度","slug":"vh单位的可信度","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn7t0006x8yxdulkfohr/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn7t0006x8yxdulkfohr/","excerpt":"","text":"vw, vh 都是自适应页面的利器vw 表现良好，vh 在 pc 端网页表现良好，但是在手机下 不！可！信！ 问题 手机游览器的 100vh 总会高出一截经过查阅，好像是算上了地址栏的高度，并且不准备修复，被认为是正常的。 测试代码1&lt;div id=\"test\" style=\"height: 100vh\"&gt;&lt;div&gt; 1alert('innerHeight: ' + innerHeight + '\\n' + 'test元素高度: ' + $('#test').css('height')); PC端测试 移动端测试 解决思路 使用 js 赋值 innerHeight 1$('.height-full').css('height', window.innerHeight);","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"css","slug":"css","permalink":"https://q-jason.github.io/blog/tags/css/"}]},{"title":"vue-spa-移动端理想的用户体验","slug":"vue-spa-移动端理想的用户体验","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn7v0007x8yx2qq76nd1/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn7v0007x8yx2qq76nd1/","excerpt":"","text":"目前前端的跨端技术层出不穷，开发快，对用户透明。对前端开发者来说掌握的东西要更多了~ 本文谈论一些原生移动 app 用户体验 体验分析 每天都会用各种 app，各种操作熟记于心总结出以下网页不容易实现的需求 类似网页的历史记录，前进刷新网页，后退时使用历史缓存 前进或者后退（物理返回键）会有不同的切换效果（滑动切换） 点击物理返回键时若正处于 “模态对话框(dialog, alert)等”，不会返回页面，会先将对话框关闭 实现难点分析以及解决方案 vue keep-alive 无法实现前进刷新，后退使用缓存的 app 缓存逻辑 这里可以使用 vue-navigation 实现 前进和后退实现不同的切换效果 vue transition 标签配合 vue-navigation 实现 模态框逻辑，如何判断当前正在弹框，如何优雅的阻止切换切换并关闭模态框 推荐 vue-create-api 这个库，本文例子中使用了 element-ui 中的 MessageBox 实现 例子 github","categories":[{"name":"前端","slug":"前端","permalink":"https://q-jason.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://q-jason.github.io/blog/tags/vue/"},{"name":"spa","slug":"spa","permalink":"https://q-jason.github.io/blog/tags/spa/"},{"name":"用户体验","slug":"用户体验","permalink":"https://q-jason.github.io/blog/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"}]},{"title":"vue-酷库","slug":"vue-酷库","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn7x0008x8yx8lba6ekq/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn7x0008x8yx8lba6ekq/","excerpt":"","text":"UI库element-ui https://github.com/ElemeFE/element主要用于 PC 端项目个人认为其中的 messageBox (弹框消息盒子) 组件特别好用移动端改改样式其实也可以正常使用 vant-ui https://github.com/youzan/vant主要用于移动端项目拥有大量的实用组件 cube-ui https://github.com/didi/cube-ui主要用于移动端项目拥有大量实用组件 表单验证vee-validate https://github.com/logaretm/vee-validate主要用于表单验证，使用起来十分优雅方便，可嵌套几乎任何 ui 库使用内置了大量的规则，并实现了国际化 函数式调用vue-create-api ★ https://github.com/cube-ui/vue-create-api强烈推荐作用是将组件函数式调用，主要用于弹框等，可以设置单例模式。 时间操作、格式化vue-moment https://github.com/brockpetrie/vue-moment将 moment 封装为 js 过滤器 离线存储vuex-persistedstate https://github.com/robinvdvleuten/vuex-persistedstate主要用于 vuex 离线存储例如：存储用户状态 token 等 拖拽排序Vue.Draggable https://github.com/SortableJS/Vue.Draggable用于拖拽排序场景，高星库","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://q-jason.github.io/blog/tags/vue/"},{"name":"酷库","slug":"酷库","permalink":"https://q-jason.github.io/blog/tags/%E9%85%B7%E5%BA%93/"}]},{"title":"window.opener","slug":"window.opener","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn81000cx8yx2f1e54xh/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn81000cx8yx2f1e54xh/","excerpt":"","text":"项目中经常存在着需要跳转网页然后再跳转回来的需求比如说 oauth 登陆，微信支付宝等第三方登陆等若采用通常的链接跳转，会失去当前页面的所有逻辑回调跳转回来时页面也会重新加载用户体验极差，代码逻辑也失去了连贯性 终于有一天。。我发现了 window.opener….. window.open 该方法将打开一个新的网页标签注意：若用户未交互，游览器会阻止该方法的执行（游览器会认为不是用户的操作，认为是广告等）解决：在用户交互事件中调用 window.open（click 等事件） 123document.getElementById('btn').addEventListener(function (e) &#123; window.open('https://www.baidu.com');&#125;) window.opener 当前网页必须由 window.open 打开时才有window.opener 指向 window.open 时的父 window 对象 1window.opener.alert('提示') 实现（跳转网页回调）父窗口123456789// 定义回调 cb 事件window.callback = function (params) &#123; console.log(params);&#125;;// 点击按钮触发网页跳转，打开一个新页面document.getElementById('btn').addEventListener(function (e) &#123; window.open('https://www.baidu.com');&#125;) 子窗口12345// 触发父窗口回调方法，并传入参数window.opener.callback(/* any */);// 关闭当前子窗口window.close(); 这样保证了页面的执行顺序，也保证了用户体验。","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"js","slug":"js","permalink":"https://q-jason.github.io/blog/tags/js/"}]},{"title":"五险一金扣除，实发工资算法","slug":"五险一金扣除，实发工资算法","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn82000dx8yx3d0khhop/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn82000dx8yx3d0khhop/","excerpt":"","text":"目前是 2019.10.03，本文记载着我理解的五险一金和税款的算法，具体比例会隔几年一调整，想要精确百度下即可。 个人承担比例 养老 = 8% 医疗 = 2% 失业 = 0.3% 一金 = 12%（该值非规定） 税款 = 0.03%（工资越高税率越高，具体百度吧） 例子 应发工资 10000 五险 养老 10000 * 0.08 = 800 失业 10000 * 0.003 = 30 医疗 10000 * 0.02 = 200 生育和工伤不需要个人承担 总共 800 + 30 + 200 = 1030 公积金 一金较为特殊，需要看公司定的缴纳基数（可能会按照比应发工资低的基数缴纳） 一金理想情况 10000 * 0.12 一金非理想情况 2600 * 0.12（2600是胡乱写的，具体要公司定） 总共（理想） 10000 * 0.12 = 1200 税款 这个较为复杂，目前应发工资超过 5000 才交税，税率为 3%工资到达某档位后，税率也会加，10000 是 3%，具体百度吧但是 3% 并不指的是应发工资（10000）的 3%，而是 应发工资 - 底数 - 五险一金扣款后 的剩余部分看公式吧 (10000 - 5000 - 五险一金个人承担部分) * 0.03 = 所需要交纳的税款 (10000 - 5000 - 1030 - 1200) * 0.03 = 83.1 实发工资 应发工资 - 五险 - 公积金 - 税 = 实发工资 10000 - 1030 - 1200 - 83.1 = 7686.9","categories":[{"name":"职场经验","slug":"职场经验","permalink":"https://q-jason.github.io/blog/categories/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"职场","slug":"职场","permalink":"https://q-jason.github.io/blog/tags/%E8%81%8C%E5%9C%BA/"}]},{"title":"到底是谁的滚动条？","slug":"到底是谁的滚动条","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn85000hx8yx9f3ka3ym/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn85000hx8yx9f3ka3ym/","excerpt":"","text":"网页中默认的滚动条到底是哪个元素的？body？html？ 测试 打印输出各大游览器 body 和 html 标签的 scrollTop 属性 chrome firefox ie11 safari 总结 除去 safari 默认滚动条都是 html 元素的只有 safari 这个奇葩滚动条是使用 body 元素的为啥 safari 这个奇葩总会有各种有问题…… 优雅的获取页面滚动位置1234567891011// IE9+window.pageYOffset;// 非 IEwindow.scrollY;// IE8以及以下document.documentElement.scrollTop;// 兼容性最好的写法window.pageYOffset || document.documentElement.scrollTop; 优雅的滚动页面原生方法（推荐）12345// 这俩货是一样的....window.scrollTo(x, y);// 相对滚动window.scrollBy(offsetX, offsetY) 直接赋值（不推荐）12345// chrome, ie, 火狐 ...document.documentElement.scrollTop = 100// 奇葩 safaridocument.body.scrollTop = 500","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"js","slug":"js","permalink":"https://q-jason.github.io/blog/tags/js/"},{"name":"html","slug":"html","permalink":"https://q-jason.github.io/blog/tags/html/"}]},{"title":"移动端文字垂直居中的问题","slug":"移动端文字垂直居中的问题","date":"2019-11-06T01:51:31.187Z","updated":"2019-11-06T01:51:31.187Z","comments":true,"path":"article/ck2mmmn87000jx8yxdqbk3t6t/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn87000jx8yxdqbk3t6t/","excerpt":"","text":"移动端开发时经常会碰到文字居上的问题经过测试发现，主要是使用了独特的 font-family 引起的 移动端最佳 font-family 设置1234567body &#123; font-family: -apple-system, BlinkMacSystemFont, \"PingFang SC\", \"Helvetica Neue\", STHeiti, \"Microsoft Yahei\", Tahoma,Simsun,sans-serif;&#125; 移动端 input placeholder 居上 经过测试是由于 placeholder 默认的 line-height 导致的 1234/* safari placeholder 偏上的问题 */input::-webkit-input-placeholder &#123; line-height: normal;&#125; 问题重现android 未设置特殊字体 android 设置了特殊字体 ios 未设置特殊字体 ios 设置了特殊字体","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"css","slug":"css","permalink":"https://q-jason.github.io/blog/tags/css/"}]},{"title":":hover伪类选择器，移动端的表现","slug":"hover伪类选择器-移动端的表现","date":"2019-11-06T01:51:31.183Z","updated":"2019-11-06T01:51:31.183Z","comments":true,"path":"article/ck2mmmn7d0000x8yx1nvo4r4k/","link":"","permalink":"https://q-jason.github.io/blog/article/ck2mmmn7d0000x8yx1nvo4r4k/","excerpt":"","text":"这里主要记载一个响应式项目中碰到的下拉菜单的问题 美化下拉菜单在项目中是常见的需求常用 div 模拟，在 pc 端可以用 :hover 选择器移入时显示子菜单但是 :hover 在移动端兼容并不友好经过测试，在除 safari 的游览器中，兼容还比较好，唯独 safari 出现了问题… 例子 移动端 safari 的奇怪表现 必须是 a 元素才能触发 :hover 将元素修改成了 a 之后，点击页面其他处无法失去 :hover 焦点，除非点击其他 按钮 或 input 解决方案 使用 js 事件加 class 的方式实现，代替 :hover","categories":[{"name":"web","slug":"web","permalink":"https://q-jason.github.io/blog/categories/web/"}],"tags":[{"name":"css","slug":"css","permalink":"https://q-jason.github.io/blog/tags/css/"}]}]}